{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1695114863066},{"_id":"source/_posts/test.md","hash":"6ca23c6bdc2794b39ac3011f0ff137d135f2a813","modified":1695123783000},{"_id":"source/_posts/Git/Obsidian Git初使用.md","hash":"d848d3a74bad58adbe075066d8617209ed55c6de","modified":1695127683891},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1695121494258},{"_id":"source/_posts/Git/Git操作.md","hash":"9b52caa6ef5ce7c88719e1c823c68ed67925423a","modified":1695127204622},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"cdde6c6d6a1bdf9fb965313e21d92cf6213582b6","modified":1695121494262},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1695121494162},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"49f681a203eecfa7127ac22edc13bd3b49693d0a","modified":1695121494226},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1695121494262},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"b2c283d4e9aaf9ba49b8abb81adc03117b0e07db","modified":1695121494226},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1695121494262},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1695121494262},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1695121494262},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1695121494262},{"_id":"node_modules/hexo-theme-fluid/layout/.DS_Store","hash":"e2295dbe42d85b294e6f3aeefaf3623bd31759ed","modified":1695121494162},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1695121494262},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1695121494162},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1695121494172},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1695121494178},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1695121494162},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1695121494180},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1695121494262},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1695121494262},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1695121494262},{"_id":"node_modules/hexo-theme-fluid/scripts/.DS_Store","hash":"daec53fd4601c37ca272321ba2eb594d9b0a43ac","modified":1695121494162},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/source/.DS_Store","hash":"e11e97632e6d13d5b9dccadcc514268f3c039508","modified":1695121494162},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1695121494172},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1695121494180},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1695121494178},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1695121494192},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1695121494210},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/scripts/events/.DS_Store","hash":"80308812974d7cb7e001cd8f64ff9fced30ff139","modified":1695121494162},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1695121494222},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1695121494210},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1695121494210},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1695121494222},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1695121494226},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1695121494222},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1695121494226},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1695121494226},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1695121494226},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1695121494222},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1695121494226},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1695121494222},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1695121494162},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1695121494258},{"_id":"node_modules/hexo-theme-fluid/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1695121494162},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1695121494226},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1695121494162},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1695121494232},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1695121494222},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1695121494222},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1695121494232},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1695121494180},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1695121494226},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1695121494172},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1695121494172},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1695121494172},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1695121494180},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1695121494172},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1695121494192},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1695121494178},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1695121494182},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1695121494194},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1695121494202},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"b2f61b91fffb17d11ad56811f07d52d23f012741","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1695121494212},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1695121494232},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1695121494232},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1695121494232},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1695121494232},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1695121494232},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1695121494258},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1695121494232},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1695121494232},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1695121494258},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1695121494242},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1695121494258},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1695121494252},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1695121494258},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1695121494258},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1695121494258},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1695121494232},{"_id":"public/local-search.xml","hash":"f2d11a7a96814736d93fb54e6471838e5382e721","modified":1695259078545},{"_id":"public/archives/index.html","hash":"d73bd05792e62ae3e21f0868bd18777cd79d5127","modified":1695208802481},{"_id":"public/archives/2023/index.html","hash":"09bf27599c2693e8bc273360a185cdc85a542583","modified":1695208802481},{"_id":"public/archives/2023/09/index.html","hash":"49184c5e4a1432db20429d09eaa321c97018f3d5","modified":1695208802481},{"_id":"public/index.html","hash":"b5aa61bfa8c2f403d2ff368ca0b2800fdacf4d22","modified":1695259078545},{"_id":"public/404.html","hash":"fbc65db9be749e426ad3dc2f1f5e3a632e35b168","modified":1695208802481},{"_id":"public/tags/index.html","hash":"3c3313ef7a74173092ae510c93cc8d470888ac9d","modified":1695208802481},{"_id":"public/categories/index.html","hash":"5809df4d190b7fca13f25b42c2aa353106172268","modified":1695209143143},{"_id":"public/links/index.html","hash":"1bc8ccea8f62ed36f8fd5ed7b3a72a790a63551e","modified":1695208802481},{"_id":"public/2023/09/19/Git/Obsidian Git初使用/index.html","hash":"1c109adbacaca8927dedb9e821f24d47f1e1a623","modified":1695128105308},{"_id":"public/2023/09/19/Git/Git操作/index.html","hash":"c9692a8c15a1d428d6464637a1801d048a9369f6","modified":1695128105308},{"_id":"public/2023/09/19/test/index.html","hash":"b6c0467dc868c77ef8c5623cd8fa8a103482c06b","modified":1695127203516},{"_id":"public/2023/09/19/hello-world/index.html","hash":"58004a30b2d42af5590d138a3bf53cf60217e6ba","modified":1695127203516},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1695127203516},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1695127203516},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1695127203516},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1695127203516},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1695127203516},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1695127203516},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1695127203516},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1695127203516},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1695127203516},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1695127203516},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1695127203516},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1695127203516},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1695127203516},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1695127203516},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1695127203516},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1695127203516},{"_id":"public/css/main.css","hash":"526a4522eb54bb51772f51fb98295dc4fe03429f","modified":1695127203516},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1695127203516},{"_id":"source/_posts/TODO.md","hash":"c482a8dc8169fbbf29d4f2dcf89ef24792bef477","modified":1695128079077},{"_id":"source/_posts/AI/AI绘画.md","hash":"7d8c876022d68406d8f0d145f0e7a548fb1fc5fc","modified":1695128106609},{"_id":"source/_posts/Linux学习/WSL配置.md","hash":"e984145483c72629dd3de23a2512d8ef0c857423","modified":1695128106609},{"_id":"source/_posts/Linux学习/Shell编程.md","hash":"95cb826783920b3520887075c09c23f887e7afb0","modified":1695128106609},{"_id":"source/_posts/Linux学习/基本命令.md","hash":"390d640b81a62d79ad7c15423012a4ec36e03357","modified":1695128106609},{"_id":"source/_posts/Linux学习/文件系统.md","hash":"4cefa497bc91dcc5601e363da070d6d759f610bb","modified":1695128106609},{"_id":"source/_posts/Linux学习/文本编辑器.md","hash":"cde90d8df1cb79cfb8055978785655d7d69480c8","modified":1695128106609},{"_id":"source/_posts/Linux学习/程序与进程管理.md","hash":"57a5434789ba375a114e1ce386429a30069a23d5","modified":1695128106609},{"_id":"source/_posts/Ob插件/Advanced Tables 表格绘制.md","hash":"3d4f4bf2de5b47fc0139102bb1edfa8644db2647","modified":1695128106609},{"_id":"source/_posts/旅游/景点.md","hash":"275a5bc82806676839cf1621ef47595f6146147e","modified":1695128106609},{"_id":"source/_posts/旅游/美食.md","hash":"cc17c5e9ed76c624f3f2d242b9a02782b5fb83e3","modified":1695128106609},{"_id":"source/_posts/旅游/西安8.16-20.md","hash":"ce4a61217d6fb7844f14b2d0ff4a148df76beb13","modified":1695128106609},{"_id":"source/_posts/论文/扩散模型论文todo（已过期）.md","hash":"7ffc2a59c4296c1bb9a14dc3574ff8480d3bea58","modified":1695128106609},{"_id":"source/_posts/课程/数据库.md","hash":"9f3bb4bc4d1b67e169a216acf73124164af47379","modified":1695128106609},{"_id":"source/_posts/课程/智能计算系统.md","hash":"24eee87946acf5b9cee790c31a72ce8a1c890561","modified":1695128106609},{"_id":"source/_posts/课程/神经网络与深度学习.md","hash":"5c2a2537a135acb19d1bb5048def5818c319e9d9","modified":1695128106609},{"_id":"source/_posts/课程/操作系统/Blitz软件.md","hash":"c83730f120d8c515e2242dbae82f3711aa0c05dd","modified":1695128106609},{"_id":"source/_posts/课程/操作系统/操作系统.md","hash":"90df711478ee10a9a38a6642cd3b6e9608bf9fa1","modified":1695128106609},{"_id":"source/_posts/课程/软件工程/作业1 课后阅读.md","hash":"1b6623f0d659d8b2ecdea83101919ec32ab26251","modified":1695128106609},{"_id":"source/_posts/课程/软件工程/大作业 酒店温控计费系统 规划.md","hash":"8b8b9d947991dbb4504a1fbe4357ed583eccfe45","modified":1695128106609},{"_id":"source/_posts/课程/软件工程/软件工程.md","hash":"60de017b44bff9c34f3d70dc68820bcbb5609471","modified":1695128106609},{"_id":"source/_posts/PowerShell美化.md","hash":"9910b3d1c72c68e2b5263eed6bf2390e8642088f","modified":1695128056231},{"_id":"public/archives/page/3/index.html","hash":"94128f8bc5eba3f83e7a7e22b1d3ce8978c17917","modified":1695208802481},{"_id":"public/archives/page/2/index.html","hash":"16291ac890667db607631b51dfffcb3e88df01fc","modified":1695208802481},{"_id":"public/archives/2023/page/2/index.html","hash":"71c387e300200c13472f65e7744f656d8e16554f","modified":1695208802481},{"_id":"public/archives/2023/page/3/index.html","hash":"8755ce9205882125ffde916b3375cce1023f5b52","modified":1695208802481},{"_id":"public/archives/2023/09/page/2/index.html","hash":"be80817b99f8bb72888504b2e71654ef6e621c0c","modified":1695208802481},{"_id":"public/archives/2023/09/page/3/index.html","hash":"c9eda01e310c29264111d9184d4986a41d7ef841","modified":1695208802481},{"_id":"public/page/3/index.html","hash":"e71b67f7bb653e19bcc755ee07e5252bad0cc965","modified":1695208802481},{"_id":"public/categories/Git/index.html","hash":"450ee3ab59f8209cb0ae965bd1635dc2637b1f23","modified":1695128105308},{"_id":"public/2023/09/19/AI/AI绘画/index.html","hash":"4917bb458f2f7ca8d791993e8479e932d35866f6","modified":1695128105308},{"_id":"public/2023/09/19/TODO/index.html","hash":"76a7a08e7e8be1a1f561246821f261299db07a59","modified":1695128105308},{"_id":"public/2023/09/19/PowerShell美化/index.html","hash":"8520e527d67e7bee348ca9694301f322b2b9f2e8","modified":1695128105308},{"_id":"public/2023/09/19/旅游/西安8.16-20/index.html","hash":"84d949767d8b14659dfa8522c32f450e61dcf8a5","modified":1695128105308},{"_id":"public/2023/09/19/旅游/美食/index.html","hash":"c78e55eb564e2cc964d17d02a5b35b3fd2cd1cdc","modified":1695128105308},{"_id":"public/2023/09/19/旅游/景点/index.html","hash":"71f9a05755e681d1d52b3d0d33c5f4217a86d7c3","modified":1695128105308},{"_id":"public/2023/09/19/论文/扩散模型论文todo（已过期）/index.html","hash":"6db6b863beee79256f07f2175f43e8f48138f4ed","modified":1695128105308},{"_id":"public/2023/09/19/课程/软件工程/软件工程/index.html","hash":"ddca641552e4910b0a36c903054a80463d37a16d","modified":1695128105308},{"_id":"public/2023/09/19/课程/软件工程/大作业 酒店温控计费系统 规划/index.html","hash":"29a082f43a38e5f8cde9ed1b31a7b66d0af62df0","modified":1695128105308},{"_id":"public/2023/09/19/课程/软件工程/作业1 课后阅读/index.html","hash":"8a376ef2b0b11799e03175df4dc0da50241f65b9","modified":1695128105308},{"_id":"public/2023/09/19/课程/操作系统/操作系统/index.html","hash":"f277c288178dc69b47b241ba4e6b5ee3dc86efb3","modified":1695128105308},{"_id":"public/2023/09/19/课程/操作系统/Blitz软件/index.html","hash":"109d46e3dd2760ea1306b5a7dc8662186ade6083","modified":1695128105308},{"_id":"public/2023/09/19/课程/神经网络与深度学习/index.html","hash":"ba3ea4b5b0828d7f7a7f50c1bd0145985c25ee27","modified":1695128105308},{"_id":"public/2023/09/19/课程/智能计算系统/index.html","hash":"ad1bb91653906e1274b11cfbffd80c52d1bc0307","modified":1695128105308},{"_id":"public/2023/09/19/Ob插件/Advanced Tables 表格绘制/index.html","hash":"650f1aed022f432b28587916d22a74b80b78ac64","modified":1695128105308},{"_id":"public/2023/09/19/课程/数据库/index.html","hash":"52e75db85091c5451b1a05586ca5dc333bfc521c","modified":1695128105308},{"_id":"public/2023/09/19/Linux学习/程序与进程管理/index.html","hash":"ba6c437dd863762a7bfa5e01e7bf2c313e4b741b","modified":1695128105308},{"_id":"public/2023/09/19/Linux学习/文本编辑器/index.html","hash":"55500476af95a3cd0bc58aff00667ee4e410b342","modified":1695128105308},{"_id":"public/2023/09/19/Linux学习/文件系统/index.html","hash":"57314efca8034dbf7d0358180c7b5679b83f0b8c","modified":1695128105308},{"_id":"public/2023/09/19/Linux学习/基本命令/index.html","hash":"351de6f37295e8c289258c1787fe9d9d0f21b167","modified":1695128105308},{"_id":"public/2023/09/19/Linux学习/WSL配置/index.html","hash":"aea1bc747d4946703ad147805b614c35f06938d9","modified":1695128105308},{"_id":"public/2023/09/19/Linux学习/Shell编程/index.html","hash":"018832e77a9ccaf5b8678867612ef05ad252f46e","modified":1695128105308},{"_id":"public/page/2/index.html","hash":"40057181443a9524bcd09722c679c30433e20cd1","modified":1695256918449},{"_id":"source/_posts/Notes/Git/Git操作.md","hash":"d69b38827faa409b03d34e5f7c1c5bf161c26a14","modified":1695130346398},{"_id":"source/_posts/Notes/Git/Obsidian Git初使用.md","hash":"067e002965077219d38026f323283c5b4f19fbaa","modified":1695130346398},{"_id":"source/_posts/Notes/AI/AI绘画.md","hash":"c14db3faa89b6824c9310085638d0dcb180f1020","modified":1695130346398},{"_id":"source/_posts/Notes/Linux学习/Shell编程.md","hash":"17052ad4cd3eab6fed6dd8b2674d99d946525756","modified":1695130346398},{"_id":"source/_posts/Notes/Linux学习/WSL配置.md","hash":"e959034af7585b788725429fcc0579706819614b","modified":1695130346398},{"_id":"source/_posts/Notes/Linux学习/基本命令.md","hash":"89344d8702696e1d82db95364b6cbed49e1a32e5","modified":1695130346398},{"_id":"source/_posts/Notes/Linux学习/文本编辑器.md","hash":"c669cde037ecaffed7762feca5b8ea9d3a7f865a","modified":1695130346398},{"_id":"source/_posts/Notes/Linux学习/文件系统.md","hash":"e0c14d7df01d63d3585b6860feb3e284fe31dec8","modified":1695130346398},{"_id":"source/_posts/Notes/Linux学习/程序与进程管理.md","hash":"79ecfe8a011ce6b56d7e08021bfb090cb6f218c8","modified":1695130346398},{"_id":"source/_posts/Notes/Ob插件/Advanced Tables 表格绘制.md","hash":"a5ab4b0e2e9d99ea0c9ef473f7a614be944c52dd","modified":1695130349495},{"_id":"source/_posts/Notes/论文/扩散模型论文todo（已过期）.md","hash":"4b6ce829312fbcd1ad4d9584026d3580eb25edaf","modified":1695130350342},{"_id":"source/_posts/Notes/旅游/美食.md","hash":"77c55d2f217c7cfc91d83d90d49feb86b55f802b","modified":1695130350342},{"_id":"source/_posts/Notes/旅游/西安8.16-20.md","hash":"d8fd9b003f0a798ec34fd6d160f69f67fd79c349","modified":1695130350342},{"_id":"source/_posts/Notes/旅游/景点.md","hash":"31ec9e689a2f0f2b88a23e50e51d527dc718cf82","modified":1695130350342},{"_id":"source/_posts/Notes/PowerShell美化.md","hash":"fd127534d4e40ee73205cab5c0c8e15d2174e4d4","modified":1695130350601},{"_id":"source/_posts/Notes/TODO.md","hash":"04483371f320de4d0a34b9dc90e41d21b8d5ecf8","modified":1695258928185},{"_id":"source/_posts/Notes/课程/数据库.md","hash":"6e2c083a4f5c7129de81cbb8b585642c074f8997","modified":1695131715528},{"_id":"source/_posts/Notes/课程/神经网络与深度学习.md","hash":"6cb3001588b1d102589871bee52cd7dfa273670d","modified":1695132221601},{"_id":"source/_posts/Notes/课程/智能计算系统.md","hash":"ead2b2d1fbbb5b1db8b1128ed2df8b5f38a91f25","modified":1695256807847},{"_id":"source/_posts/Notes/课程/操作系统/Blitz软件.md","hash":"2e58b86cdd420d4d61c7c05ed8972fe01d3296aa","modified":1695131715528},{"_id":"source/_posts/Notes/课程/操作系统/操作系统.md","hash":"b3dad7c3f42508d81079661f7986be0fa6c7e99d","modified":1695131715528},{"_id":"source/_posts/Notes/课程/软件工程/作业1 课后阅读.md","hash":"b36571e9110592c14a88c5ba11e8c083f4eefa31","modified":1695131715528},{"_id":"source/_posts/Notes/课程/软件工程/大作业 酒店温控计费系统 规划.md","hash":"695a71f530745c4a70c27309960d49a56af85429","modified":1695131715528},{"_id":"source/_posts/Notes/课程/软件工程/软件工程.md","hash":"2e2af826461538b23cf33457e96e1edd3647f5f4","modified":1695131715528},{"_id":"source/_posts/Notes/未命名.md","hash":"19f095425160222e3429b147a5f414a888d3a816","modified":1695131715528},{"_id":"public/2023/09/19/Notes/未命名/index.html","hash":"be25324bf54e83161e84cd853227c5c0c20b82d3","modified":1695131714313},{"_id":"public/2023/09/19/Notes/AI/AI绘画/index.html","hash":"f11551872b866fc649f214f6b2c3059d1bf27745","modified":1695208802481},{"_id":"public/2023/09/19/Notes/TODO/index.html","hash":"d4af351894ff410d7c8655f9942d2fa5406fb667","modified":1695259078545},{"_id":"public/2023/09/19/Notes/PowerShell美化/index.html","hash":"0a8ac283626cd0641673b6f4587d37ad07744bab","modified":1695208802481},{"_id":"public/2023/09/19/Notes/旅游/西安8.16-20/index.html","hash":"2622a6ee4357c3ccec322e18b6c7dbdbe5453898","modified":1695208802481},{"_id":"public/2023/09/19/Notes/旅游/美食/index.html","hash":"321d4678236e923c7ef8f10beb6aa873381abb5d","modified":1695208802481},{"_id":"public/2023/09/19/Notes/旅游/景点/index.html","hash":"7af14645d8427681f6994ff0651ce32b28189926","modified":1695208802481},{"_id":"public/categories/课程/index.html","hash":"ac10c7ced914752536148ef0ba8c4cd3050603ae","modified":1695131714313},{"_id":"public/categories/课程/操作系统/index.html","hash":"984c03377495eb3b09023098412874f76cac5030","modified":1695131714313},{"_id":"public/categories/课程/软件工程/index.html","hash":"ab85290e82932e6b0e32927c6033cfe036908d9b","modified":1695131714313},{"_id":"public/categories/Notes/page/2/index.html","hash":"582b7185fdafd28892640b2930f100aa781ba546","modified":1695208802481},{"_id":"public/categories/Notes/Linux学习/index.html","hash":"cd5cc1e5fb2a639342fd47c0c7d720b80f6857e2","modified":1695208802481},{"_id":"public/categories/Notes/Git/index.html","hash":"13858f613541c59ddf4b847d796397d17b00d8ff","modified":1695208802481},{"_id":"public/categories/Notes/AI/index.html","hash":"3c8892059099094d4da6550e216f1e457170ac50","modified":1695208802481},{"_id":"public/categories/Notes/Ob插件/index.html","hash":"498b4a4a98e1f89053fa4249c33df67c3841309c","modified":1695208802481},{"_id":"public/categories/Notes/旅游/index.html","hash":"301e2f8fb2f80d19ab84dae83e0308213ff4fc36","modified":1695208802481},{"_id":"public/categories/Notes/论文/index.html","hash":"399e43aa4a84d5cbdd8f6c141820b03837942b8e","modified":1695208802481},{"_id":"public/categories/Notes/index.html","hash":"3819ae8de9b7169688ad4831dbbd68f09bfa7250","modified":1695208802481},{"_id":"public/2023/09/19/Notes/论文/扩散模型论文todo（已过期）/index.html","hash":"5dc52eb226783a6b64e1220bc558841bf17a261e","modified":1695208802481},{"_id":"public/2023/09/19/Notes/课程/软件工程/软件工程/index.html","hash":"116f11203e4b2f6eb5b3b0ccd3e4f0ac303f7e2e","modified":1695208802481},{"_id":"public/2023/09/19/Notes/课程/软件工程/大作业 酒店温控计费系统 规划/index.html","hash":"3ee2481a6ed6bb36705839575ffcae61972790a4","modified":1695208802481},{"_id":"public/2023/09/19/Notes/课程/软件工程/作业1 课后阅读/index.html","hash":"5efe556fcc3f0ebd387e2a66c15fc8f7bcf20a46","modified":1695208802481},{"_id":"public/2023/09/19/Notes/课程/操作系统/操作系统/index.html","hash":"70240a9db5e3ee9aec16335f1dd66a1ce276a738","modified":1695208802481},{"_id":"public/2023/09/19/Notes/课程/操作系统/Blitz软件/index.html","hash":"8e88a4e0487057ef0bdb41a46551ddc1292a2991","modified":1695208802481},{"_id":"public/2023/09/19/Notes/课程/神经网络与深度学习/index.html","hash":"e8336e42dc6a8a821bd0a2809547755dda80a745","modified":1695208802481},{"_id":"public/2023/09/19/Notes/课程/智能计算系统/index.html","hash":"52e676c2159012c2c2f7b36a9aad3b1f883af67d","modified":1695256918449},{"_id":"public/2023/09/19/Notes/课程/数据库/index.html","hash":"41e25218e08648f71acffed9ae075e7a9a71d71e","modified":1695208802481},{"_id":"public/2023/09/19/Notes/Ob插件/Advanced Tables 表格绘制/index.html","hash":"dfb7b682de9c21f8e0a8b13154fcc5dd9e43610a","modified":1695208802481},{"_id":"public/2023/09/19/Notes/Linux学习/程序与进程管理/index.html","hash":"ea13d6d7039397f27e44709f2e3522373b42a410","modified":1695208802481},{"_id":"public/2023/09/19/Notes/Linux学习/文本编辑器/index.html","hash":"c4c751ba1be2d8259a564f2d13fdce5629c85a6f","modified":1695208802481},{"_id":"public/2023/09/19/Notes/Linux学习/文件系统/index.html","hash":"75c1502eaf2d829d2ad7db4697821c48339309b6","modified":1695208802481},{"_id":"public/2023/09/19/Notes/Linux学习/基本命令/index.html","hash":"f6cef16adabba5616054e5d75615c435ac59ea29","modified":1695208802481},{"_id":"public/2023/09/19/Notes/Linux学习/WSL配置/index.html","hash":"51124bafa8a267ae566f55dc55df69e5851fcfb3","modified":1695208802481},{"_id":"public/2023/09/19/Notes/Linux学习/Shell编程/index.html","hash":"66cc25b1ec191c06c4d665134339cff0dc66cbe7","modified":1695208802481},{"_id":"public/2023/09/19/Notes/Git/Git操作/index.html","hash":"5d9c0459c12a16ab123039d06eee8271d4e0a82a","modified":1695208802481},{"_id":"public/2023/09/19/Notes/Git/Obsidian Git初使用/index.html","hash":"3273d58695116986a4f3fa3b72f317159c27d385","modified":1695208802481},{"_id":"public/categories/Notes/page/3/index.html","hash":"c61513080addf27531bcbfe658d3f38706c7e8f3","modified":1695208802481},{"_id":"public/categories/Notes/课程/index.html","hash":"e97c5294726ed08a68b1d1d56195b957fbbe6df0","modified":1695208802481},{"_id":"public/categories/Notes/课程/操作系统/index.html","hash":"ea33308a9ac8bba706c7471aa2ccdb92d416b45c","modified":1695208802481},{"_id":"public/categories/Notes/课程/软件工程/index.html","hash":"0a203d323ecb89780bc982fb1db115a79269ed81","modified":1695208802481},{"_id":"source/_posts/Notes/hexo+Obsidian+github博客.md","hash":"8a2bcd528618502b9c326395c4bc43631ad5700d","modified":1695224585076},{"_id":"public/2023/09/19/Notes/hexo+Obsidian+github博客/index.html","hash":"05d5e2fc9b41e0d0df5020ba0d2073b0bcfc3175","modified":1695224599080},{"_id":"source/_posts/Notes/img/Pasted image 20230829165617.png","hash":"9824c67598fab76aa899ac77974ad17d1d44e081","modified":1693299378000},{"_id":"source/_posts/Notes/img/Pasted image 20230829225716.png","hash":"052692ed13eef6efcdc733304d6f7df623c29452","modified":1693321038000},{"_id":"source/_posts/Notes/img/Pasted image 20230912235011.png","hash":"4a98221f448ec6f76d5d4d1d9b2117269892b99f","modified":1694533811039},{"_id":"source/_posts/Notes/img/Pasted image 20230912234523.png","hash":"2da9da2fc9898d2fa96899c783785ce97d05a03a","modified":1694533523460},{"_id":"source/_posts/Notes/img/Pasted image 20230912235338.png","hash":"8e6c3d01d8da70de8b2f47eda9d44fa30e93dfd9","modified":1694534018748},{"_id":"source/_posts/Notes/img/Pasted image 20230913125854.png","hash":"e3c703e8baa4fea97b54a156c96c9e72857be25c","modified":1694581134018},{"_id":"source/_posts/Notes/img/Pasted image 20230917203623.png","hash":"d52d9a6529afa211533505d7b985ea38a0120271","modified":1694954183172},{"_id":"source/_posts/Notes/img/Pasted image 20230918212851.png","hash":"108af025e88e1bb8fc0a39f6dfcee05a46d5be59","modified":1695043731806},{"_id":"source/_posts/Notes/img/Pasted image 20230917104741.png","hash":"faf272427b92db9cc9f3bac07b96378d4cf5401a","modified":1694918861683},{"_id":"source/_posts/Notes/img/Pasted image 20230829224733.png","hash":"b61111b550866fe058d0fcc043027236601f5c83","modified":1693320454000},{"_id":"source/_posts/Notes/img/Pasted image 20230912234005.png","hash":"99fdec04127737625b8762406e42fd5566a4ef23","modified":1694533205104},{"_id":"source/_posts/Notes/img/Pasted image 20230918212903.png","hash":"2d8bf9314998a0e9b44222e3a84daea66e02a065","modified":1695043743307},{"_id":"source/_posts/Notes/img/Pasted image 20230907160359.png","hash":"3e7aa48b6a9b48c8e1de155332be0c4b287ebc0b","modified":1694073840000},{"_id":"source/_posts/Notes/img/Pasted image 20230918213533.png","hash":"a69955d84eea7d37886d67eaf42128ee20af14b1","modified":1695044133509},{"_id":"source/about/index.md","hash":"4960add3c35afd876ffa28e91922a47a21766f92","modified":1695209097607},{"_id":"public/about/index.html","hash":"cdffcc42885bbf86f2d72d26e6e75830ec90e3c7","modified":1695209563057},{"_id":"source/未命名.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1695224070816},{"_id":"public/未命名.html","hash":"c8ede3e66caa9fc15f9faf0a7e70051aa5657f61","modified":1695224313866}],"Category":[{"name":"Git","_id":"clmqazdwk0000lwu53yz7653k"},{"name":"Linux学习","_id":"clmqbip710000g8u5hl6gghz0"},{"name":"AI","_id":"clmqbip7c0004g8u59jjj9g11"},{"name":"Ob插件","_id":"clmqbip7d0006g8u59kvdb6cn"},{"name":"旅游","_id":"clmqbip7e0008g8u5d0rjfvtj"},{"name":"课程","_id":"clmqbip7h000fg8u58bbi9sbz"},{"name":"论文","_id":"clmqbip7i000ig8u5g23g49dy"},{"name":"操作系统","parent":"clmqbip7h000fg8u58bbi9sbz","_id":"clmqbip7k000og8u5b5lg1ksv"},{"name":"软件工程","parent":"clmqbip7h000fg8u58bbi9sbz","_id":"clmqbip7k000rg8u57opl0b5m"},{"name":"Notes","_id":"clmqcuact001ng8u5br7td6nd"},{"name":"Linux学习","parent":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuacz001qg8u5h8g55bqk"},{"name":"Git","parent":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad0001rg8u59vex0vsr"},{"name":"AI","parent":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad40025g8u59wlpdw3c"},{"name":"Ob插件","parent":"clmqcuact001ng8u5br7td6nd","_id":"clmqcucx2002jg8u5douedg07"},{"name":"旅游","parent":"clmqcuact001ng8u5br7td6nd","_id":"clmqcudd2002ug8u5h42r7f96"},{"name":"论文","parent":"clmqcuact001ng8u5br7td6nd","_id":"clmqcudd4002wg8u570xhh132"},{"name":"课程","parent":"clmqcuact001ng8u5br7td6nd","_id":"clmqdo2yb0000u0u52dvthq3i"},{"name":"操作系统","parent":"clmqdo2yb0000u0u52dvthq3i","_id":"clmqdo2yh0003u0u5gqnkd5qz"},{"name":"软件工程","parent":"clmqdo2yb0000u0u52dvthq3i","_id":"clmqdo2yj0007u0u5fkij7h8c"}],"Data":[],"Page":[{"title":"about","date":"2023-09-20T11:24:18.000Z","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-09-20 19:24:18\nlayout: about\n---\n","updated":"2023-09-20T11:24:57.607Z","path":"about/index.html","comments":1,"_id":"clmrnr6mt0000lcu5btgm5f53","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"未命名.md","raw":"","date":"2023-09-20T15:34:30.817Z","updated":"2023-09-20T15:34:30.816Z","path":"未命名.html","title":"","comments":1,"layout":"page","_id":"clmrwsktq0000cku50vbxc8kc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git操作","_content":"\n[Git 教程 | 菜鸟教程](https://www.runoob.com/git/git-tutorial.html)\n### Git配置\nGit 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。\n这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：\n\n- `/etc/gitconfig` 文件：系统中对所有用户都普遍适用的配置。若使用 `git config` 时用 `--system` 选项，读写的就是这个文件。\n- `~/.gitconfig` 文件：用户目录下的配置文件只适用于该用户。若使用 `git config` 时用 `--global` 选项，读写的就是这个文件。\n- 当前项目的 Git 目录中的配置文件（也就是工作目录中的 `.git/config` 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 `.git/config` 里的配置会覆盖 `/etc/gitconfig` 中的同名变量。\n\n### Git创建仓库\n#### git init\n\nGit 使用 **git init** 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 **git init** 是使用 Git 的第一个命令。\n\n在执行完成 **git init** 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。\n\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n\n```\n$ git add *.c\n$ git add README\n$ git commit -m '初始化项目版本'\n```\n以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。\n\n#### git clone\n\n我们使用 **git clone** 从现有 Git 仓库中拷贝项目\n克隆仓库的命令格式为：\n\n```\ngit clone <repo>\n```\n\n如果我们需要克隆到指定的目录，可以使用以下命令格式：\n\n```\ngit clone <repo> <directory>\n```\n\n**参数说明：**\n- **repo:** Git 仓库。\n- **directory:** 本地目录。\n\n### Git 基本操作\nGit 常用的是以下 6 个命令：**git clone**、**git push**、**git add** 、**git commit**、**git checkout**、**git pull**\n![[Pasted image 20230829224733.png]]\n\n#### Git工作区、暂存库和版本库\n\n- **工作区：** 电脑中的文件目录\n- **暂存区：** 英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\n- **版本库：** 工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。\n\nUser在工作区修改文件，通过`git add`添加到暂存区，再通过`git commit`添加到版本库，再通过`git push`添加到远程仓库\n\n**说明：**\n- workspace：工作区\n- staging area：暂存区/缓存区\n- local repository：版本库或本地仓库\n- remote repository：远程仓库\n\n| 命令         | 说明                                     |\n| ------------ | ---------------------------------------- |\n| `git add`    | 添加文件到暂存区                         |\n| `git status` | 查看仓库当前的状态，显示有变更的文件。   |\n| `git diff`   | 比较文件的不同，即暂存区和工作区的差异。 |\n| `git commit` | 提交暂存区到本地仓库。                   |\n| `git reset`  | 回退版本。                               |\n| `git rm`     | 将文件从暂存区和工作区中删除。           |\n| `git mv`     | 移动或重命名工作区文件。                 |\n| `git remote` | 远程仓库操作                             |\n| `git fetch`  | 从远程获取代码库                         |\n| `git pull`   | 下载远程代码并合并                       |\n| `git push`   | 上传远程代码并合并                       |\n\n### Git 分支管理\n创建分支命令：\n\n```\ngit branch (branchname)\n```\n\n切换分支命令:\n\n```\ngit checkout (branchname)\n```\n\n当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。\n合并分支命令:\n\n```\ngit merge\n```\n![[Pasted image 20230829225716.png]]\n\n合并后删除无用分支：\n\n```\ngit branch -d newtest\n```\n\n","source":"_posts/Notes/Git/Git操作.md","raw":"---\ntitle: Git操作\ncategories:\n  - Notes\n  - Git\n---\n\n[Git 教程 | 菜鸟教程](https://www.runoob.com/git/git-tutorial.html)\n### Git配置\nGit 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。\n这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：\n\n- `/etc/gitconfig` 文件：系统中对所有用户都普遍适用的配置。若使用 `git config` 时用 `--system` 选项，读写的就是这个文件。\n- `~/.gitconfig` 文件：用户目录下的配置文件只适用于该用户。若使用 `git config` 时用 `--global` 选项，读写的就是这个文件。\n- 当前项目的 Git 目录中的配置文件（也就是工作目录中的 `.git/config` 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 `.git/config` 里的配置会覆盖 `/etc/gitconfig` 中的同名变量。\n\n### Git创建仓库\n#### git init\n\nGit 使用 **git init** 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 **git init** 是使用 Git 的第一个命令。\n\n在执行完成 **git init** 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。\n\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n\n```\n$ git add *.c\n$ git add README\n$ git commit -m '初始化项目版本'\n```\n以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。\n\n#### git clone\n\n我们使用 **git clone** 从现有 Git 仓库中拷贝项目\n克隆仓库的命令格式为：\n\n```\ngit clone <repo>\n```\n\n如果我们需要克隆到指定的目录，可以使用以下命令格式：\n\n```\ngit clone <repo> <directory>\n```\n\n**参数说明：**\n- **repo:** Git 仓库。\n- **directory:** 本地目录。\n\n### Git 基本操作\nGit 常用的是以下 6 个命令：**git clone**、**git push**、**git add** 、**git commit**、**git checkout**、**git pull**\n![[Pasted image 20230829224733.png]]\n\n#### Git工作区、暂存库和版本库\n\n- **工作区：** 电脑中的文件目录\n- **暂存区：** 英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\n- **版本库：** 工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。\n\nUser在工作区修改文件，通过`git add`添加到暂存区，再通过`git commit`添加到版本库，再通过`git push`添加到远程仓库\n\n**说明：**\n- workspace：工作区\n- staging area：暂存区/缓存区\n- local repository：版本库或本地仓库\n- remote repository：远程仓库\n\n| 命令         | 说明                                     |\n| ------------ | ---------------------------------------- |\n| `git add`    | 添加文件到暂存区                         |\n| `git status` | 查看仓库当前的状态，显示有变更的文件。   |\n| `git diff`   | 比较文件的不同，即暂存区和工作区的差异。 |\n| `git commit` | 提交暂存区到本地仓库。                   |\n| `git reset`  | 回退版本。                               |\n| `git rm`     | 将文件从暂存区和工作区中删除。           |\n| `git mv`     | 移动或重命名工作区文件。                 |\n| `git remote` | 远程仓库操作                             |\n| `git fetch`  | 从远程获取代码库                         |\n| `git pull`   | 下载远程代码并合并                       |\n| `git push`   | 上传远程代码并合并                       |\n\n### Git 分支管理\n创建分支命令：\n\n```\ngit branch (branchname)\n```\n\n切换分支命令:\n\n```\ngit checkout (branchname)\n```\n\n当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。\n合并分支命令:\n\n```\ngit merge\n```\n![[Pasted image 20230829225716.png]]\n\n合并后删除无用分支：\n\n```\ngit branch -d newtest\n```\n\n","slug":"Notes/Git/Git操作","published":1,"date":"2023-09-19T12:38:33.932Z","updated":"2023-09-19T13:32:26.398Z","_id":"clmqcu9p10015g8u52l7ncuf9","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.runoob.com/git/git-tutorial.html\">Git 教程 | 菜鸟教程</a></p>\n<h3 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。<br>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>\n<ul>\n<li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</li>\n<li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li>\n<li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li>\n</ul>\n<h3 id=\"Git创建仓库\"><a href=\"#Git创建仓库\" class=\"headerlink\" title=\"Git创建仓库\"></a>Git创建仓库</h3><h4 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h4><p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。</p>\n<p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。</p>\n<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">$ git <span class=\"hljs-built_in\">add</span> *.c<br>$ git <span class=\"hljs-built_in\">add</span> README<br>$ git commit -m <span class=\"hljs-string\">&#x27;初始化项目版本&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p>\n<h4 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h4><p>我们使用 <strong>git clone</strong> 从现有 Git 仓库中拷贝项目<br>克隆仓库的命令格式为：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt; <span class=\"hljs-tag\">&lt;directory&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>参数说明：</strong></p>\n<ul>\n<li><strong>repo:</strong> Git 仓库。</li>\n<li><strong>directory:</strong> 本地目录。</li>\n</ul>\n<h3 id=\"Git-基本操作\"><a href=\"#Git-基本操作\" class=\"headerlink\" title=\"Git 基本操作\"></a>Git 基本操作</h3><p>Git 常用的是以下 6 个命令：<strong>git clone</strong>、<strong>git push</strong>、<strong>git add</strong> 、<strong>git commit</strong>、<strong>git checkout</strong>、<strong>git pull</strong><br>![[Pasted image 20230829224733.png]]</p>\n<h4 id=\"Git工作区、暂存库和版本库\"><a href=\"#Git工作区、暂存库和版本库\" class=\"headerlink\" title=\"Git工作区、暂存库和版本库\"></a>Git工作区、暂存库和版本库</h4><ul>\n<li><strong>工作区：</strong> 电脑中的文件目录</li>\n<li><strong>暂存区：</strong> 英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。</li>\n<li><strong>版本库：</strong> 工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。</li>\n</ul>\n<p>User在工作区修改文件，通过<code>git add</code>添加到暂存区，再通过<code>git commit</code>添加到版本库，再通过<code>git push</code>添加到远程仓库</p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>workspace：工作区</li>\n<li>staging area：暂存区&#x2F;缓存区</li>\n<li>local repository：版本库或本地仓库</li>\n<li>remote repository：远程仓库</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>git add</code></td>\n<td>添加文件到暂存区</td>\n</tr>\n<tr>\n<td><code>git status</code></td>\n<td>查看仓库当前的状态，显示有变更的文件。</td>\n</tr>\n<tr>\n<td><code>git diff</code></td>\n<td>比较文件的不同，即暂存区和工作区的差异。</td>\n</tr>\n<tr>\n<td><code>git commit</code></td>\n<td>提交暂存区到本地仓库。</td>\n</tr>\n<tr>\n<td><code>git reset</code></td>\n<td>回退版本。</td>\n</tr>\n<tr>\n<td><code>git rm</code></td>\n<td>将文件从暂存区和工作区中删除。</td>\n</tr>\n<tr>\n<td><code>git mv</code></td>\n<td>移动或重命名工作区文件。</td>\n</tr>\n<tr>\n<td><code>git remote</code></td>\n<td>远程仓库操作</td>\n</tr>\n<tr>\n<td><code>git fetch</code></td>\n<td>从远程获取代码库</td>\n</tr>\n<tr>\n<td><code>git pull</code></td>\n<td>下载远程代码并合并</td>\n</tr>\n<tr>\n<td><code>git push</code></td>\n<td>上传远程代码并合并</td>\n</tr>\n</tbody></table>\n<h3 id=\"Git-分支管理\"><a href=\"#Git-分支管理\" class=\"headerlink\" title=\"Git 分支管理\"></a>Git 分支管理</h3><p>创建分支命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">git <span class=\"hljs-title function_\">branch</span> <span class=\"hljs-params\">(branchname)</span><br></code></pre></td></tr></table></figure>\n\n<p>切换分支命令:</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">git checkout <span class=\"hljs-comment\">(branchname)</span><br></code></pre></td></tr></table></figure>\n\n<p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。<br>合并分支命令:</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cos\">git <span class=\"hljs-keyword\">merge</span><br></code></pre></td></tr></table></figure>\n<p>![[Pasted image 20230829225716.png]]</p>\n<p>合并后删除无用分支：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">git branch -d newtest</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.runoob.com/git/git-tutorial.html\">Git 教程 | 菜鸟教程</a></p>\n<h3 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。<br>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>\n<ul>\n<li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</li>\n<li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li>\n<li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li>\n</ul>\n<h3 id=\"Git创建仓库\"><a href=\"#Git创建仓库\" class=\"headerlink\" title=\"Git创建仓库\"></a>Git创建仓库</h3><h4 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h4><p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。</p>\n<p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。</p>\n<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">$ git <span class=\"hljs-built_in\">add</span> *.c<br>$ git <span class=\"hljs-built_in\">add</span> README<br>$ git commit -m <span class=\"hljs-string\">&#x27;初始化项目版本&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p>\n<h4 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h4><p>我们使用 <strong>git clone</strong> 从现有 Git 仓库中拷贝项目<br>克隆仓库的命令格式为：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;repo</span>&gt; <span class=\"hljs-tag\">&lt;directory&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>参数说明：</strong></p>\n<ul>\n<li><strong>repo:</strong> Git 仓库。</li>\n<li><strong>directory:</strong> 本地目录。</li>\n</ul>\n<h3 id=\"Git-基本操作\"><a href=\"#Git-基本操作\" class=\"headerlink\" title=\"Git 基本操作\"></a>Git 基本操作</h3><p>Git 常用的是以下 6 个命令：<strong>git clone</strong>、<strong>git push</strong>、<strong>git add</strong> 、<strong>git commit</strong>、<strong>git checkout</strong>、<strong>git pull</strong><br>![[Pasted image 20230829224733.png]]</p>\n<h4 id=\"Git工作区、暂存库和版本库\"><a href=\"#Git工作区、暂存库和版本库\" class=\"headerlink\" title=\"Git工作区、暂存库和版本库\"></a>Git工作区、暂存库和版本库</h4><ul>\n<li><strong>工作区：</strong> 电脑中的文件目录</li>\n<li><strong>暂存区：</strong> 英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。</li>\n<li><strong>版本库：</strong> 工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。</li>\n</ul>\n<p>User在工作区修改文件，通过<code>git add</code>添加到暂存区，再通过<code>git commit</code>添加到版本库，再通过<code>git push</code>添加到远程仓库</p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>workspace：工作区</li>\n<li>staging area：暂存区&#x2F;缓存区</li>\n<li>local repository：版本库或本地仓库</li>\n<li>remote repository：远程仓库</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>git add</code></td>\n<td>添加文件到暂存区</td>\n</tr>\n<tr>\n<td><code>git status</code></td>\n<td>查看仓库当前的状态，显示有变更的文件。</td>\n</tr>\n<tr>\n<td><code>git diff</code></td>\n<td>比较文件的不同，即暂存区和工作区的差异。</td>\n</tr>\n<tr>\n<td><code>git commit</code></td>\n<td>提交暂存区到本地仓库。</td>\n</tr>\n<tr>\n<td><code>git reset</code></td>\n<td>回退版本。</td>\n</tr>\n<tr>\n<td><code>git rm</code></td>\n<td>将文件从暂存区和工作区中删除。</td>\n</tr>\n<tr>\n<td><code>git mv</code></td>\n<td>移动或重命名工作区文件。</td>\n</tr>\n<tr>\n<td><code>git remote</code></td>\n<td>远程仓库操作</td>\n</tr>\n<tr>\n<td><code>git fetch</code></td>\n<td>从远程获取代码库</td>\n</tr>\n<tr>\n<td><code>git pull</code></td>\n<td>下载远程代码并合并</td>\n</tr>\n<tr>\n<td><code>git push</code></td>\n<td>上传远程代码并合并</td>\n</tr>\n</tbody></table>\n<h3 id=\"Git-分支管理\"><a href=\"#Git-分支管理\" class=\"headerlink\" title=\"Git 分支管理\"></a>Git 分支管理</h3><p>创建分支命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">git <span class=\"hljs-title function_\">branch</span> <span class=\"hljs-params\">(branchname)</span><br></code></pre></td></tr></table></figure>\n\n<p>切换分支命令:</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">git checkout <span class=\"hljs-comment\">(branchname)</span><br></code></pre></td></tr></table></figure>\n\n<p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。<br>合并分支命令:</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cos\">git <span class=\"hljs-keyword\">merge</span><br></code></pre></td></tr></table></figure>\n<p>![[Pasted image 20230829225716.png]]</p>\n<p>合并后删除无用分支：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">git branch -d newtest</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"OBsidian Git使用","_content":"\n### Git使用\n第一次使用需要配置用户名和邮箱，这个数据是全局的，不需要重复配置\n```\ngit config --global user.name 用户名  # 配置用户名\ngit config --global user.email  # 配置邮箱\ngit config --global --list  # 检查是否配置成功\n```\n\n### 在Github上配置SSH key\n\n##### 原理\n\n>SSH登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在git中一般命名为id_rsa.pub, id_rsa。\n  本地生成一个密钥对，其中公钥放到远程主机，私钥保存在本地\n  当本地主机需要登录远程主机时，本地主机向远程主机发送一个登录请求，远程收到消息后，随机生成一个字符串并用公钥加密，发回给本地。本地拿到该字符串，用存放在本地的私钥进行解密，再次发送到远程，远程比对该解密后的字符串与源字符串是否等同，如果等同则认证成功。\n  **ssh key的配置是针对每台主机的**。\n  目的是在Github上实现免密登录\n\n**第一步：检查本地主机是否已经存在ssh key**\n\n```\ncd ~/.ssh \n   ls \n   //看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key\n```\n\n**第二步：如果不存在，生成ssh key**\n\n```\nssh-keygen -t rsa -C \"xxx@xxx.com\"\n//执行后一直回车即可\n```\n\n**第三步：获取ssh key公钥内容（id_rsa.pub）**\n\n```\ncd ~/.ssh\ncat id_rsa.pub\n```\n\n**第四步：在Github的Setting中添加key**\n**第五步：验证是否成功**\n\n```\nssh -T git@github.com\n```\n\n### 添加Github远程仓库：\n创建一个Github仓库用于存放笔记\n\n![[Pasted image 20230829165617.png]]\n\n### 配置本地 Obsidian 仓库\n\n```\ntouch README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin \"替换为上图中本条命令位置提示的远端地址（形如 git@gitee.com:user/repo.git）\"\ngit push -u origin main\n```\n\n然后Obsidian Git成功同步笔记：）\n","source":"_posts/Notes/Git/Obsidian Git初使用.md","raw":"---\ntitle: OBsidian Git使用\ncategories:\n  - Notes\n  - Git\n---\n\n### Git使用\n第一次使用需要配置用户名和邮箱，这个数据是全局的，不需要重复配置\n```\ngit config --global user.name 用户名  # 配置用户名\ngit config --global user.email  # 配置邮箱\ngit config --global --list  # 检查是否配置成功\n```\n\n### 在Github上配置SSH key\n\n##### 原理\n\n>SSH登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在git中一般命名为id_rsa.pub, id_rsa。\n  本地生成一个密钥对，其中公钥放到远程主机，私钥保存在本地\n  当本地主机需要登录远程主机时，本地主机向远程主机发送一个登录请求，远程收到消息后，随机生成一个字符串并用公钥加密，发回给本地。本地拿到该字符串，用存放在本地的私钥进行解密，再次发送到远程，远程比对该解密后的字符串与源字符串是否等同，如果等同则认证成功。\n  **ssh key的配置是针对每台主机的**。\n  目的是在Github上实现免密登录\n\n**第一步：检查本地主机是否已经存在ssh key**\n\n```\ncd ~/.ssh \n   ls \n   //看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key\n```\n\n**第二步：如果不存在，生成ssh key**\n\n```\nssh-keygen -t rsa -C \"xxx@xxx.com\"\n//执行后一直回车即可\n```\n\n**第三步：获取ssh key公钥内容（id_rsa.pub）**\n\n```\ncd ~/.ssh\ncat id_rsa.pub\n```\n\n**第四步：在Github的Setting中添加key**\n**第五步：验证是否成功**\n\n```\nssh -T git@github.com\n```\n\n### 添加Github远程仓库：\n创建一个Github仓库用于存放笔记\n\n![[Pasted image 20230829165617.png]]\n\n### 配置本地 Obsidian 仓库\n\n```\ntouch README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin \"替换为上图中本条命令位置提示的远端地址（形如 git@gitee.com:user/repo.git）\"\ngit push -u origin main\n```\n\n然后Obsidian Git成功同步笔记：）\n","slug":"Notes/Git/Obsidian Git初使用","published":1,"date":"2023-09-19T12:38:33.934Z","updated":"2023-09-19T13:32:26.398Z","_id":"clmqcu9p50017g8u5e7vz0kf3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h3><p>第一次使用需要配置用户名和邮箱，这个数据是全局的，不需要重复配置</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-built_in\">--global</span> <span class=\"hljs-string\">user</span>.<span class=\"hljs-string\">name</span> 用户名  <span class=\"hljs-comment\"># 配置用户名</span><br><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-built_in\">--global</span> <span class=\"hljs-string\">user</span>.<span class=\"hljs-string\">email</span>  <span class=\"hljs-comment\"># 配置邮箱</span><br><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-built_in\">--global</span> <span class=\"hljs-built_in\">--list</span>  <span class=\"hljs-comment\"># 检查是否配置成功</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"在Github上配置SSH-key\"><a href=\"#在Github上配置SSH-key\" class=\"headerlink\" title=\"在Github上配置SSH key\"></a>在Github上配置SSH key</h3><h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><blockquote>\n<p>SSH登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在git中一般命名为id_rsa.pub, id_rsa。<br>  本地生成一个密钥对，其中公钥放到远程主机，私钥保存在本地<br>  当本地主机需要登录远程主机时，本地主机向远程主机发送一个登录请求，远程收到消息后，随机生成一个字符串并用公钥加密，发回给本地。本地拿到该字符串，用存放在本地的私钥进行解密，再次发送到远程，远程比对该解密后的字符串与源字符串是否等同，如果等同则认证成功。<br>  <strong>ssh key的配置是针对每台主机的</strong>。<br>  目的是在Github上实现免密登录</p>\n</blockquote>\n<p><strong>第一步：检查本地主机是否已经存在ssh key</strong></p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-keyword\">cd</span> ~<span class=\"hljs-string\">/.ssh</span> <br>   <span class=\"hljs-keyword\">ls</span> <br>   <span class=\"hljs-string\">//</span>看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key<br></code></pre></td></tr></table></figure>\n\n<p><strong>第二步：如果不存在，生成ssh key</strong></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;xxx@xxx.com&quot;</span><br><span class=\"hljs-regexp\">//</span>执行后一直回车即可<br></code></pre></td></tr></table></figure>\n\n<p><strong>第三步：获取ssh key公钥内容（id_rsa.pub）</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> ~/.ssh<br><span class=\"hljs-built_in\">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure>\n\n<p><strong>第四步：在Github的Setting中添加key</strong><br><strong>第五步：验证是否成功</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ssh</span> -T git<span class=\"hljs-variable\">@github</span>.com<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"添加Github远程仓库：\"><a href=\"#添加Github远程仓库：\" class=\"headerlink\" title=\"添加Github远程仓库：\"></a>添加Github远程仓库：</h3><p>创建一个Github仓库用于存放笔记</p>\n<p>![[Pasted image 20230829165617.png]]</p>\n<h3 id=\"配置本地-Obsidian-仓库\"><a href=\"#配置本地-Obsidian-仓库\" class=\"headerlink\" title=\"配置本地 Obsidian 仓库\"></a>配置本地 Obsidian 仓库</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">touch README.md<br>git init<br>git <span class=\"hljs-keyword\">add </span>README.md<br>git commit -m <span class=\"hljs-string\">&quot;first commit&quot;</span><br>git <span class=\"hljs-keyword\">branch </span>-M main<br>git remote <span class=\"hljs-keyword\">add </span><span class=\"hljs-keyword\">origin </span><span class=\"hljs-string\">&quot;替换为上图中本条命令位置提示的远端地址（形如 git@gitee.com:user/repo.git）&quot;</span><br>git push -u <span class=\"hljs-keyword\">origin </span>main<br></code></pre></td></tr></table></figure>\n\n<p>然后Obsidian Git成功同步笔记：）</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h3><p>第一次使用需要配置用户名和邮箱，这个数据是全局的，不需要重复配置</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-built_in\">--global</span> <span class=\"hljs-string\">user</span>.<span class=\"hljs-string\">name</span> 用户名  <span class=\"hljs-comment\"># 配置用户名</span><br><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-built_in\">--global</span> <span class=\"hljs-string\">user</span>.<span class=\"hljs-string\">email</span>  <span class=\"hljs-comment\"># 配置邮箱</span><br><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-built_in\">--global</span> <span class=\"hljs-built_in\">--list</span>  <span class=\"hljs-comment\"># 检查是否配置成功</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"在Github上配置SSH-key\"><a href=\"#在Github上配置SSH-key\" class=\"headerlink\" title=\"在Github上配置SSH key\"></a>在Github上配置SSH key</h3><h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><blockquote>\n<p>SSH登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在git中一般命名为id_rsa.pub, id_rsa。<br>  本地生成一个密钥对，其中公钥放到远程主机，私钥保存在本地<br>  当本地主机需要登录远程主机时，本地主机向远程主机发送一个登录请求，远程收到消息后，随机生成一个字符串并用公钥加密，发回给本地。本地拿到该字符串，用存放在本地的私钥进行解密，再次发送到远程，远程比对该解密后的字符串与源字符串是否等同，如果等同则认证成功。<br>  <strong>ssh key的配置是针对每台主机的</strong>。<br>  目的是在Github上实现免密登录</p>\n</blockquote>\n<p><strong>第一步：检查本地主机是否已经存在ssh key</strong></p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-keyword\">cd</span> ~<span class=\"hljs-string\">/.ssh</span> <br>   <span class=\"hljs-keyword\">ls</span> <br>   <span class=\"hljs-string\">//</span>看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key<br></code></pre></td></tr></table></figure>\n\n<p><strong>第二步：如果不存在，生成ssh key</strong></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">ssh-keygen -t rsa -C <span class=\"hljs-string\">&quot;xxx@xxx.com&quot;</span><br><span class=\"hljs-regexp\">//</span>执行后一直回车即可<br></code></pre></td></tr></table></figure>\n\n<p><strong>第三步：获取ssh key公钥内容（id_rsa.pub）</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> ~/.ssh<br><span class=\"hljs-built_in\">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure>\n\n<p><strong>第四步：在Github的Setting中添加key</strong><br><strong>第五步：验证是否成功</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ssh</span> -T git<span class=\"hljs-variable\">@github</span>.com<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"添加Github远程仓库：\"><a href=\"#添加Github远程仓库：\" class=\"headerlink\" title=\"添加Github远程仓库：\"></a>添加Github远程仓库：</h3><p>创建一个Github仓库用于存放笔记</p>\n<p>![[Pasted image 20230829165617.png]]</p>\n<h3 id=\"配置本地-Obsidian-仓库\"><a href=\"#配置本地-Obsidian-仓库\" class=\"headerlink\" title=\"配置本地 Obsidian 仓库\"></a>配置本地 Obsidian 仓库</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">touch README.md<br>git init<br>git <span class=\"hljs-keyword\">add </span>README.md<br>git commit -m <span class=\"hljs-string\">&quot;first commit&quot;</span><br>git <span class=\"hljs-keyword\">branch </span>-M main<br>git remote <span class=\"hljs-keyword\">add </span><span class=\"hljs-keyword\">origin </span><span class=\"hljs-string\">&quot;替换为上图中本条命令位置提示的远端地址（形如 git@gitee.com:user/repo.git）&quot;</span><br>git push -u <span class=\"hljs-keyword\">origin </span>main<br></code></pre></td></tr></table></figure>\n\n<p>然后Obsidian Git成功同步笔记：）</p>\n"},{"title":"Git操作","_content":"## stable diffusion 模型画任意要求\n\n飞桨： [文生图[多loRA,ControlNet预处理,高清v2,视频生成]v11_副本](https://aistudio.baidu.com/projectdetail/6665563)\nkaggle：[免费部署stable diffusion，白嫖32G GPU - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/643442494)\n## ai 二维码美化\n\n飞桨：[AI艺术二维码生成器]([【创意应用】AI艺术二维码生成 - 飞桨AI Studio (baidu.com)](https://aistudio.baidu.com/projectdetail/6452331))\n\n\n\n---\n\n#### Stable Diffusion使用\n[GitHub - AUTOMATIC1111/stable-diffusion-webui: Stable Diffusion web UI](https://github.com/AUTOMATIC1111/stable-diffusion-webui)在Github上下载压缩包并按照说明安装\n![[Pasted image 20230913125854.png]]\n\n**添加模型：** 在[Civitai | Stable Diffusion models, embeddings, LoRAs and more](https://civitai.com/)上下载模型，添加到相应文件夹。\n- Checkpoint:基本模型，下载到webui\\\\models\\\\Stable-diffusion\n- Lora:微调模型，下载到webui\\\\models\\\\Lora\n- 其他（待补充）\n\n**插件下载：**\n- 中文汉化：[GitHub - VinsonLaro/stable-diffusion-webui-chinese: stable-diffusion-webui 的汉化扩展](https://github.com/VinsonLaro/stable-diffusion-webui-chinese)作者写了非常详细的下载和使用教程\n- controlnet：[GitHub - lllyasviel/ControlNet-v1-1-nightly: Nightly release of ControlNet 1.1](https://github.com/lllyasviel/ControlNet-v1-1-nightly)同上的下载方式\n**注意：** 下载时可能会因为网络问题下载失败，挂梯子多尝试几次。下载失败后需要到webui\\\\tmp中删除文件夹，否则无法再次下载。\n\n**Controlnet使用：** 下载controlnet插件后，按照[GitHub - Mikubill/sd-webui-controlnet: WebUI extension for ControlNet](https://github.com/Mikubill/sd-webui-controlnet)提供的地址下载controlnet模型（14个），放到webui\\\\extensions\\\\sd-webui-controlnet\\\\models目录下\n此时在WebUI中即可看到controlnet界面，有许多参数可选项可调\n可参考b站教程：[“牛逼”的教程来了！一次学会AI二维码+艺术字+光影光效+创意Logo生成，绝对是B站最详细的Stable Diffusion特效设计流程教学！AI绘画进阶应用\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1gX4y1J7ei/?spm_id_from=333.788.recommend_more_video.-1&vd_source=7d4ddbfe6a66f2fbe94075935b693c57)\n\n**模型配置方案：** \nSD提供了太多的模型组合，在此记录一下模型搭配及其效果\n\n**提示词：** \n一些通用的提示词可以提高图像质量，特定的提示词可以指定生成内容","source":"_posts/Notes/AI/AI绘画.md","raw":"---\ntitle: Git操作\ncategories:\n  - Notes\n  - AI\n---\n## stable diffusion 模型画任意要求\n\n飞桨： [文生图[多loRA,ControlNet预处理,高清v2,视频生成]v11_副本](https://aistudio.baidu.com/projectdetail/6665563)\nkaggle：[免费部署stable diffusion，白嫖32G GPU - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/643442494)\n## ai 二维码美化\n\n飞桨：[AI艺术二维码生成器]([【创意应用】AI艺术二维码生成 - 飞桨AI Studio (baidu.com)](https://aistudio.baidu.com/projectdetail/6452331))\n\n\n\n---\n\n#### Stable Diffusion使用\n[GitHub - AUTOMATIC1111/stable-diffusion-webui: Stable Diffusion web UI](https://github.com/AUTOMATIC1111/stable-diffusion-webui)在Github上下载压缩包并按照说明安装\n![[Pasted image 20230913125854.png]]\n\n**添加模型：** 在[Civitai | Stable Diffusion models, embeddings, LoRAs and more](https://civitai.com/)上下载模型，添加到相应文件夹。\n- Checkpoint:基本模型，下载到webui\\\\models\\\\Stable-diffusion\n- Lora:微调模型，下载到webui\\\\models\\\\Lora\n- 其他（待补充）\n\n**插件下载：**\n- 中文汉化：[GitHub - VinsonLaro/stable-diffusion-webui-chinese: stable-diffusion-webui 的汉化扩展](https://github.com/VinsonLaro/stable-diffusion-webui-chinese)作者写了非常详细的下载和使用教程\n- controlnet：[GitHub - lllyasviel/ControlNet-v1-1-nightly: Nightly release of ControlNet 1.1](https://github.com/lllyasviel/ControlNet-v1-1-nightly)同上的下载方式\n**注意：** 下载时可能会因为网络问题下载失败，挂梯子多尝试几次。下载失败后需要到webui\\\\tmp中删除文件夹，否则无法再次下载。\n\n**Controlnet使用：** 下载controlnet插件后，按照[GitHub - Mikubill/sd-webui-controlnet: WebUI extension for ControlNet](https://github.com/Mikubill/sd-webui-controlnet)提供的地址下载controlnet模型（14个），放到webui\\\\extensions\\\\sd-webui-controlnet\\\\models目录下\n此时在WebUI中即可看到controlnet界面，有许多参数可选项可调\n可参考b站教程：[“牛逼”的教程来了！一次学会AI二维码+艺术字+光影光效+创意Logo生成，绝对是B站最详细的Stable Diffusion特效设计流程教学！AI绘画进阶应用\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1gX4y1J7ei/?spm_id_from=333.788.recommend_more_video.-1&vd_source=7d4ddbfe6a66f2fbe94075935b693c57)\n\n**模型配置方案：** \nSD提供了太多的模型组合，在此记录一下模型搭配及其效果\n\n**提示词：** \n一些通用的提示词可以提高图像质量，特定的提示词可以指定生成内容","slug":"Notes/AI/AI绘画","published":1,"date":"2023-09-19T12:47:33.008Z","updated":"2023-09-19T13:32:26.398Z","_id":"clmqcu9p80019g8u59o9yebjy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"stable-diffusion-模型画任意要求\"><a href=\"#stable-diffusion-模型画任意要求\" class=\"headerlink\" title=\"stable diffusion 模型画任意要求\"></a>stable diffusion 模型画任意要求</h2><p>飞桨： <a href=\"https://aistudio.baidu.com/projectdetail/6665563\">文生图[多loRA,ControlNet预处理,高清v2,视频生成]v11_副本</a><br>kaggle：<a href=\"https://zhuanlan.zhihu.com/p/643442494\">免费部署stable diffusion，白嫖32G GPU - 知乎 (zhihu.com)</a></p>\n<h2 id=\"ai-二维码美化\"><a href=\"#ai-二维码美化\" class=\"headerlink\" title=\"ai 二维码美化\"></a>ai 二维码美化</h2><p>飞桨：[AI艺术二维码生成器](<a href=\"https://aistudio.baidu.com/projectdetail/6452331\">【创意应用】AI艺术二维码生成 - 飞桨AI Studio (baidu.com)</a>)</p>\n<hr>\n<h4 id=\"Stable-Diffusion使用\"><a href=\"#Stable-Diffusion使用\" class=\"headerlink\" title=\"Stable Diffusion使用\"></a>Stable Diffusion使用</h4><p><a href=\"https://github.com/AUTOMATIC1111/stable-diffusion-webui\">GitHub - AUTOMATIC1111&#x2F;stable-diffusion-webui: Stable Diffusion web UI</a>在Github上下载压缩包并按照说明安装<br>![[Pasted image 20230913125854.png]]</p>\n<p><strong>添加模型：</strong> 在<a href=\"https://civitai.com/\">Civitai | Stable Diffusion models, embeddings, LoRAs and more</a>上下载模型，添加到相应文件夹。</p>\n<ul>\n<li>Checkpoint:基本模型，下载到webui\\models\\Stable-diffusion</li>\n<li>Lora:微调模型，下载到webui\\models\\Lora</li>\n<li>其他（待补充）</li>\n</ul>\n<p><strong>插件下载：</strong></p>\n<ul>\n<li>中文汉化：<a href=\"https://github.com/VinsonLaro/stable-diffusion-webui-chinese\">GitHub - VinsonLaro&#x2F;stable-diffusion-webui-chinese: stable-diffusion-webui 的汉化扩展</a>作者写了非常详细的下载和使用教程</li>\n<li>controlnet：<a href=\"https://github.com/lllyasviel/ControlNet-v1-1-nightly\">GitHub - lllyasviel&#x2F;ControlNet-v1-1-nightly: Nightly release of ControlNet 1.1</a>同上的下载方式<br><strong>注意：</strong> 下载时可能会因为网络问题下载失败，挂梯子多尝试几次。下载失败后需要到webui\\tmp中删除文件夹，否则无法再次下载。</li>\n</ul>\n<p><strong>Controlnet使用：</strong> 下载controlnet插件后，按照<a href=\"https://github.com/Mikubill/sd-webui-controlnet\">GitHub - Mikubill&#x2F;sd-webui-controlnet: WebUI extension for ControlNet</a>提供的地址下载controlnet模型（14个），放到webui\\extensions\\sd-webui-controlnet\\models目录下<br>此时在WebUI中即可看到controlnet界面，有许多参数可选项可调<br>可参考b站教程：<a href=\"https://www.bilibili.com/video/BV1gX4y1J7ei/?spm_id_from=333.788.recommend_more_video.-1&vd_source=7d4ddbfe6a66f2fbe94075935b693c57\">“牛逼”的教程来了！一次学会AI二维码+艺术字+光影光效+创意Logo生成，绝对是B站最详细的Stable Diffusion特效设计流程教学！AI绘画进阶应用_哔哩哔哩_bilibili</a></p>\n<p><strong>模型配置方案：</strong><br>SD提供了太多的模型组合，在此记录一下模型搭配及其效果</p>\n<p><strong>提示词：</strong><br>一些通用的提示词可以提高图像质量，特定的提示词可以指定生成内容</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"stable-diffusion-模型画任意要求\"><a href=\"#stable-diffusion-模型画任意要求\" class=\"headerlink\" title=\"stable diffusion 模型画任意要求\"></a>stable diffusion 模型画任意要求</h2><p>飞桨： <a href=\"https://aistudio.baidu.com/projectdetail/6665563\">文生图[多loRA,ControlNet预处理,高清v2,视频生成]v11_副本</a><br>kaggle：<a href=\"https://zhuanlan.zhihu.com/p/643442494\">免费部署stable diffusion，白嫖32G GPU - 知乎 (zhihu.com)</a></p>\n<h2 id=\"ai-二维码美化\"><a href=\"#ai-二维码美化\" class=\"headerlink\" title=\"ai 二维码美化\"></a>ai 二维码美化</h2><p>飞桨：[AI艺术二维码生成器](<a href=\"https://aistudio.baidu.com/projectdetail/6452331\">【创意应用】AI艺术二维码生成 - 飞桨AI Studio (baidu.com)</a>)</p>\n<hr>\n<h4 id=\"Stable-Diffusion使用\"><a href=\"#Stable-Diffusion使用\" class=\"headerlink\" title=\"Stable Diffusion使用\"></a>Stable Diffusion使用</h4><p><a href=\"https://github.com/AUTOMATIC1111/stable-diffusion-webui\">GitHub - AUTOMATIC1111&#x2F;stable-diffusion-webui: Stable Diffusion web UI</a>在Github上下载压缩包并按照说明安装<br>![[Pasted image 20230913125854.png]]</p>\n<p><strong>添加模型：</strong> 在<a href=\"https://civitai.com/\">Civitai | Stable Diffusion models, embeddings, LoRAs and more</a>上下载模型，添加到相应文件夹。</p>\n<ul>\n<li>Checkpoint:基本模型，下载到webui\\models\\Stable-diffusion</li>\n<li>Lora:微调模型，下载到webui\\models\\Lora</li>\n<li>其他（待补充）</li>\n</ul>\n<p><strong>插件下载：</strong></p>\n<ul>\n<li>中文汉化：<a href=\"https://github.com/VinsonLaro/stable-diffusion-webui-chinese\">GitHub - VinsonLaro&#x2F;stable-diffusion-webui-chinese: stable-diffusion-webui 的汉化扩展</a>作者写了非常详细的下载和使用教程</li>\n<li>controlnet：<a href=\"https://github.com/lllyasviel/ControlNet-v1-1-nightly\">GitHub - lllyasviel&#x2F;ControlNet-v1-1-nightly: Nightly release of ControlNet 1.1</a>同上的下载方式<br><strong>注意：</strong> 下载时可能会因为网络问题下载失败，挂梯子多尝试几次。下载失败后需要到webui\\tmp中删除文件夹，否则无法再次下载。</li>\n</ul>\n<p><strong>Controlnet使用：</strong> 下载controlnet插件后，按照<a href=\"https://github.com/Mikubill/sd-webui-controlnet\">GitHub - Mikubill&#x2F;sd-webui-controlnet: WebUI extension for ControlNet</a>提供的地址下载controlnet模型（14个），放到webui\\extensions\\sd-webui-controlnet\\models目录下<br>此时在WebUI中即可看到controlnet界面，有许多参数可选项可调<br>可参考b站教程：<a href=\"https://www.bilibili.com/video/BV1gX4y1J7ei/?spm_id_from=333.788.recommend_more_video.-1&vd_source=7d4ddbfe6a66f2fbe94075935b693c57\">“牛逼”的教程来了！一次学会AI二维码+艺术字+光影光效+创意Logo生成，绝对是B站最详细的Stable Diffusion特效设计流程教学！AI绘画进阶应用_哔哩哔哩_bilibili</a></p>\n<p><strong>模型配置方案：</strong><br>SD提供了太多的模型组合，在此记录一下模型搭配及其效果</p>\n<p><strong>提示词：</strong><br>一些通用的提示词可以提高图像质量，特定的提示词可以指定生成内容</p>\n"},{"title":"Shell编程","_content":"打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell）\n`#!` 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell\n保存为 test.sh，并 cd 到相应目录\n\n```\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n```\n\n","source":"_posts/Notes/Linux学习/Shell编程.md","raw":"---\ntitle: Shell编程\ncategories:\n  - Notes\n  - Linux学习\n---\n打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell）\n`#!` 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell\n保存为 test.sh，并 cd 到相应目录\n\n```\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n```\n\n","slug":"Notes/Linux学习/Shell编程","published":1,"date":"2023-09-19T12:47:32.971Z","updated":"2023-09-19T13:32:26.398Z","_id":"clmqcu9p9001bg8u55stdbf8h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>打开文本编辑器(可以使用 vi&#x2F;vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell）<br><code>#!</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell<br>保存为 test.sh，并 cd 到相应目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">chmod</span> +x ./test.sh  <span class=\"hljs-comment\">#使脚本具有执行权限</span><br>./test.sh  <span class=\"hljs-comment\">#执行脚本</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>打开文本编辑器(可以使用 vi&#x2F;vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell）<br><code>#!</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell<br>保存为 test.sh，并 cd 到相应目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">chmod</span> +x ./test.sh  <span class=\"hljs-comment\">#使脚本具有执行权限</span><br>./test.sh  <span class=\"hljs-comment\">#执行脚本</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"WSL配置","_content":"\nWSL(Windows Subsystem for Linux)，Windows自带的Linux子系统\n\n## TODO \n- [ ] 输入bash没反应，暂未解决，也无法稳定复现，尝试在关闭终端时使用`wsl --shutdown`关闭wsl\n\n#### 安装过程及问题\n在Windows中开启该功能然后重启\n\n![[Pasted image 20230912234005.png]]\n\n> 可能出现以下问题\n> ![[Pasted image 20230912234523.png]]\n> 造成该问题的原因是WSL版本由原来的WSL1升级到WSL2后，内核没有升级，前往[微软WSL官网](https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel)下载安装适用于 x64 计算机的最新 WSL2 Linux 内核更新包即可。\n\n#### 迁移到D盘\n\n```text\n# 查看已经安装的虚拟机\nwsl -l -v\n# 关闭所有正在运行的虚拟机\nwsl --shutdown\n# 虚拟机文件导出\nwsl --export 虚拟机名称 保存路径\nwsl --export Ubuntu D:\\\\wsl-Ubuntu.tar\n# 注销原虚拟机\nwsl --unregister Ubuntu\n# 导入虚拟机文件\nwsl --import 虚拟机名称 目标路径 虚拟机文件路径 --version 2\nwsl --import Ubuntu D:\\\\WSL2\\\\Ubuntu D:\\\\wsl-Ubuntu.tar --version 2\n# 最后可以选择删除掉虚拟机文件，因为他已经没用了\n```\n\n**更改默认用户：**\n- 在powershell中输入`ubuntu.exe config --default-user 用户名`来将root用户改为普通用户\n- 输入`ubuntu config --default-user root`将普通用户改为默认用户，可以在忘记root密码时使用\n\n#### 配置python库环境\n在miniconda官网中找到下载命令，下载miniconda\n然后新建环境，在环境中下载相关依赖包\n#### Pycharm中使用WSL\n在Pycharm中添加解释器\n![[Pasted image 20230912235338.png]]\n选择WSL，选择配置好的环境\n\n#### 其他\nWSL中/mnt文件里是Windows文件的映射\n![[Pasted image 20230912235011.png]]\n\n在想转到Windows某目录下时需要cd到其映射后的目录\n","source":"_posts/Notes/Linux学习/WSL配置.md","raw":"---\ntitle: WSL配置\ncategories:\n  - Notes\n  - Linux学习\n---\n\nWSL(Windows Subsystem for Linux)，Windows自带的Linux子系统\n\n## TODO \n- [ ] 输入bash没反应，暂未解决，也无法稳定复现，尝试在关闭终端时使用`wsl --shutdown`关闭wsl\n\n#### 安装过程及问题\n在Windows中开启该功能然后重启\n\n![[Pasted image 20230912234005.png]]\n\n> 可能出现以下问题\n> ![[Pasted image 20230912234523.png]]\n> 造成该问题的原因是WSL版本由原来的WSL1升级到WSL2后，内核没有升级，前往[微软WSL官网](https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel)下载安装适用于 x64 计算机的最新 WSL2 Linux 内核更新包即可。\n\n#### 迁移到D盘\n\n```text\n# 查看已经安装的虚拟机\nwsl -l -v\n# 关闭所有正在运行的虚拟机\nwsl --shutdown\n# 虚拟机文件导出\nwsl --export 虚拟机名称 保存路径\nwsl --export Ubuntu D:\\\\wsl-Ubuntu.tar\n# 注销原虚拟机\nwsl --unregister Ubuntu\n# 导入虚拟机文件\nwsl --import 虚拟机名称 目标路径 虚拟机文件路径 --version 2\nwsl --import Ubuntu D:\\\\WSL2\\\\Ubuntu D:\\\\wsl-Ubuntu.tar --version 2\n# 最后可以选择删除掉虚拟机文件，因为他已经没用了\n```\n\n**更改默认用户：**\n- 在powershell中输入`ubuntu.exe config --default-user 用户名`来将root用户改为普通用户\n- 输入`ubuntu config --default-user root`将普通用户改为默认用户，可以在忘记root密码时使用\n\n#### 配置python库环境\n在miniconda官网中找到下载命令，下载miniconda\n然后新建环境，在环境中下载相关依赖包\n#### Pycharm中使用WSL\n在Pycharm中添加解释器\n![[Pasted image 20230912235338.png]]\n选择WSL，选择配置好的环境\n\n#### 其他\nWSL中/mnt文件里是Windows文件的映射\n![[Pasted image 20230912235011.png]]\n\n在想转到Windows某目录下时需要cd到其映射后的目录\n","slug":"Notes/Linux学习/WSL配置","published":1,"date":"2023-09-19T12:47:32.973Z","updated":"2023-09-19T13:32:26.398Z","_id":"clmqcu9pa001dg8u597l512ye","comments":1,"layout":"post","photos":[],"link":"","content":"<p>WSL(Windows Subsystem for Linux)，Windows自带的Linux子系统</p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 输入bash没反应，暂未解决，也无法稳定复现，尝试在关闭终端时使用<code>wsl --shutdown</code>关闭wsl</li>\n</ul>\n<h4 id=\"安装过程及问题\"><a href=\"#安装过程及问题\" class=\"headerlink\" title=\"安装过程及问题\"></a>安装过程及问题</h4><p>在Windows中开启该功能然后重启</p>\n<p>![[Pasted image 20230912234005.png]]</p>\n<blockquote>\n<p>可能出现以下问题<br>![[Pasted image 20230912234523.png]]<br>造成该问题的原因是WSL版本由原来的WSL1升级到WSL2后，内核没有升级，前往<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel\">微软WSL官网</a>下载安装适用于 x64 计算机的最新 WSL2 Linux 内核更新包即可。</p>\n</blockquote>\n<h4 id=\"迁移到D盘\"><a href=\"#迁移到D盘\" class=\"headerlink\" title=\"迁移到D盘\"></a>迁移到D盘</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\"># 查看已经安装的虚拟机<br>wsl -l -v<br># 关闭所有正在运行的虚拟机<br>wsl --shutdown<br># 虚拟机文件导出<br>wsl --export 虚拟机名称 保存路径<br>wsl --export Ubuntu D:\\\\wsl-Ubuntu.tar<br># 注销原虚拟机<br>wsl --unregister Ubuntu<br># 导入虚拟机文件<br>wsl --import 虚拟机名称 目标路径 虚拟机文件路径 --version 2<br>wsl --import Ubuntu D:\\\\WSL2\\\\Ubuntu D:\\\\wsl-Ubuntu.tar --version 2<br># 最后可以选择删除掉虚拟机文件，因为他已经没用了<br></code></pre></td></tr></table></figure>\n\n<p><strong>更改默认用户：</strong></p>\n<ul>\n<li>在powershell中输入<code>ubuntu.exe config --default-user 用户名</code>来将root用户改为普通用户</li>\n<li>输入<code>ubuntu config --default-user root</code>将普通用户改为默认用户，可以在忘记root密码时使用</li>\n</ul>\n<h4 id=\"配置python库环境\"><a href=\"#配置python库环境\" class=\"headerlink\" title=\"配置python库环境\"></a>配置python库环境</h4><p>在miniconda官网中找到下载命令，下载miniconda<br>然后新建环境，在环境中下载相关依赖包</p>\n<h4 id=\"Pycharm中使用WSL\"><a href=\"#Pycharm中使用WSL\" class=\"headerlink\" title=\"Pycharm中使用WSL\"></a>Pycharm中使用WSL</h4><p>在Pycharm中添加解释器<br>![[Pasted image 20230912235338.png]]<br>选择WSL，选择配置好的环境</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>WSL中&#x2F;mnt文件里是Windows文件的映射<br>![[Pasted image 20230912235011.png]]</p>\n<p>在想转到Windows某目录下时需要cd到其映射后的目录</p>\n","site":{"data":{}},"excerpt":"","more":"<p>WSL(Windows Subsystem for Linux)，Windows自带的Linux子系统</p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 输入bash没反应，暂未解决，也无法稳定复现，尝试在关闭终端时使用<code>wsl --shutdown</code>关闭wsl</li>\n</ul>\n<h4 id=\"安装过程及问题\"><a href=\"#安装过程及问题\" class=\"headerlink\" title=\"安装过程及问题\"></a>安装过程及问题</h4><p>在Windows中开启该功能然后重启</p>\n<p>![[Pasted image 20230912234005.png]]</p>\n<blockquote>\n<p>可能出现以下问题<br>![[Pasted image 20230912234523.png]]<br>造成该问题的原因是WSL版本由原来的WSL1升级到WSL2后，内核没有升级，前往<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel\">微软WSL官网</a>下载安装适用于 x64 计算机的最新 WSL2 Linux 内核更新包即可。</p>\n</blockquote>\n<h4 id=\"迁移到D盘\"><a href=\"#迁移到D盘\" class=\"headerlink\" title=\"迁移到D盘\"></a>迁移到D盘</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\"># 查看已经安装的虚拟机<br>wsl -l -v<br># 关闭所有正在运行的虚拟机<br>wsl --shutdown<br># 虚拟机文件导出<br>wsl --export 虚拟机名称 保存路径<br>wsl --export Ubuntu D:\\\\wsl-Ubuntu.tar<br># 注销原虚拟机<br>wsl --unregister Ubuntu<br># 导入虚拟机文件<br>wsl --import 虚拟机名称 目标路径 虚拟机文件路径 --version 2<br>wsl --import Ubuntu D:\\\\WSL2\\\\Ubuntu D:\\\\wsl-Ubuntu.tar --version 2<br># 最后可以选择删除掉虚拟机文件，因为他已经没用了<br></code></pre></td></tr></table></figure>\n\n<p><strong>更改默认用户：</strong></p>\n<ul>\n<li>在powershell中输入<code>ubuntu.exe config --default-user 用户名</code>来将root用户改为普通用户</li>\n<li>输入<code>ubuntu config --default-user root</code>将普通用户改为默认用户，可以在忘记root密码时使用</li>\n</ul>\n<h4 id=\"配置python库环境\"><a href=\"#配置python库环境\" class=\"headerlink\" title=\"配置python库环境\"></a>配置python库环境</h4><p>在miniconda官网中找到下载命令，下载miniconda<br>然后新建环境，在环境中下载相关依赖包</p>\n<h4 id=\"Pycharm中使用WSL\"><a href=\"#Pycharm中使用WSL\" class=\"headerlink\" title=\"Pycharm中使用WSL\"></a>Pycharm中使用WSL</h4><p>在Pycharm中添加解释器<br>![[Pasted image 20230912235338.png]]<br>选择WSL，选择配置好的环境</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>WSL中&#x2F;mnt文件里是Windows文件的映射<br>![[Pasted image 20230912235011.png]]</p>\n<p>在想转到Windows某目录下时需要cd到其映射后的目录</p>\n"},{"title":"文本编辑器","_content":"## Nano\n### 打开文件：\n在终端直接输入\n> nano 文件名 \n> 如：nano test\n\n如果当前目录不存在该文件，则会创建并打开\n\n### 写入文件\n直接在光标处输入\n\n### 保存文件\nCtrl+X退出，然后输入Y保存，新文件需要确认文件名，输入N则不保存直接退出\n\n\n---\n\n## Vim\n[精通 VIM ，此文就够了 - 知乎](https://zhuanlan.zhihu.com/p/68111471)\n[Linux vi/vim | 菜鸟教程](https://www.runoob.com/linux/linux-vim.html)\n\n基本上 vi/vim 共分为三种模式，**命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）**。\n\n![[Pasted image 20230907160359.png]]\n### 输入模式 \n**像在文本文档中打字一样输入**\n\n在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。\n\n在输入模式中，可以使用以下按键：\n- **字符按键以及Shift组合**，输入字符\n- **ENTER**，回车键，换行\n- **BACK SPACE**，退格键，删除光标前一个字符\n- **DEL**，删除键，删除光标后一个字符\n- **方向键**，在文本中移动光标\n- **HOME**/**END**，移动光标到行首/行尾\n- **Page Up**/**Page Down**，上/下翻页\n- **Insert**，切换光标为输入/替换模式，光标将变成竖线/下划线\n- **ESC**，退出输入模式，切换到命令模式\n\n### 命令模式（一般模式）\n**用户刚刚启动 vi/vim，便进入了命令模式。**\n\n此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。\n\n以下是普通模式常用的几个命令：\n\n- i -- 切换到输入模式，在光标当前位置开始输入文本。\n- x -- 删除当前光标所在处的字符。\n- : -- 切换到底线命令模式，以在最底一行输入命令。\n- a -- 进入插入模式，在光标下一个位置开始输入文本。\n- o：在当前行的下方插入一个新行，并进入插入模式。\n- O -- 在当前行的上方插入一个新行，并进入插入模式。\n- dd -- 删除当前行。\n- yy -- 复制当前行。\n- p -- 粘贴剪贴板内容到光标下方。\n- P -- 粘贴剪贴板内容到光标上方。\n- u -- 撤销上一次操作。\n- Ctrl + r -- 重做上一次撤销的操作。\n- :w -- 保存文件。\n- :q -- 退出 Vim 编辑器。\n- :q! -- 强制退出Vim 编辑器，不保存修改。\n\n若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 i 切换到输入模式即可。\n\n命令模式只有一些最基本的命令，因此仍要依靠**底线命令行模式**输入更多命令。\n\n### 底线命令模式（命令行模式）\n在命令模式下按下 :（英文冒号）就进入了底线命令模式。\n\n底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n\n在底线命令模式中，基本的命令有（已经省略了冒号）：\n\n- `:w`：保存文件。\n- `:q`：退出 Vim 编辑器。\n- `:wq`：保存文件并退出 Vim 编辑器。\n- `:q!`：强制退出Vim编辑器，不保存修改。\n\n按 ESC 键可随时退出底线命令模式。\n\n| 移动光标的方法     |                      |\n| ------------------ | -------------------- |\n| h 或 向左箭头键(←) | 光标向左移动一个字符 |\n| j 或 向下箭头键(↓) | 光标向下移动一个字符 |\n| k 或 向上箭头键(↑) | 光标向上移动一个字符 |\n| l 或 向右箭头键(→) | 光标向右移动一个字符 |\n\n| 搜索替换                                   |                                                                                                                                                                                                                                                 |     |\n| ------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --- |\n| /word                                      | 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)                                                                                                                                        |     |\n| ?word                                      | 向光标之上寻找一个字符串名称为 word 的字符串。                                                                                                                                                                                                  |     |\n| n                                          | 这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！ |     |\n| N                                          | 这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。                                                                                                                             |     |\n| :n1,n2s/word1/word2/g                      | n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：  <br>『:100,200s/vbird/VBIRD/g』。(常用)                                                    |     |\n| :1,$s/word1/word2/g 或 :%s/word1/word2/g   | 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)                                                                                                                                                                          |     |\n| :1,$s/word1/word2/gc 或 :%s/word1/word2/gc | 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)                                                                                                                 |     |\n\n\n| vim 环境的变更 |                                                    |     |\n| -------------- | -------------------------------------------------- | --- |\n| :set nu        | 显示行号，设定之后，会在每一行的前缀显示该行的行号 |     |\n| :set nonu      | 与 set nu 相反，为取消行号！                       |     |","source":"_posts/Notes/Linux学习/文本编辑器.md","raw":"---\ntitle: 文本编辑器\ncategories:\n  - Notes\n  - Linux学习\n---\n## Nano\n### 打开文件：\n在终端直接输入\n> nano 文件名 \n> 如：nano test\n\n如果当前目录不存在该文件，则会创建并打开\n\n### 写入文件\n直接在光标处输入\n\n### 保存文件\nCtrl+X退出，然后输入Y保存，新文件需要确认文件名，输入N则不保存直接退出\n\n\n---\n\n## Vim\n[精通 VIM ，此文就够了 - 知乎](https://zhuanlan.zhihu.com/p/68111471)\n[Linux vi/vim | 菜鸟教程](https://www.runoob.com/linux/linux-vim.html)\n\n基本上 vi/vim 共分为三种模式，**命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）**。\n\n![[Pasted image 20230907160359.png]]\n### 输入模式 \n**像在文本文档中打字一样输入**\n\n在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。\n\n在输入模式中，可以使用以下按键：\n- **字符按键以及Shift组合**，输入字符\n- **ENTER**，回车键，换行\n- **BACK SPACE**，退格键，删除光标前一个字符\n- **DEL**，删除键，删除光标后一个字符\n- **方向键**，在文本中移动光标\n- **HOME**/**END**，移动光标到行首/行尾\n- **Page Up**/**Page Down**，上/下翻页\n- **Insert**，切换光标为输入/替换模式，光标将变成竖线/下划线\n- **ESC**，退出输入模式，切换到命令模式\n\n### 命令模式（一般模式）\n**用户刚刚启动 vi/vim，便进入了命令模式。**\n\n此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。\n\n以下是普通模式常用的几个命令：\n\n- i -- 切换到输入模式，在光标当前位置开始输入文本。\n- x -- 删除当前光标所在处的字符。\n- : -- 切换到底线命令模式，以在最底一行输入命令。\n- a -- 进入插入模式，在光标下一个位置开始输入文本。\n- o：在当前行的下方插入一个新行，并进入插入模式。\n- O -- 在当前行的上方插入一个新行，并进入插入模式。\n- dd -- 删除当前行。\n- yy -- 复制当前行。\n- p -- 粘贴剪贴板内容到光标下方。\n- P -- 粘贴剪贴板内容到光标上方。\n- u -- 撤销上一次操作。\n- Ctrl + r -- 重做上一次撤销的操作。\n- :w -- 保存文件。\n- :q -- 退出 Vim 编辑器。\n- :q! -- 强制退出Vim 编辑器，不保存修改。\n\n若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 i 切换到输入模式即可。\n\n命令模式只有一些最基本的命令，因此仍要依靠**底线命令行模式**输入更多命令。\n\n### 底线命令模式（命令行模式）\n在命令模式下按下 :（英文冒号）就进入了底线命令模式。\n\n底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n\n在底线命令模式中，基本的命令有（已经省略了冒号）：\n\n- `:w`：保存文件。\n- `:q`：退出 Vim 编辑器。\n- `:wq`：保存文件并退出 Vim 编辑器。\n- `:q!`：强制退出Vim编辑器，不保存修改。\n\n按 ESC 键可随时退出底线命令模式。\n\n| 移动光标的方法     |                      |\n| ------------------ | -------------------- |\n| h 或 向左箭头键(←) | 光标向左移动一个字符 |\n| j 或 向下箭头键(↓) | 光标向下移动一个字符 |\n| k 或 向上箭头键(↑) | 光标向上移动一个字符 |\n| l 或 向右箭头键(→) | 光标向右移动一个字符 |\n\n| 搜索替换                                   |                                                                                                                                                                                                                                                 |     |\n| ------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --- |\n| /word                                      | 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)                                                                                                                                        |     |\n| ?word                                      | 向光标之上寻找一个字符串名称为 word 的字符串。                                                                                                                                                                                                  |     |\n| n                                          | 这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！ |     |\n| N                                          | 这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。                                                                                                                             |     |\n| :n1,n2s/word1/word2/g                      | n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：  <br>『:100,200s/vbird/VBIRD/g』。(常用)                                                    |     |\n| :1,$s/word1/word2/g 或 :%s/word1/word2/g   | 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)                                                                                                                                                                          |     |\n| :1,$s/word1/word2/gc 或 :%s/word1/word2/gc | 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)                                                                                                                 |     |\n\n\n| vim 环境的变更 |                                                    |     |\n| -------------- | -------------------------------------------------- | --- |\n| :set nu        | 显示行号，设定之后，会在每一行的前缀显示该行的行号 |     |\n| :set nonu      | 与 set nu 相反，为取消行号！                       |     |","slug":"Notes/Linux学习/文本编辑器","published":1,"date":"2023-09-19T12:47:32.976Z","updated":"2023-09-19T13:32:26.398Z","_id":"clmqcu9pb001eg8u5gjdsc926","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Nano\"><a href=\"#Nano\" class=\"headerlink\" title=\"Nano\"></a>Nano</h2><h3 id=\"打开文件：\"><a href=\"#打开文件：\" class=\"headerlink\" title=\"打开文件：\"></a>打开文件：</h3><p>在终端直接输入</p>\n<blockquote>\n<p>nano 文件名<br>如：nano test</p>\n</blockquote>\n<p>如果当前目录不存在该文件，则会创建并打开</p>\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><p>直接在光标处输入</p>\n<h3 id=\"保存文件\"><a href=\"#保存文件\" class=\"headerlink\" title=\"保存文件\"></a>保存文件</h3><p>Ctrl+X退出，然后输入Y保存，新文件需要确认文件名，输入N则不保存直接退出</p>\n<hr>\n<h2 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h2><p><a href=\"https://zhuanlan.zhihu.com/p/68111471\">精通 VIM ，此文就够了 - 知乎</a><br><a href=\"https://www.runoob.com/linux/linux-vim.html\">Linux vi&#x2F;vim | 菜鸟教程</a></p>\n<p>基本上 vi&#x2F;vim 共分为三种模式，<strong>命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</strong>。</p>\n<p>![[Pasted image 20230907160359.png]]</p>\n<h3 id=\"输入模式\"><a href=\"#输入模式\" class=\"headerlink\" title=\"输入模式\"></a>输入模式</h3><p><strong>像在文本文档中打字一样输入</strong></p>\n<p>在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。</p>\n<p>在输入模式中，可以使用以下按键：</p>\n<ul>\n<li><strong>字符按键以及Shift组合</strong>，输入字符</li>\n<li><strong>ENTER</strong>，回车键，换行</li>\n<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>\n<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>\n<li><strong>方向键</strong>，在文本中移动光标</li>\n<li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li>\n<li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li>\n<li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li>\n<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>\n</ul>\n<h3 id=\"命令模式（一般模式）\"><a href=\"#命令模式（一般模式）\" class=\"headerlink\" title=\"命令模式（一般模式）\"></a>命令模式（一般模式）</h3><p><strong>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</strong></p>\n<p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p>\n<p>以下是普通模式常用的几个命令：</p>\n<ul>\n<li>i – 切换到输入模式，在光标当前位置开始输入文本。</li>\n<li>x – 删除当前光标所在处的字符。</li>\n<li>: – 切换到底线命令模式，以在最底一行输入命令。</li>\n<li>a – 进入插入模式，在光标下一个位置开始输入文本。</li>\n<li>o：在当前行的下方插入一个新行，并进入插入模式。</li>\n<li>O – 在当前行的上方插入一个新行，并进入插入模式。</li>\n<li>dd – 删除当前行。</li>\n<li>yy – 复制当前行。</li>\n<li>p – 粘贴剪贴板内容到光标下方。</li>\n<li>P – 粘贴剪贴板内容到光标上方。</li>\n<li>u – 撤销上一次操作。</li>\n<li>Ctrl + r – 重做上一次撤销的操作。</li>\n<li>:w – 保存文件。</li>\n<li>:q – 退出 Vim 编辑器。</li>\n<li>:q! – 强制退出Vim 编辑器，不保存修改。</li>\n</ul>\n<p>若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 i 切换到输入模式即可。</p>\n<p>命令模式只有一些最基本的命令，因此仍要依靠<strong>底线命令行模式</strong>输入更多命令。</p>\n<h3 id=\"底线命令模式（命令行模式）\"><a href=\"#底线命令模式（命令行模式）\" class=\"headerlink\" title=\"底线命令模式（命令行模式）\"></a>底线命令模式（命令行模式）</h3><p>在命令模式下按下 :（英文冒号）就进入了底线命令模式。</p>\n<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>\n<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<ul>\n<li><code>:w</code>：保存文件。</li>\n<li><code>:q</code>：退出 Vim 编辑器。</li>\n<li><code>:wq</code>：保存文件并退出 Vim 编辑器。</li>\n<li><code>:q!</code>：强制退出Vim编辑器，不保存修改。</li>\n</ul>\n<p>按 ESC 键可随时退出底线命令模式。</p>\n<table>\n<thead>\n<tr>\n<th>移动光标的方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>h 或 向左箭头键(←)</td>\n<td>光标向左移动一个字符</td>\n</tr>\n<tr>\n<td>j 或 向下箭头键(↓)</td>\n<td>光标向下移动一个字符</td>\n</tr>\n<tr>\n<td>k 或 向上箭头键(↑)</td>\n<td>光标向上移动一个字符</td>\n</tr>\n<tr>\n<td>l 或 向右箭头键(→)</td>\n<td>光标向右移动一个字符</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>搜索替换</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;word</td>\n<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td>\n<td></td>\n</tr>\n<tr>\n<td>?word</td>\n<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>\n<td></td>\n</tr>\n<tr>\n<td>n</td>\n<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>\n<td></td>\n</tr>\n<tr>\n<td>N</td>\n<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>\n<td></td>\n</tr>\n<tr>\n<td>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td>\n<td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：  <br>『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td>\n<td></td>\n</tr>\n<tr>\n<td>:1,$s&#x2F;word1&#x2F;word2&#x2F;g 或 :%s&#x2F;word1&#x2F;word2&#x2F;g</td>\n<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td>\n<td></td>\n</tr>\n<tr>\n<td>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc 或 :%s&#x2F;word1&#x2F;word2&#x2F;gc</td>\n<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>vim 环境的变更</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>:set nu</td>\n<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>\n<td></td>\n</tr>\n<tr>\n<td>:set nonu</td>\n<td>与 set nu 相反，为取消行号！</td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Nano\"><a href=\"#Nano\" class=\"headerlink\" title=\"Nano\"></a>Nano</h2><h3 id=\"打开文件：\"><a href=\"#打开文件：\" class=\"headerlink\" title=\"打开文件：\"></a>打开文件：</h3><p>在终端直接输入</p>\n<blockquote>\n<p>nano 文件名<br>如：nano test</p>\n</blockquote>\n<p>如果当前目录不存在该文件，则会创建并打开</p>\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><p>直接在光标处输入</p>\n<h3 id=\"保存文件\"><a href=\"#保存文件\" class=\"headerlink\" title=\"保存文件\"></a>保存文件</h3><p>Ctrl+X退出，然后输入Y保存，新文件需要确认文件名，输入N则不保存直接退出</p>\n<hr>\n<h2 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h2><p><a href=\"https://zhuanlan.zhihu.com/p/68111471\">精通 VIM ，此文就够了 - 知乎</a><br><a href=\"https://www.runoob.com/linux/linux-vim.html\">Linux vi&#x2F;vim | 菜鸟教程</a></p>\n<p>基本上 vi&#x2F;vim 共分为三种模式，<strong>命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</strong>。</p>\n<p>![[Pasted image 20230907160359.png]]</p>\n<h3 id=\"输入模式\"><a href=\"#输入模式\" class=\"headerlink\" title=\"输入模式\"></a>输入模式</h3><p><strong>像在文本文档中打字一样输入</strong></p>\n<p>在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。</p>\n<p>在输入模式中，可以使用以下按键：</p>\n<ul>\n<li><strong>字符按键以及Shift组合</strong>，输入字符</li>\n<li><strong>ENTER</strong>，回车键，换行</li>\n<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>\n<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>\n<li><strong>方向键</strong>，在文本中移动光标</li>\n<li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li>\n<li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li>\n<li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li>\n<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>\n</ul>\n<h3 id=\"命令模式（一般模式）\"><a href=\"#命令模式（一般模式）\" class=\"headerlink\" title=\"命令模式（一般模式）\"></a>命令模式（一般模式）</h3><p><strong>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</strong></p>\n<p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p>\n<p>以下是普通模式常用的几个命令：</p>\n<ul>\n<li>i – 切换到输入模式，在光标当前位置开始输入文本。</li>\n<li>x – 删除当前光标所在处的字符。</li>\n<li>: – 切换到底线命令模式，以在最底一行输入命令。</li>\n<li>a – 进入插入模式，在光标下一个位置开始输入文本。</li>\n<li>o：在当前行的下方插入一个新行，并进入插入模式。</li>\n<li>O – 在当前行的上方插入一个新行，并进入插入模式。</li>\n<li>dd – 删除当前行。</li>\n<li>yy – 复制当前行。</li>\n<li>p – 粘贴剪贴板内容到光标下方。</li>\n<li>P – 粘贴剪贴板内容到光标上方。</li>\n<li>u – 撤销上一次操作。</li>\n<li>Ctrl + r – 重做上一次撤销的操作。</li>\n<li>:w – 保存文件。</li>\n<li>:q – 退出 Vim 编辑器。</li>\n<li>:q! – 强制退出Vim 编辑器，不保存修改。</li>\n</ul>\n<p>若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 i 切换到输入模式即可。</p>\n<p>命令模式只有一些最基本的命令，因此仍要依靠<strong>底线命令行模式</strong>输入更多命令。</p>\n<h3 id=\"底线命令模式（命令行模式）\"><a href=\"#底线命令模式（命令行模式）\" class=\"headerlink\" title=\"底线命令模式（命令行模式）\"></a>底线命令模式（命令行模式）</h3><p>在命令模式下按下 :（英文冒号）就进入了底线命令模式。</p>\n<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>\n<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<ul>\n<li><code>:w</code>：保存文件。</li>\n<li><code>:q</code>：退出 Vim 编辑器。</li>\n<li><code>:wq</code>：保存文件并退出 Vim 编辑器。</li>\n<li><code>:q!</code>：强制退出Vim编辑器，不保存修改。</li>\n</ul>\n<p>按 ESC 键可随时退出底线命令模式。</p>\n<table>\n<thead>\n<tr>\n<th>移动光标的方法</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>h 或 向左箭头键(←)</td>\n<td>光标向左移动一个字符</td>\n</tr>\n<tr>\n<td>j 或 向下箭头键(↓)</td>\n<td>光标向下移动一个字符</td>\n</tr>\n<tr>\n<td>k 或 向上箭头键(↑)</td>\n<td>光标向上移动一个字符</td>\n</tr>\n<tr>\n<td>l 或 向右箭头键(→)</td>\n<td>光标向右移动一个字符</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>搜索替换</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;word</td>\n<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td>\n<td></td>\n</tr>\n<tr>\n<td>?word</td>\n<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>\n<td></td>\n</tr>\n<tr>\n<td>n</td>\n<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>\n<td></td>\n</tr>\n<tr>\n<td>N</td>\n<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>\n<td></td>\n</tr>\n<tr>\n<td>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td>\n<td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：  <br>『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td>\n<td></td>\n</tr>\n<tr>\n<td>:1,$s&#x2F;word1&#x2F;word2&#x2F;g 或 :%s&#x2F;word1&#x2F;word2&#x2F;g</td>\n<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td>\n<td></td>\n</tr>\n<tr>\n<td>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc 或 :%s&#x2F;word1&#x2F;word2&#x2F;gc</td>\n<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>vim 环境的变更</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>:set nu</td>\n<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>\n<td></td>\n</tr>\n<tr>\n<td>:set nonu</td>\n<td>与 set nu 相反，为取消行号！</td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"基本命令","_content":"命令的一般语法：命令 [-选项] [参数列表]\n\nls：列出当前目录下所有文件和文件夹\n\tls -a：显示所有文件夹（隐藏文件夹）\n\tls -l：显示文件属性\n\tls -la：结合前两个\nhelp：查看内建命令的作用及使用方法\n\t\t\t外部命令：命令 --help\ntype：查看指定命令是否为内建指令\nman：查阅操作手册（manual）\n","source":"_posts/Notes/Linux学习/基本命令.md","raw":"---\ntitle: 基本命令\ncategories:\n  - Notes\n  - Linux学习\n---\n命令的一般语法：命令 [-选项] [参数列表]\n\nls：列出当前目录下所有文件和文件夹\n\tls -a：显示所有文件夹（隐藏文件夹）\n\tls -l：显示文件属性\n\tls -la：结合前两个\nhelp：查看内建命令的作用及使用方法\n\t\t\t外部命令：命令 --help\ntype：查看指定命令是否为内建指令\nman：查阅操作手册（manual）\n","slug":"Notes/Linux学习/基本命令","published":1,"date":"2023-09-19T12:47:32.974Z","updated":"2023-09-19T13:32:26.398Z","_id":"clmqcu9pb001fg8u53x2h2lso","comments":1,"layout":"post","photos":[],"link":"","content":"<p>命令的一般语法：命令 [-选项] [参数列表]</p>\n<p>ls：列出当前目录下所有文件和文件夹<br>    ls -a：显示所有文件夹（隐藏文件夹）<br>    ls -l：显示文件属性<br>    ls -la：结合前两个<br>help：查看内建命令的作用及使用方法<br>            外部命令：命令 –help<br>type：查看指定命令是否为内建指令<br>man：查阅操作手册（manual）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>命令的一般语法：命令 [-选项] [参数列表]</p>\n<p>ls：列出当前目录下所有文件和文件夹<br>    ls -a：显示所有文件夹（隐藏文件夹）<br>    ls -l：显示文件属性<br>    ls -la：结合前两个<br>help：查看内建命令的作用及使用方法<br>            外部命令：命令 –help<br>type：查看指定命令是否为内建指令<br>man：查阅操作手册（manual）</p>\n"},{"title":"文件系统","_content":"### 目录与路径\n\n| 符号  | 含义         |\n| ----- | ------------ |\n| /     | 根目录       |\n| /bin  | 可执行文件   |\n| /home | 用户的主目录 |\n\n**特殊目录符号：**\n\n| 目录         |                        释义| \n| ------------ | ---------------------- |\n| .            | 代表当前目录           |\n| ..           | 代表上层目录           |\n| -            | 代表上一个工作目录     |\n| ~            | 代表当前用户的主目录   |\n| ~accountname | 代表该name账户的主目录 |\n\n### PATH环境变量\n当前工作目录下的命令和程序可以直接在bash中执行，其他目录下的命令和程序无法执行。而PATH中的目录下的命令和程序可以在任何目录下执行。当执行命令时，会先在当前目录中寻找，如果存在即执行命令，如果不存在，则会在PATH中寻找并执行第一个相匹配的命令。\n```\n# 显示环境变量中的内容，每个路径用：隔开\necho $PATH      # $与PATH间没有空格\n\n# 添加路径到PATH环境变量\nexport PATH=命令行路径:$PATH\n```\n\n### 目录管理\n\n**显示当前工作目录：**\n\n```\n# pwd显示当前工作目录（print working directory）\npwd\n\n# 用help查看pwd命令的帮助信息\nhelp pwd\n```\n\n**查看目录与文件：**\n\n```\n# -l查看文件属性\nls -l\n\n# -h以方便阅读的单位显示文件尺寸\nls -lh\n\n# -S按照文件大小降序排列\nls -lS\n\n# -R可以递归地显示所有路径\nls -R\n```\n\n**常用目录操作：**\n\n```\n# 新建目录\nmkdir 文件名\n\n# 用-p创建多级目录\nmkdir -p 路径\n\n# 复制目录\ncp -r 源路径 目标路径\n\n# 移动目录\nmv 源路径 目标路径\n\n# 删除目录，加-r递归删除目录中的内容\nrm -r 路径\n```\n\n### 文件管理\n\n#### 文件类型：\n**普通文件类型**：\nLinux中最多的一种文件类型, 包括 纯文本文件(ASCII)；二进制文件(binary)；数据格式的文件(data);各种压缩文件.第一个属性为 [-]\n**目录文件**：\n就是目录， 能用 # cd 命令进入的。第一个属性为 [d]，例如 [drwxrwxrwx]\n**块设备文件**：\n块设备文件 ： 就是存储数据以供系统存取的接口设备，简单而言就是硬盘。例如一号硬盘的代码是 /dev/hda1等文件。第一个属性为 [b]\n**字符设备**：\n字符设备文件：即串行端口的接口设备，例如键盘、鼠标等等。第一个属性为 [c]\n**套接字文件**：\n这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。第一个属性为 [s]，最常在 /var/run目录中看到这种文件类型\n**管道文件**：\nFIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out(先进先出)的缩写。第一个属性为 [p]\n**链接文件**：\n类似Windows下面的快捷方式。第一个属性为 [l]，例如 [lrwxrwxrwx]\n\n#### 管道\n\n管道是一系列将标准输入输出连接起来的进程\n\n**匿名管道：** 用符号“|”表示，用来连接多个命令，将前一个命令的输出导入第二个命令作为输入\n```\n# 查看ls中包含某个关键词的文件\nls -l | grep 关键词\n```\n\n**命名管道：**\n```\n# 用mkfifo命令创建命名管道（FIFO）\nmkfifo 管道文件名\n```\n\n#### 新建文件\n\n- touch：文件存在时，修改文件访问时间为当前时间，否则创建该文件\n- 用文本编辑器创建文件\n- 重定向方式创建文件：1）“>”操作符：覆盖源文件中已有内容  2）“>>”操作符：将新内容追加到源文件内容的后面\n\n| 命令            | 说明                                               |\n| --------------- | -------------------------------------------------- |\n| command > file  | 将输出重定向到 file。                              |\n| command < file  | 将输入重定向到 file。                              |\n| command >> file | 将输出以追加的方式重定向到 file。                  |\n| n > file        | 将文件描述符为 n 的文件重定向到 file。             |\n| n >> file       | 将文件描述符为 n 的文件以追加的方式重定向到 file。 |\n| n >& m          | 将输出文件 m 和 n 合并。                           |\n| n <& m          | 将输入文件 m 和 n 合并。                           |\n| << tag          | 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 |\n\n#### 复制、移动、删除文件\n\n```\n# 使用cp命令复制文件\ncp 文件名 新文件名\n\n# 用cp命令创建快捷方式（符号链接）\ncp -s 文件名 快捷方式名\n\n# 使用cp命令-p选项复制文件的完整属性\ncp -p 文件名 新文件名\n\n# 使用mv命令移动文件\nmv 文件名 指定路径\n\n# 使用mv命令-i选项移动文件时会提示是否覆盖\nmv -i 文件名 指定路径\n\n# 使用 mv命令-b选项移动文件时会自动备份重名文件之后直接移动\nmv -b 文件名 指定路径  # 备份\n\n```\n\n#### 搜索文件\n```\n# 使用which命令搜索PATH环境变量中包含的命令的具体路径\nwhich ls\n\n# 使用locate命令查找文件路径，会显示含该关键词的所有文件\nlocate 关键词\n\n# locate -c输出查找到的文件的个数\nlocate -c 关键词\n\n# locate -l输出查找到的前n个文档\nlocate -l n 关键词\n\n# find查找最近三天修改过的文件\nfind ~ -mtime -3\n\n# find查找某路径下属于某用户的所有文件\nfind 路径 -user 用户名\n\n# 根据文件名查找文件路径\nfind -name 文件名 # 需要输入完整文件名\n\n# 查找当前目录下所有管道类型文件\nfind -type p\n```\n\n#### 显示文件内容\n```\n# cat拼接两个文件\ncat 第一个文件 第二个文件 > 输出的文件  # 用重定向输出到指定文件，默认是输出到终端\n\n# 当cat一个文件时，则会输出文件内容\n cat 文件名\n \n# cat -n显示文件行号\ncat -n 文件名\n\n# more命令\nmore 文件名\n\n# head命令\nhead -n 5 文件名  # 输出文件前5行\nmore -c 100 文件名  # 输出文件前100个字符\n\n# tail命令\ntail -n 5 文件名  # 输出后5行\ntail -c +115 文件名  # 输出115行至最后\n\n# less命令\nless 文件名\n\n# grep命令可以实现关键词匹配\ngrep \"关键词\" 文件名\n```\n\n#### 文件压缩与备份\n```\n# 使用gzip进行文件压缩\ngzip 文件名\n\n# gzip -c：将压缩的内容输出到屏幕上，源文件不变，可以通过重定向处理输出的内容\n\n# 使用gzip解压缩\ngzip -d 文件名\n\n# bzip2 同gzip\n\n# tar命令可以将多个文件合并为一个压缩包\n-c:新建打包文件\n-t：查看打包文件中包含哪些文件\n-x：解包文件包\n-j：通过bzip2的支持进行压缩/解压缩\n-z：通过gzip的支持进行压缩/解压缩\n-C：指定解包目标路径\n-p：打包过程中保留源文件的属性和权限\n-v：输出打包过程中正在处理的文件名\n```\n","source":"_posts/Notes/Linux学习/文件系统.md","raw":"---\ntitle: 文件系统\ncategories:\n  - Notes\n  - Linux学习\n---\n### 目录与路径\n\n| 符号  | 含义         |\n| ----- | ------------ |\n| /     | 根目录       |\n| /bin  | 可执行文件   |\n| /home | 用户的主目录 |\n\n**特殊目录符号：**\n\n| 目录         |                        释义| \n| ------------ | ---------------------- |\n| .            | 代表当前目录           |\n| ..           | 代表上层目录           |\n| -            | 代表上一个工作目录     |\n| ~            | 代表当前用户的主目录   |\n| ~accountname | 代表该name账户的主目录 |\n\n### PATH环境变量\n当前工作目录下的命令和程序可以直接在bash中执行，其他目录下的命令和程序无法执行。而PATH中的目录下的命令和程序可以在任何目录下执行。当执行命令时，会先在当前目录中寻找，如果存在即执行命令，如果不存在，则会在PATH中寻找并执行第一个相匹配的命令。\n```\n# 显示环境变量中的内容，每个路径用：隔开\necho $PATH      # $与PATH间没有空格\n\n# 添加路径到PATH环境变量\nexport PATH=命令行路径:$PATH\n```\n\n### 目录管理\n\n**显示当前工作目录：**\n\n```\n# pwd显示当前工作目录（print working directory）\npwd\n\n# 用help查看pwd命令的帮助信息\nhelp pwd\n```\n\n**查看目录与文件：**\n\n```\n# -l查看文件属性\nls -l\n\n# -h以方便阅读的单位显示文件尺寸\nls -lh\n\n# -S按照文件大小降序排列\nls -lS\n\n# -R可以递归地显示所有路径\nls -R\n```\n\n**常用目录操作：**\n\n```\n# 新建目录\nmkdir 文件名\n\n# 用-p创建多级目录\nmkdir -p 路径\n\n# 复制目录\ncp -r 源路径 目标路径\n\n# 移动目录\nmv 源路径 目标路径\n\n# 删除目录，加-r递归删除目录中的内容\nrm -r 路径\n```\n\n### 文件管理\n\n#### 文件类型：\n**普通文件类型**：\nLinux中最多的一种文件类型, 包括 纯文本文件(ASCII)；二进制文件(binary)；数据格式的文件(data);各种压缩文件.第一个属性为 [-]\n**目录文件**：\n就是目录， 能用 # cd 命令进入的。第一个属性为 [d]，例如 [drwxrwxrwx]\n**块设备文件**：\n块设备文件 ： 就是存储数据以供系统存取的接口设备，简单而言就是硬盘。例如一号硬盘的代码是 /dev/hda1等文件。第一个属性为 [b]\n**字符设备**：\n字符设备文件：即串行端口的接口设备，例如键盘、鼠标等等。第一个属性为 [c]\n**套接字文件**：\n这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。第一个属性为 [s]，最常在 /var/run目录中看到这种文件类型\n**管道文件**：\nFIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out(先进先出)的缩写。第一个属性为 [p]\n**链接文件**：\n类似Windows下面的快捷方式。第一个属性为 [l]，例如 [lrwxrwxrwx]\n\n#### 管道\n\n管道是一系列将标准输入输出连接起来的进程\n\n**匿名管道：** 用符号“|”表示，用来连接多个命令，将前一个命令的输出导入第二个命令作为输入\n```\n# 查看ls中包含某个关键词的文件\nls -l | grep 关键词\n```\n\n**命名管道：**\n```\n# 用mkfifo命令创建命名管道（FIFO）\nmkfifo 管道文件名\n```\n\n#### 新建文件\n\n- touch：文件存在时，修改文件访问时间为当前时间，否则创建该文件\n- 用文本编辑器创建文件\n- 重定向方式创建文件：1）“>”操作符：覆盖源文件中已有内容  2）“>>”操作符：将新内容追加到源文件内容的后面\n\n| 命令            | 说明                                               |\n| --------------- | -------------------------------------------------- |\n| command > file  | 将输出重定向到 file。                              |\n| command < file  | 将输入重定向到 file。                              |\n| command >> file | 将输出以追加的方式重定向到 file。                  |\n| n > file        | 将文件描述符为 n 的文件重定向到 file。             |\n| n >> file       | 将文件描述符为 n 的文件以追加的方式重定向到 file。 |\n| n >& m          | 将输出文件 m 和 n 合并。                           |\n| n <& m          | 将输入文件 m 和 n 合并。                           |\n| << tag          | 将开始标记 tag 和结束标记 tag 之间的内容作为输入。 |\n\n#### 复制、移动、删除文件\n\n```\n# 使用cp命令复制文件\ncp 文件名 新文件名\n\n# 用cp命令创建快捷方式（符号链接）\ncp -s 文件名 快捷方式名\n\n# 使用cp命令-p选项复制文件的完整属性\ncp -p 文件名 新文件名\n\n# 使用mv命令移动文件\nmv 文件名 指定路径\n\n# 使用mv命令-i选项移动文件时会提示是否覆盖\nmv -i 文件名 指定路径\n\n# 使用 mv命令-b选项移动文件时会自动备份重名文件之后直接移动\nmv -b 文件名 指定路径  # 备份\n\n```\n\n#### 搜索文件\n```\n# 使用which命令搜索PATH环境变量中包含的命令的具体路径\nwhich ls\n\n# 使用locate命令查找文件路径，会显示含该关键词的所有文件\nlocate 关键词\n\n# locate -c输出查找到的文件的个数\nlocate -c 关键词\n\n# locate -l输出查找到的前n个文档\nlocate -l n 关键词\n\n# find查找最近三天修改过的文件\nfind ~ -mtime -3\n\n# find查找某路径下属于某用户的所有文件\nfind 路径 -user 用户名\n\n# 根据文件名查找文件路径\nfind -name 文件名 # 需要输入完整文件名\n\n# 查找当前目录下所有管道类型文件\nfind -type p\n```\n\n#### 显示文件内容\n```\n# cat拼接两个文件\ncat 第一个文件 第二个文件 > 输出的文件  # 用重定向输出到指定文件，默认是输出到终端\n\n# 当cat一个文件时，则会输出文件内容\n cat 文件名\n \n# cat -n显示文件行号\ncat -n 文件名\n\n# more命令\nmore 文件名\n\n# head命令\nhead -n 5 文件名  # 输出文件前5行\nmore -c 100 文件名  # 输出文件前100个字符\n\n# tail命令\ntail -n 5 文件名  # 输出后5行\ntail -c +115 文件名  # 输出115行至最后\n\n# less命令\nless 文件名\n\n# grep命令可以实现关键词匹配\ngrep \"关键词\" 文件名\n```\n\n#### 文件压缩与备份\n```\n# 使用gzip进行文件压缩\ngzip 文件名\n\n# gzip -c：将压缩的内容输出到屏幕上，源文件不变，可以通过重定向处理输出的内容\n\n# 使用gzip解压缩\ngzip -d 文件名\n\n# bzip2 同gzip\n\n# tar命令可以将多个文件合并为一个压缩包\n-c:新建打包文件\n-t：查看打包文件中包含哪些文件\n-x：解包文件包\n-j：通过bzip2的支持进行压缩/解压缩\n-z：通过gzip的支持进行压缩/解压缩\n-C：指定解包目标路径\n-p：打包过程中保留源文件的属性和权限\n-v：输出打包过程中正在处理的文件名\n```\n","slug":"Notes/Linux学习/文件系统","published":1,"date":"2023-09-19T12:47:32.975Z","updated":"2023-09-19T13:32:26.398Z","_id":"clmqcu9pd001jg8u54rxzbmx9","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"目录与路径\"><a href=\"#目录与路径\" class=\"headerlink\" title=\"目录与路径\"></a>目录与路径</h3><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;</td>\n<td>根目录</td>\n</tr>\n<tr>\n<td>&#x2F;bin</td>\n<td>可执行文件</td>\n</tr>\n<tr>\n<td>&#x2F;home</td>\n<td>用户的主目录</td>\n</tr>\n</tbody></table>\n<p><strong>特殊目录符号：</strong></p>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>代表当前目录</td>\n</tr>\n<tr>\n<td>..</td>\n<td>代表上层目录</td>\n</tr>\n<tr>\n<td>-</td>\n<td>代表上一个工作目录</td>\n</tr>\n<tr>\n<td>~</td>\n<td>代表当前用户的主目录</td>\n</tr>\n<tr>\n<td>~accountname</td>\n<td>代表该name账户的主目录</td>\n</tr>\n</tbody></table>\n<h3 id=\"PATH环境变量\"><a href=\"#PATH环境变量\" class=\"headerlink\" title=\"PATH环境变量\"></a>PATH环境变量</h3><p>当前工作目录下的命令和程序可以直接在bash中执行，其他目录下的命令和程序无法执行。而PATH中的目录下的命令和程序可以在任何目录下执行。当执行命令时，会先在当前目录中寻找，如果存在即执行命令，如果不存在，则会在PATH中寻找并执行第一个相匹配的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 显示环境变量中的内容，每个路径用：隔开</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$PATH</span>      <span class=\"hljs-comment\"># $与PATH间没有空格</span><br><br><span class=\"hljs-comment\"># 添加路径到PATH环境变量</span><br><span class=\"hljs-built_in\">export</span> PATH=命令行路径:<span class=\"hljs-variable\">$PATH</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"目录管理\"><a href=\"#目录管理\" class=\"headerlink\" title=\"目录管理\"></a>目录管理</h3><p><strong>显示当前工作目录：</strong></p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mel\"># <span class=\"hljs-keyword\">pwd</span>显示当前工作目录（<span class=\"hljs-keyword\">print</span> working directory）<br><span class=\"hljs-keyword\">pwd</span><br><br># 用<span class=\"hljs-keyword\">help</span>查看<span class=\"hljs-keyword\">pwd</span>命令的帮助信息<br><span class=\"hljs-keyword\">help</span> <span class=\"hljs-keyword\">pwd</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>查看目录与文件：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># -l查看文件属性</span><br><span class=\"hljs-built_in\">ls</span> -l<br><br><span class=\"hljs-comment\"># -h以方便阅读的单位显示文件尺寸</span><br><span class=\"hljs-built_in\">ls</span> -lh<br><br><span class=\"hljs-comment\"># -S按照文件大小降序排列</span><br><span class=\"hljs-built_in\">ls</span> -lS<br><br><span class=\"hljs-comment\"># -R可以递归地显示所有路径</span><br><span class=\"hljs-built_in\">ls</span> -R<br></code></pre></td></tr></table></figure>\n\n<p><strong>常用目录操作：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 新建目录</span><br><span class=\"hljs-built_in\">mkdir</span> 文件名<br><br><span class=\"hljs-comment\"># 用-p创建多级目录</span><br><span class=\"hljs-built_in\">mkdir</span> -p 路径<br><br><span class=\"hljs-comment\"># 复制目录</span><br><span class=\"hljs-built_in\">cp</span> -r 源路径 目标路径<br><br><span class=\"hljs-comment\"># 移动目录</span><br><span class=\"hljs-built_in\">mv</span> 源路径 目标路径<br><br><span class=\"hljs-comment\"># 删除目录，加-r递归删除目录中的内容</span><br><span class=\"hljs-built_in\">rm</span> -r 路径<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h3><h4 id=\"文件类型：\"><a href=\"#文件类型：\" class=\"headerlink\" title=\"文件类型：\"></a>文件类型：</h4><p><strong>普通文件类型</strong>：<br>Linux中最多的一种文件类型, 包括 纯文本文件(ASCII)；二进制文件(binary)；数据格式的文件(data);各种压缩文件.第一个属性为 [-]<br><strong>目录文件</strong>：<br>就是目录， 能用 # cd 命令进入的。第一个属性为 [d]，例如 [drwxrwxrwx]<br><strong>块设备文件</strong>：<br>块设备文件 ： 就是存储数据以供系统存取的接口设备，简单而言就是硬盘。例如一号硬盘的代码是 &#x2F;dev&#x2F;hda1等文件。第一个属性为 [b]<br><strong>字符设备</strong>：<br>字符设备文件：即串行端口的接口设备，例如键盘、鼠标等等。第一个属性为 [c]<br><strong>套接字文件</strong>：<br>这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。第一个属性为 [s]，最常在 &#x2F;var&#x2F;run目录中看到这种文件类型<br><strong>管道文件</strong>：<br>FIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out(先进先出)的缩写。第一个属性为 [p]<br><strong>链接文件</strong>：<br>类似Windows下面的快捷方式。第一个属性为 [l]，例如 [lrwxrwxrwx]</p>\n<h4 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h4><p>管道是一系列将标准输入输出连接起来的进程</p>\n<p><strong>匿名管道：</strong> 用符号“|”表示，用来连接多个命令，将前一个命令的输出导入第二个命令作为输入</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"># 查看<span class=\"hljs-keyword\">ls</span>中包含某个关键词的文件<br><span class=\"hljs-keyword\">ls</span> -<span class=\"hljs-keyword\">l</span> | <span class=\"hljs-keyword\">grep</span> 关键词<br></code></pre></td></tr></table></figure>\n\n<p><strong>命名管道：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 用mkfifo命令创建命名管道（FIFO）</span><br><span class=\"hljs-built_in\">mkfifo</span> 管道文件名<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h4><ul>\n<li>touch：文件存在时，修改文件访问时间为当前时间，否则创建该文件</li>\n<li>用文本编辑器创建文件</li>\n<li>重定向方式创建文件：1）“&gt;”操作符：覆盖源文件中已有内容  2）“&gt;&gt;”操作符：将新内容追加到源文件内容的后面</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>command &gt; file</td>\n<td>将输出重定向到 file。</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>将输入重定向到 file。</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table>\n<h4 id=\"复制、移动、删除文件\"><a href=\"#复制、移动、删除文件\" class=\"headerlink\" title=\"复制、移动、删除文件\"></a>复制、移动、删除文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 使用cp命令复制文件</span><br><span class=\"hljs-built_in\">cp</span> 文件名 新文件名<br><br><span class=\"hljs-comment\"># 用cp命令创建快捷方式（符号链接）</span><br><span class=\"hljs-built_in\">cp</span> -s 文件名 快捷方式名<br><br><span class=\"hljs-comment\"># 使用cp命令-p选项复制文件的完整属性</span><br><span class=\"hljs-built_in\">cp</span> -p 文件名 新文件名<br><br><span class=\"hljs-comment\"># 使用mv命令移动文件</span><br><span class=\"hljs-built_in\">mv</span> 文件名 指定路径<br><br><span class=\"hljs-comment\"># 使用mv命令-i选项移动文件时会提示是否覆盖</span><br><span class=\"hljs-built_in\">mv</span> -i 文件名 指定路径<br><br><span class=\"hljs-comment\"># 使用 mv命令-b选项移动文件时会自动备份重名文件之后直接移动</span><br><span class=\"hljs-built_in\">mv</span> -b 文件名 指定路径  <span class=\"hljs-comment\"># 备份</span><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"搜索文件\"><a href=\"#搜索文件\" class=\"headerlink\" title=\"搜索文件\"></a>搜索文件</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 使用which命令搜索PATH环境变量中包含的命令的具体路径</span><br>which ls<br><br><span class=\"hljs-comment\"># 使用locate命令查找文件路径，会显示含该关键词的所有文件</span><br>locate 关键词<br><br><span class=\"hljs-comment\"># locate -c输出查找到的文件的个数</span><br>locate -c 关键词<br><br><span class=\"hljs-comment\"># locate -l输出查找到的前n个文档</span><br>locate -l n 关键词<br><br><span class=\"hljs-comment\"># find查找最近三天修改过的文件</span><br><span class=\"hljs-built_in\">find</span> ~ -mtime -3<br><br><span class=\"hljs-comment\"># find查找某路径下属于某用户的所有文件</span><br><span class=\"hljs-built_in\">find</span> 路径 -user 用户名<br><br><span class=\"hljs-comment\"># 根据文件名查找文件路径</span><br><span class=\"hljs-built_in\">find</span> -name 文件名 # 需要输入完整文件名<br><br><span class=\"hljs-comment\"># 查找当前目录下所有管道类型文件</span><br><span class=\"hljs-built_in\">find</span> -type p<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"显示文件内容\"><a href=\"#显示文件内容\" class=\"headerlink\" title=\"显示文件内容\"></a>显示文件内容</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># cat拼接两个文件</span><br><span class=\"hljs-built_in\">cat</span> 第一个文件 第二个文件 &gt; 输出的文件  <span class=\"hljs-comment\"># 用重定向输出到指定文件，默认是输出到终端</span><br><br><span class=\"hljs-comment\"># 当cat一个文件时，则会输出文件内容</span><br> <span class=\"hljs-built_in\">cat</span> 文件名<br> <br><span class=\"hljs-comment\"># cat -n显示文件行号</span><br><span class=\"hljs-built_in\">cat</span> -n 文件名<br><br><span class=\"hljs-comment\"># more命令</span><br>more 文件名<br><br><span class=\"hljs-comment\"># head命令</span><br><span class=\"hljs-built_in\">head</span> -n 5 文件名  <span class=\"hljs-comment\"># 输出文件前5行</span><br>more -c 100 文件名  <span class=\"hljs-comment\"># 输出文件前100个字符</span><br><br><span class=\"hljs-comment\"># tail命令</span><br><span class=\"hljs-built_in\">tail</span> -n 5 文件名  <span class=\"hljs-comment\"># 输出后5行</span><br><span class=\"hljs-built_in\">tail</span> -c +115 文件名  <span class=\"hljs-comment\"># 输出115行至最后</span><br><br><span class=\"hljs-comment\"># less命令</span><br>less 文件名<br><br><span class=\"hljs-comment\"># grep命令可以实现关键词匹配</span><br>grep <span class=\"hljs-string\">&quot;关键词&quot;</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"文件压缩与备份\"><a href=\"#文件压缩与备份\" class=\"headerlink\" title=\"文件压缩与备份\"></a>文件压缩与备份</h4><figure class=\"highlight ldif\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ldif\"><span class=\"hljs-comment\"># 使用gzip进行文件压缩</span><br>gzip 文件名<br><br><span class=\"hljs-comment\"># gzip -c：将压缩的内容输出到屏幕上，源文件不变，可以通过重定向处理输出的内容</span><br><br><span class=\"hljs-comment\"># 使用gzip解压缩</span><br>gzip -d 文件名<br><br><span class=\"hljs-comment\"># bzip2 同gzip</span><br><br><span class=\"hljs-comment\"># tar命令可以将多个文件合并为一个压缩包</span><br><span class=\"hljs-literal\">-</span>c:新建打包文件<br><span class=\"hljs-literal\">-</span>t：查看打包文件中包含哪些文件<br><span class=\"hljs-literal\">-</span>x：解包文件包<br><span class=\"hljs-literal\">-</span>j：通过bzip2的支持进行压缩/解压缩<br><span class=\"hljs-literal\">-</span>z：通过gzip的支持进行压缩/解压缩<br><span class=\"hljs-literal\">-</span>C：指定解包目标路径<br><span class=\"hljs-literal\">-</span>p：打包过程中保留源文件的属性和权限<br><span class=\"hljs-literal\">-</span>v：输出打包过程中正在处理的文件名<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目录与路径\"><a href=\"#目录与路径\" class=\"headerlink\" title=\"目录与路径\"></a>目录与路径</h3><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;</td>\n<td>根目录</td>\n</tr>\n<tr>\n<td>&#x2F;bin</td>\n<td>可执行文件</td>\n</tr>\n<tr>\n<td>&#x2F;home</td>\n<td>用户的主目录</td>\n</tr>\n</tbody></table>\n<p><strong>特殊目录符号：</strong></p>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>代表当前目录</td>\n</tr>\n<tr>\n<td>..</td>\n<td>代表上层目录</td>\n</tr>\n<tr>\n<td>-</td>\n<td>代表上一个工作目录</td>\n</tr>\n<tr>\n<td>~</td>\n<td>代表当前用户的主目录</td>\n</tr>\n<tr>\n<td>~accountname</td>\n<td>代表该name账户的主目录</td>\n</tr>\n</tbody></table>\n<h3 id=\"PATH环境变量\"><a href=\"#PATH环境变量\" class=\"headerlink\" title=\"PATH环境变量\"></a>PATH环境变量</h3><p>当前工作目录下的命令和程序可以直接在bash中执行，其他目录下的命令和程序无法执行。而PATH中的目录下的命令和程序可以在任何目录下执行。当执行命令时，会先在当前目录中寻找，如果存在即执行命令，如果不存在，则会在PATH中寻找并执行第一个相匹配的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 显示环境变量中的内容，每个路径用：隔开</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$PATH</span>      <span class=\"hljs-comment\"># $与PATH间没有空格</span><br><br><span class=\"hljs-comment\"># 添加路径到PATH环境变量</span><br><span class=\"hljs-built_in\">export</span> PATH=命令行路径:<span class=\"hljs-variable\">$PATH</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"目录管理\"><a href=\"#目录管理\" class=\"headerlink\" title=\"目录管理\"></a>目录管理</h3><p><strong>显示当前工作目录：</strong></p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mel\"># <span class=\"hljs-keyword\">pwd</span>显示当前工作目录（<span class=\"hljs-keyword\">print</span> working directory）<br><span class=\"hljs-keyword\">pwd</span><br><br># 用<span class=\"hljs-keyword\">help</span>查看<span class=\"hljs-keyword\">pwd</span>命令的帮助信息<br><span class=\"hljs-keyword\">help</span> <span class=\"hljs-keyword\">pwd</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>查看目录与文件：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># -l查看文件属性</span><br><span class=\"hljs-built_in\">ls</span> -l<br><br><span class=\"hljs-comment\"># -h以方便阅读的单位显示文件尺寸</span><br><span class=\"hljs-built_in\">ls</span> -lh<br><br><span class=\"hljs-comment\"># -S按照文件大小降序排列</span><br><span class=\"hljs-built_in\">ls</span> -lS<br><br><span class=\"hljs-comment\"># -R可以递归地显示所有路径</span><br><span class=\"hljs-built_in\">ls</span> -R<br></code></pre></td></tr></table></figure>\n\n<p><strong>常用目录操作：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 新建目录</span><br><span class=\"hljs-built_in\">mkdir</span> 文件名<br><br><span class=\"hljs-comment\"># 用-p创建多级目录</span><br><span class=\"hljs-built_in\">mkdir</span> -p 路径<br><br><span class=\"hljs-comment\"># 复制目录</span><br><span class=\"hljs-built_in\">cp</span> -r 源路径 目标路径<br><br><span class=\"hljs-comment\"># 移动目录</span><br><span class=\"hljs-built_in\">mv</span> 源路径 目标路径<br><br><span class=\"hljs-comment\"># 删除目录，加-r递归删除目录中的内容</span><br><span class=\"hljs-built_in\">rm</span> -r 路径<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h3><h4 id=\"文件类型：\"><a href=\"#文件类型：\" class=\"headerlink\" title=\"文件类型：\"></a>文件类型：</h4><p><strong>普通文件类型</strong>：<br>Linux中最多的一种文件类型, 包括 纯文本文件(ASCII)；二进制文件(binary)；数据格式的文件(data);各种压缩文件.第一个属性为 [-]<br><strong>目录文件</strong>：<br>就是目录， 能用 # cd 命令进入的。第一个属性为 [d]，例如 [drwxrwxrwx]<br><strong>块设备文件</strong>：<br>块设备文件 ： 就是存储数据以供系统存取的接口设备，简单而言就是硬盘。例如一号硬盘的代码是 &#x2F;dev&#x2F;hda1等文件。第一个属性为 [b]<br><strong>字符设备</strong>：<br>字符设备文件：即串行端口的接口设备，例如键盘、鼠标等等。第一个属性为 [c]<br><strong>套接字文件</strong>：<br>这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。第一个属性为 [s]，最常在 &#x2F;var&#x2F;run目录中看到这种文件类型<br><strong>管道文件</strong>：<br>FIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out(先进先出)的缩写。第一个属性为 [p]<br><strong>链接文件</strong>：<br>类似Windows下面的快捷方式。第一个属性为 [l]，例如 [lrwxrwxrwx]</p>\n<h4 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h4><p>管道是一系列将标准输入输出连接起来的进程</p>\n<p><strong>匿名管道：</strong> 用符号“|”表示，用来连接多个命令，将前一个命令的输出导入第二个命令作为输入</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"># 查看<span class=\"hljs-keyword\">ls</span>中包含某个关键词的文件<br><span class=\"hljs-keyword\">ls</span> -<span class=\"hljs-keyword\">l</span> | <span class=\"hljs-keyword\">grep</span> 关键词<br></code></pre></td></tr></table></figure>\n\n<p><strong>命名管道：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 用mkfifo命令创建命名管道（FIFO）</span><br><span class=\"hljs-built_in\">mkfifo</span> 管道文件名<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h4><ul>\n<li>touch：文件存在时，修改文件访问时间为当前时间，否则创建该文件</li>\n<li>用文本编辑器创建文件</li>\n<li>重定向方式创建文件：1）“&gt;”操作符：覆盖源文件中已有内容  2）“&gt;&gt;”操作符：将新内容追加到源文件内容的后面</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>command &gt; file</td>\n<td>将输出重定向到 file。</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>将输入重定向到 file。</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table>\n<h4 id=\"复制、移动、删除文件\"><a href=\"#复制、移动、删除文件\" class=\"headerlink\" title=\"复制、移动、删除文件\"></a>复制、移动、删除文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 使用cp命令复制文件</span><br><span class=\"hljs-built_in\">cp</span> 文件名 新文件名<br><br><span class=\"hljs-comment\"># 用cp命令创建快捷方式（符号链接）</span><br><span class=\"hljs-built_in\">cp</span> -s 文件名 快捷方式名<br><br><span class=\"hljs-comment\"># 使用cp命令-p选项复制文件的完整属性</span><br><span class=\"hljs-built_in\">cp</span> -p 文件名 新文件名<br><br><span class=\"hljs-comment\"># 使用mv命令移动文件</span><br><span class=\"hljs-built_in\">mv</span> 文件名 指定路径<br><br><span class=\"hljs-comment\"># 使用mv命令-i选项移动文件时会提示是否覆盖</span><br><span class=\"hljs-built_in\">mv</span> -i 文件名 指定路径<br><br><span class=\"hljs-comment\"># 使用 mv命令-b选项移动文件时会自动备份重名文件之后直接移动</span><br><span class=\"hljs-built_in\">mv</span> -b 文件名 指定路径  <span class=\"hljs-comment\"># 备份</span><br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"搜索文件\"><a href=\"#搜索文件\" class=\"headerlink\" title=\"搜索文件\"></a>搜索文件</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 使用which命令搜索PATH环境变量中包含的命令的具体路径</span><br>which ls<br><br><span class=\"hljs-comment\"># 使用locate命令查找文件路径，会显示含该关键词的所有文件</span><br>locate 关键词<br><br><span class=\"hljs-comment\"># locate -c输出查找到的文件的个数</span><br>locate -c 关键词<br><br><span class=\"hljs-comment\"># locate -l输出查找到的前n个文档</span><br>locate -l n 关键词<br><br><span class=\"hljs-comment\"># find查找最近三天修改过的文件</span><br><span class=\"hljs-built_in\">find</span> ~ -mtime -3<br><br><span class=\"hljs-comment\"># find查找某路径下属于某用户的所有文件</span><br><span class=\"hljs-built_in\">find</span> 路径 -user 用户名<br><br><span class=\"hljs-comment\"># 根据文件名查找文件路径</span><br><span class=\"hljs-built_in\">find</span> -name 文件名 # 需要输入完整文件名<br><br><span class=\"hljs-comment\"># 查找当前目录下所有管道类型文件</span><br><span class=\"hljs-built_in\">find</span> -type p<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"显示文件内容\"><a href=\"#显示文件内容\" class=\"headerlink\" title=\"显示文件内容\"></a>显示文件内容</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># cat拼接两个文件</span><br><span class=\"hljs-built_in\">cat</span> 第一个文件 第二个文件 &gt; 输出的文件  <span class=\"hljs-comment\"># 用重定向输出到指定文件，默认是输出到终端</span><br><br><span class=\"hljs-comment\"># 当cat一个文件时，则会输出文件内容</span><br> <span class=\"hljs-built_in\">cat</span> 文件名<br> <br><span class=\"hljs-comment\"># cat -n显示文件行号</span><br><span class=\"hljs-built_in\">cat</span> -n 文件名<br><br><span class=\"hljs-comment\"># more命令</span><br>more 文件名<br><br><span class=\"hljs-comment\"># head命令</span><br><span class=\"hljs-built_in\">head</span> -n 5 文件名  <span class=\"hljs-comment\"># 输出文件前5行</span><br>more -c 100 文件名  <span class=\"hljs-comment\"># 输出文件前100个字符</span><br><br><span class=\"hljs-comment\"># tail命令</span><br><span class=\"hljs-built_in\">tail</span> -n 5 文件名  <span class=\"hljs-comment\"># 输出后5行</span><br><span class=\"hljs-built_in\">tail</span> -c +115 文件名  <span class=\"hljs-comment\"># 输出115行至最后</span><br><br><span class=\"hljs-comment\"># less命令</span><br>less 文件名<br><br><span class=\"hljs-comment\"># grep命令可以实现关键词匹配</span><br>grep <span class=\"hljs-string\">&quot;关键词&quot;</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"文件压缩与备份\"><a href=\"#文件压缩与备份\" class=\"headerlink\" title=\"文件压缩与备份\"></a>文件压缩与备份</h4><figure class=\"highlight ldif\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ldif\"><span class=\"hljs-comment\"># 使用gzip进行文件压缩</span><br>gzip 文件名<br><br><span class=\"hljs-comment\"># gzip -c：将压缩的内容输出到屏幕上，源文件不变，可以通过重定向处理输出的内容</span><br><br><span class=\"hljs-comment\"># 使用gzip解压缩</span><br>gzip -d 文件名<br><br><span class=\"hljs-comment\"># bzip2 同gzip</span><br><br><span class=\"hljs-comment\"># tar命令可以将多个文件合并为一个压缩包</span><br><span class=\"hljs-literal\">-</span>c:新建打包文件<br><span class=\"hljs-literal\">-</span>t：查看打包文件中包含哪些文件<br><span class=\"hljs-literal\">-</span>x：解包文件包<br><span class=\"hljs-literal\">-</span>j：通过bzip2的支持进行压缩/解压缩<br><span class=\"hljs-literal\">-</span>z：通过gzip的支持进行压缩/解压缩<br><span class=\"hljs-literal\">-</span>C：指定解包目标路径<br><span class=\"hljs-literal\">-</span>p：打包过程中保留源文件的属性和权限<br><span class=\"hljs-literal\">-</span>v：输出打包过程中正在处理的文件名<br></code></pre></td></tr></table></figure>\n"},{"title":"程序与进程管理","_content":"\n**实现在一个终端中执行多个任务**\n\n### 程序管理\n\nbash环境中，在命令最后添加 **&** 符号使命令切换到后台执行\n后台执行的程序的输出会直接输出在终端，干扰我们在终端中的编辑，需要重定向到适当位置\n```\n命令 > /tmp/name.log &\n```\n\n输出会保存在name.log中，使用cat可以查看\n\nCtrl + z可以将终端中的程序切换到后台，并输出工作号码\n\n使用jobs查看后台程序\n```\njobs\n\n# 使用-l选项显示后台程序的PID\njobs -l\n\n# 使用-r输出正在后台运行的程序\njobs -r\n\n# 使用-s输出所有已停止的后台程序\njobs -s\n```\n\n使用fg命令将后台程序切换到前台\n```\nfg  # 将最后一个移到后台的程序打开\n\nfg n  # 将工作号码为n的程序打开\n```\n\n使用bg启动后台程序\n```\nbg 1  # 启动工作号码为1的程序\n```\n\n删除后台程序\n程序在前台，Ctrl + C可以关闭程序\n```\nkill -1  # 重新读取参数配置\nkill -2  # 等于Ctrl + C\nkill -9  # 强制杀死一个程序\nkill -15  # 默认值，正常删除\n```\n\n\n### 进程管理\n\n#### 查看进程\nps命令：显示进程\n```\nps\nps -l  # 显示详细信息\n```\npstree命令\n```\npstree\npstree -p  # -p显示进程对应的PID\n```\ntop命令\n\n#### 系统资源查看\n查看内存使用量\n```\nfree \nfree -m   # -m使用MB为单位\n```\n查看系统及内核信息\n```\nuname -a  # 查看所有信息\n```","source":"_posts/Notes/Linux学习/程序与进程管理.md","raw":"---\ntitle: 程序与进程管理\ncategories:\n  - Notes\n  - Linux学习\n---\n\n**实现在一个终端中执行多个任务**\n\n### 程序管理\n\nbash环境中，在命令最后添加 **&** 符号使命令切换到后台执行\n后台执行的程序的输出会直接输出在终端，干扰我们在终端中的编辑，需要重定向到适当位置\n```\n命令 > /tmp/name.log &\n```\n\n输出会保存在name.log中，使用cat可以查看\n\nCtrl + z可以将终端中的程序切换到后台，并输出工作号码\n\n使用jobs查看后台程序\n```\njobs\n\n# 使用-l选项显示后台程序的PID\njobs -l\n\n# 使用-r输出正在后台运行的程序\njobs -r\n\n# 使用-s输出所有已停止的后台程序\njobs -s\n```\n\n使用fg命令将后台程序切换到前台\n```\nfg  # 将最后一个移到后台的程序打开\n\nfg n  # 将工作号码为n的程序打开\n```\n\n使用bg启动后台程序\n```\nbg 1  # 启动工作号码为1的程序\n```\n\n删除后台程序\n程序在前台，Ctrl + C可以关闭程序\n```\nkill -1  # 重新读取参数配置\nkill -2  # 等于Ctrl + C\nkill -9  # 强制杀死一个程序\nkill -15  # 默认值，正常删除\n```\n\n\n### 进程管理\n\n#### 查看进程\nps命令：显示进程\n```\nps\nps -l  # 显示详细信息\n```\npstree命令\n```\npstree\npstree -p  # -p显示进程对应的PID\n```\ntop命令\n\n#### 系统资源查看\n查看内存使用量\n```\nfree \nfree -m   # -m使用MB为单位\n```\n查看系统及内核信息\n```\nuname -a  # 查看所有信息\n```","slug":"Notes/Linux学习/程序与进程管理","published":1,"date":"2023-09-19T12:47:32.977Z","updated":"2023-09-19T13:32:26.398Z","_id":"clmqcu9pe001lg8u531j88nqd","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>实现在一个终端中执行多个任务</strong></p>\n<h3 id=\"程序管理\"><a href=\"#程序管理\" class=\"headerlink\" title=\"程序管理\"></a>程序管理</h3><p>bash环境中，在命令最后添加 <strong>&amp;</strong> 符号使命令切换到后台执行<br>后台执行的程序的输出会直接输出在终端，干扰我们在终端中的编辑，需要重定向到适当位置</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">命令 &gt; <span class=\"hljs-regexp\">/tmp/</span>name.<span class=\"hljs-built_in\">log</span> &amp;<br></code></pre></td></tr></table></figure>\n\n<p>输出会保存在name.log中，使用cat可以查看</p>\n<p>Ctrl + z可以将终端中的程序切换到后台，并输出工作号码</p>\n<p>使用jobs查看后台程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">jobs</span><br><br><span class=\"hljs-comment\"># 使用-l选项显示后台程序的PID</span><br><span class=\"hljs-built_in\">jobs</span> -l<br><br><span class=\"hljs-comment\"># 使用-r输出正在后台运行的程序</span><br><span class=\"hljs-built_in\">jobs</span> -r<br><br><span class=\"hljs-comment\"># 使用-s输出所有已停止的后台程序</span><br><span class=\"hljs-built_in\">jobs</span> -s<br></code></pre></td></tr></table></figure>\n\n<p>使用fg命令将后台程序切换到前台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">fg</span>  <span class=\"hljs-comment\"># 将最后一个移到后台的程序打开</span><br><br><span class=\"hljs-built_in\">fg</span> n  <span class=\"hljs-comment\"># 将工作号码为n的程序打开</span><br></code></pre></td></tr></table></figure>\n\n<p>使用bg启动后台程序</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">bg</span> <span class=\"hljs-number\">1</span>  # 启动工作号码为<span class=\"hljs-number\">1</span>的程序<br></code></pre></td></tr></table></figure>\n\n<p>删除后台程序<br>程序在前台，Ctrl + C可以关闭程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">kill</span> -1  <span class=\"hljs-comment\"># 重新读取参数配置</span><br><span class=\"hljs-built_in\">kill</span> -2  <span class=\"hljs-comment\"># 等于Ctrl + C</span><br><span class=\"hljs-built_in\">kill</span> -9  <span class=\"hljs-comment\"># 强制杀死一个程序</span><br><span class=\"hljs-built_in\">kill</span> -15  <span class=\"hljs-comment\"># 默认值，正常删除</span><br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><h4 id=\"查看进程\"><a href=\"#查看进程\" class=\"headerlink\" title=\"查看进程\"></a>查看进程</h4><p>ps命令：显示进程</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-built_in\">ps</span><br><span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-l</span>  <span class=\"hljs-comment\"># 显示详细信息</span><br></code></pre></td></tr></table></figure>\n<p>pstree命令</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">pstree<br>pstree -<span class=\"hljs-selector-tag\">p</span>  # -<span class=\"hljs-selector-tag\">p</span>显示进程对应的PID<br></code></pre></td></tr></table></figure>\n<p>top命令</p>\n<h4 id=\"系统资源查看\"><a href=\"#系统资源查看\" class=\"headerlink\" title=\"系统资源查看\"></a>系统资源查看</h4><p>查看内存使用量</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-keyword\">free</span> <br><span class=\"hljs-keyword\">free</span> -m   # -m使用MB为单位<br></code></pre></td></tr></table></figure>\n<p>查看系统及内核信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">uname</span> -a  <span class=\"hljs-comment\"># 查看所有信息</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><strong>实现在一个终端中执行多个任务</strong></p>\n<h3 id=\"程序管理\"><a href=\"#程序管理\" class=\"headerlink\" title=\"程序管理\"></a>程序管理</h3><p>bash环境中，在命令最后添加 <strong>&amp;</strong> 符号使命令切换到后台执行<br>后台执行的程序的输出会直接输出在终端，干扰我们在终端中的编辑，需要重定向到适当位置</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">命令 &gt; <span class=\"hljs-regexp\">/tmp/</span>name.<span class=\"hljs-built_in\">log</span> &amp;<br></code></pre></td></tr></table></figure>\n\n<p>输出会保存在name.log中，使用cat可以查看</p>\n<p>Ctrl + z可以将终端中的程序切换到后台，并输出工作号码</p>\n<p>使用jobs查看后台程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">jobs</span><br><br><span class=\"hljs-comment\"># 使用-l选项显示后台程序的PID</span><br><span class=\"hljs-built_in\">jobs</span> -l<br><br><span class=\"hljs-comment\"># 使用-r输出正在后台运行的程序</span><br><span class=\"hljs-built_in\">jobs</span> -r<br><br><span class=\"hljs-comment\"># 使用-s输出所有已停止的后台程序</span><br><span class=\"hljs-built_in\">jobs</span> -s<br></code></pre></td></tr></table></figure>\n\n<p>使用fg命令将后台程序切换到前台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">fg</span>  <span class=\"hljs-comment\"># 将最后一个移到后台的程序打开</span><br><br><span class=\"hljs-built_in\">fg</span> n  <span class=\"hljs-comment\"># 将工作号码为n的程序打开</span><br></code></pre></td></tr></table></figure>\n\n<p>使用bg启动后台程序</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">bg</span> <span class=\"hljs-number\">1</span>  # 启动工作号码为<span class=\"hljs-number\">1</span>的程序<br></code></pre></td></tr></table></figure>\n\n<p>删除后台程序<br>程序在前台，Ctrl + C可以关闭程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">kill</span> -1  <span class=\"hljs-comment\"># 重新读取参数配置</span><br><span class=\"hljs-built_in\">kill</span> -2  <span class=\"hljs-comment\"># 等于Ctrl + C</span><br><span class=\"hljs-built_in\">kill</span> -9  <span class=\"hljs-comment\"># 强制杀死一个程序</span><br><span class=\"hljs-built_in\">kill</span> -15  <span class=\"hljs-comment\"># 默认值，正常删除</span><br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><h4 id=\"查看进程\"><a href=\"#查看进程\" class=\"headerlink\" title=\"查看进程\"></a>查看进程</h4><p>ps命令：显示进程</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-built_in\">ps</span><br><span class=\"hljs-built_in\">ps</span> <span class=\"hljs-literal\">-l</span>  <span class=\"hljs-comment\"># 显示详细信息</span><br></code></pre></td></tr></table></figure>\n<p>pstree命令</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">pstree<br>pstree -<span class=\"hljs-selector-tag\">p</span>  # -<span class=\"hljs-selector-tag\">p</span>显示进程对应的PID<br></code></pre></td></tr></table></figure>\n<p>top命令</p>\n<h4 id=\"系统资源查看\"><a href=\"#系统资源查看\" class=\"headerlink\" title=\"系统资源查看\"></a>系统资源查看</h4><p>查看内存使用量</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-keyword\">free</span> <br><span class=\"hljs-keyword\">free</span> -m   # -m使用MB为单位<br></code></pre></td></tr></table></figure>\n<p>查看系统及内核信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">uname</span> -a  <span class=\"hljs-comment\"># 查看所有信息</span><br></code></pre></td></tr></table></figure>"},{"title":"Advanced Tables表格绘制","_content":"用 | 隔开内容，然后按TAB生成表格，Enter进入下一行\n\n示例：\n\n| Hotkey       | Action                      |\n| ------------ | --------------------------- |\n| Tab          | Next Cell                   |\n| Enter        | Next Row                    |\n| Shift+Tab    | Previous Cell               |\n| Ctrl+Shift+D | Open table controls sidebar |\n","source":"_posts/Notes/Ob插件/Advanced Tables 表格绘制.md","raw":"---\ntitle: Advanced Tables表格绘制\ncategories:\n  - Notes\n  - Ob插件\n---\n用 | 隔开内容，然后按TAB生成表格，Enter进入下一行\n\n示例：\n\n| Hotkey       | Action                      |\n| ------------ | --------------------------- |\n| Tab          | Next Cell                   |\n| Enter        | Next Row                    |\n| Shift+Tab    | Previous Cell               |\n| Ctrl+Shift+D | Open table controls sidebar |\n","slug":"Notes/Ob插件/Advanced Tables 表格绘制","published":1,"date":"2023-09-19T12:47:32.980Z","updated":"2023-09-19T13:32:29.495Z","_id":"clmqcuccd002hg8u5he7m5hne","comments":1,"layout":"post","photos":[],"link":"","content":"<p>用 | 隔开内容，然后按TAB生成表格，Enter进入下一行</p>\n<p>示例：</p>\n<table>\n<thead>\n<tr>\n<th>Hotkey</th>\n<th>Action</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Tab</td>\n<td>Next Cell</td>\n</tr>\n<tr>\n<td>Enter</td>\n<td>Next Row</td>\n</tr>\n<tr>\n<td>Shift+Tab</td>\n<td>Previous Cell</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+D</td>\n<td>Open table controls sidebar</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p>用 | 隔开内容，然后按TAB生成表格，Enter进入下一行</p>\n<p>示例：</p>\n<table>\n<thead>\n<tr>\n<th>Hotkey</th>\n<th>Action</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Tab</td>\n<td>Next Cell</td>\n</tr>\n<tr>\n<td>Enter</td>\n<td>Next Row</td>\n</tr>\n<tr>\n<td>Shift+Tab</td>\n<td>Previous Cell</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+D</td>\n<td>Open table controls sidebar</td>\n</tr>\n</tbody></table>\n"},{"title":"扩散模型论文todo（已过期）","_content":"- [x] 只考虑真实&生成，修改文字\n\n- [x] 增加大量的生成数据  50倍 30倍 70倍\n\n- [x] 表格：真实数据一条，每个模型的生成数据3条，绘成表格\n\n- [x] 相关工作：把数据增强放前面，客户流失放后面，重在罗列，要写哪篇文章\n- [x] 数据集来源换成网址\n- [x] 隐私部分表格修改\n\n---\n\n- [ ] 审稿意见标粗的 <font color=\"#ff0000\">其他联合损失函数</font>\n- [x] 表格格式问题\n- [x] 弱分类器强分类器表格加粗好结果\n- [x] 4.1生成数据量对效果的影响\n- [ ] 相关工作的文献引用\n- [x] 写修改说明，合并到一起\n\n\n---\n\n\n- [x] 相关工作第二部分\n- [ ] 引言部分的参考文献\n- [x] 加上LR的误分类，另外数据是不是贴反了@程梓航\n- [x] 序号\n- [ ] 方法介绍开始一直检查到\n- [x] 修改说明中 损失函数 数据量增大\n- [ ] 修改说明合完发过去\n- [ ] 4.1绿的复制 表四复制\n- [ ] 引言 和 相关工作【】里加参考文献\n\n\n- [ ] 图标边框\n- [x] 合参考文献 数据集划分 误分类\n- [ ] 公式 摘要\n\n\n有问题的论文序号：2，4，8，10，15，16，18，28，34，35\n## 生成数据量对效果的影响\n\n为了验证大规模的生成数据对效果的影响，我们使用扩散模型生成了数据集训练数据量10倍、50倍和100倍的数据，用来训练分类器Catboost，训练结果如下表所示。在电信数据集中，大量样本并不能显著提升分类器的性能，反而使结果略微下降。在银行数据集和电商数据集中，大规模样本使分类器性能得到提升，尤其是电商数据的表现提升显著，超越了真实数据的效果。三者都在数据规模达到原训练样本100倍时取得最好的效果。这表明通过增大数据集规模来提升模型效果在某些场景下是可行的。\n\n| real   | 0.8072 | 0.7388 | 0.8546 |     |     |        | 0.9701 | 0.9456 | 0.9948 |     |     |        | 0.9401 | 0.8737 | 0.9528 |\n| --------------- | ------ | ------ | ------ | ------ | --- | --- | ------ | ------ | ------ | ------ | --- | --- | ------ | ------ | ------ | ------ |\n| syn 1:5_fakeALL | 0.8051 | 0.7367 | 0.8542 |        |     |     | 0.9589 | 0.9241 | 0.9836 |        |     |     | 0.9049 | 0.8076 | 0.8893 |        |\n| 10x_fakeall     | 0.7277 | 0.7072 | 0.8384 |        |     |     | 0.9589 | 0.9239 | 0.9855 |        |     |     | 0.9331 | 0.8646 | 0.9511 |        |\n| 30x_fakeall     |        |        |        |        |     |     |        |        |        |        |     |     | 0.9322 | 0.8652 | 0.9556 |        |\n| 50x_fakeall     | 0.7227 | 0.702  | 0.844  |        |     |     | 0.9608 | 0.9279 | 0.9872 |        |     |     | 0.9349 | 0.8708 | 0.9543 |        |\n| 70x_fakeall     |        |        |        |        |     |     |        |        |        |        |     |     |        |        |        |        |\n| 100x_fakeall    | 0.7277 | 0.7076 | 0.8442 |        |     |     | 0.9623 | 0.9312 | 0.9882 |        |     |     | 0.934  | 0.8687 | 0.9562 |        |\n\n## 相关工作\n\n#### 数据增强方法\n数据增强是一种基于有限数据生成更多有效数据来扩充训练集，从而使得训练集训练出的模型效果得到提升的方法。目前，许多数据增强方法在图像生成等领域应用广泛。常用的方法有综合采样人工合成数据算法SMOTE[12]，无监督学习方法VAE（Variational Autoencoder）[32]，GAN[34]及其多种变体，以及扩散模型（Denoising Diffusion Probabilistic Model）[48]等。\nXiaojun Wu利用改进的 SMOTE 处理流失数据，结合过采样和欠采样方法解决流失数据的不平衡问题，对电子商务客户流失进行预测。（# E-commerce customer churn prediction based on improved SMOTE and AdaBoost）TVAE[33]在VAE的基础上提出了一个新的集成框架，结合深度度量学习（deep metric learning）来学习 VAE 中的潜在嵌入。MedGAN将一个自编码器与GAN结合，可以在图像层面实现端到端的生成任务，可以生成连续和离散变量，被用于EHR（electronic health record）数据的生成。CrGAN-Cnet将Cramér Distance和Cross-Net architecture整合到算法中，用于航空公司乘客姓名记录生成（Airline Passenger Name Record Generation），此外还能生成数据来填补数据表格中的缺失值。IRGAN首次将在CV领域中广泛应用的GAN引入到信息检索，利用强化学习，创造性地解决了GAN在离散领域的适用问题。TableGAN将分类器和信息损失引入GAN，并在生成器、鉴别器和分类器中应用卷积神经网络（CNN）。另外，在表格数据增强中，隐私保护能力也是一个重要的因素。PATE-GAN提出了一个生成具有差分隐私保证数据的框架。\n上述基于GAN的算法在生成特定类别数据上存在很大不足，而Conditional GAN（CGAN）可以有效控制生成数据，因而被广泛应用。CGAN在生成器和判别器的输入中增加了额外的条件信息，限制了生成数据的生成类型。CW-GAN将Wasserstein距离应用到CGAN中，利用条件向量对少数类进行过采样，以解决表格数据生成不平衡的问题。CTGAN将 PacGAN结构集成到它的鉴别器中，并使用 WGAN 损失加上梯度惩罚来训练一个条件 GAN 框架。CTAB-GAN通过数据编码连续和分类变量的混合数据类型，以及对长尾连续变量有效建模。\n2020年，DDPM（Denoising Diffusion Probabilistic Model）被提出，被称为扩散模型，在图像生成领域广泛应用。扩散模型包括两个过程：前向过程和反向过程，其中前向过程又称为扩散过程。无论是前向过程还是反向过程都是一个参数化的马尔可夫链。后来学者们改进DDPM（引用Improved Denoising Diffusion Probabilistic Models），进一步增强其生成效果。\n\n#### 客户流失预估： \n在过去的研究中，学者们对客户流失预测在多种领域进行了大量的探索，包括电信客户流失、银行理财客户流失、新兴互联网行业客户流失，如电商、直播、旅游产品等。预测方法也逐渐成熟，形成了以机器学习算法为主流的现状。从发展历程上主要分为两个阶段。\n第一阶段是传统统计学预测方法，主要包括决策树（decision tree, DT）、逻辑回归（logistic regression，LR）、贝叶斯分类器（bayesian）、支持向量机（support vector machine，SVM）等算法。早在2007年，Luo Bin就使用决策树来预测手机服务中的客户流失（# Customer Churn Prediction Based on the Decision Tree in Personal Handyphone System Service）。同年，针对实际客户流失数据中正负样本数量不平衡而且数据量大的特点,Ying Weiyun提出带有不同类权重参数的支持向量机算法CW-SVM来预测客户流失,通过调整类权重参数改变分类面位置,提高算法分类准确性[6]。近些年电子商务发展迅速，客户激增，Qiu Yanfang使用逻辑回归来预测电子商务场景下的客户流失[4]。在[3]中，Hemlata Jain将逻辑回归和logit boost结合起来，在美国电信公司Orange的数据集上表现良好。在[5]中，Guangli Nie分别使用决策树和逻辑回归对某银行信用卡用户流失数据做预测。Arno De Caigny在其论文中将决策树和逻辑回归结合提出了一种新的混合算法，logit leaf model (LLM) ，以更好地对数据进行分类。（# A new hybrid classification algorithm for customer churn prediction based on logistic regression and decision trees）。这一阶段的客户流失预测方法主要集中在将这些基础算法和手动特征工程结合对客户流失进行建模[1-3, 6-7]。\n第二阶段是客户流失预测场景中集成学习算法的垄断和深度学习的初步探索。随着集成学习的引入，随机森林（random forest，RF）、梯度提升决策树（gradient boosting decision tree，GBDT）、Adaboost和Stack等方法被大量引入到对客户流失预测中，包括在电信、银行、互联网等场景。特别是GBDT，由于其算法具有很好的性能被客户流失预测广泛应用。\nYaya Xie提出了一种基于随机森林的学习方法，称为改进的平衡随机森林(improved balanced random forests，IBRF)，通过改变类的分布和对少数类的错误分类施加更高的惩罚来迭代学习最佳特征，并将该方法应用于某银行客户流失数据集。（# Customer churn prediction using improved balanced random forests）Liang Jiafu提出了一种基于梯度提升决策树算法(GBDT)和逻辑回归(LR)算法的用户流失预防模型,对参数特征进行调整,对已有移动用户流失数据进行计算,识别速度和准确率均拥有好的效果[8]。Zengyuan Wu提出 PCA-AdaBoost 模型，采用主成分分析来减少数据维度，使用AdaBoost对多个决策树进行级联，以最小化不平衡数据的影响。该模型在kaggle的电子商务数据集上证明了模型的有效性。（# A PCA-AdaBoost model for E-commerce customer churn prediction）\n在深度学习领域，Ebru Pekel Ozmen改进卷积神经网络算法，提出了一种新的混合扩展卷积决策树模型(ECDT)，将模型应用于零售业员工流失预测的数据集[10]。[11]提出了一个利用交易数据预测银行客户流失的框架,将GRU和bi-directional LSTM应用于客户流失预测。这一阶段的客户流失方法开始尝试将一些机器学习方法集成起来，或是使用流行的深度学习方法，用更复杂的模型学习和预测流失数据。\n整体上，客户流失预测以机器学习算法为主，并发展出集成学习等不同模型，深度学习在该领域也有一定应用。预测领域也从电信用户流失逐渐发展到银行信用卡用户流失、电商用户流失等多个领域。\n\n\n\n\n\n\n## 工作\n**1** 多处需要增加引用文献，例如：Theil’s U 统计量，Correlation Ratio，SHAP（SHapley Additive exPlanations）\n解决：Theil’s U 统计量，Correlation Ratio可以直接引用CTABGAN\n\t\t  SHAP： [A Unified Approach to Interpreting Model Predictions]([[1705.07874v2] A Unified Approach to Interpreting Model Predictions (arxiv.org)](https://arxiv.org/abs/1705.07874v2))\n\t\t  \n**2** 论文之中提到的 kaggle 数据集可以给出相应的链接。 @ 正阳 （找链接，试着参考论文里）\n[Telco Customer Churn | Kaggle](https://www.kaggle.com/datasets/blastchar/telco-customer-churn)\n[Credit Card customers | Kaggle](https://www.kaggle.com/datasets/sakshigoyal7/credit-card-customers)\n[直播电商数据集_数据集-阿里云天池 (aliyun.com)](https://tianchi.aliyun.com/dataset/124814)\n\n3 电信数据集，每个模型找五条\n\nREAL：\n\nMale  0 No No  2  Yes  No  DSL  Yes  Yes  No  No  No  No  Month-to-month  Yes  Mailed check  53.85  108.15\n\nFemale  0  No No 2 Yes No Fiber optic No No No No No No Month-to-month Yes Electronic check 70.7 151.65 \n\nFemale 0 No No 8 Yes Yes Fiber optic No No Yes No Yes Yes Month-to-month Yes Electronic check 99.65 820.5\n\nMale 1 No No 1 No No phone service DSL No No Yes No No Yes Month-to-month Yes Electronic check 39.65 39.65\n\nMale 0 No No 49 Yes Yes Fiber optic No Yes Yes No Yes Yes Month-to-month Yes Bank transfer(automatic) 103.7 5036.3\n\nDDPM：\n'Male' '1' 'Yes' 'No'  4.0 'Yes' 'No' 'Fiber optic' 'No' 'No' 'Yes' 'No'\n  'Yes' 'Yes' 'Month-to-month' 'Yes' 'Electronic check'\n  92.81641778046422 347.77240745447966\n  \n 'Male' '0' 'Yes' 'No' 1.0 'Yes' 'Yes' 'Fiber optic' 'No' 'No' 'No' 'No'\n  'Yes' 'Yes' 'Month-to-month' 'Yes' 'Electronic check' \n  95.8100172795924 135.30996333735123\n\n 'Female' '0' 'No' 'No' 12.89970293412554 'Yes' 'No' 'Fiber optic' 'No' 'No' 'No' 'No'\n  'Yes' 'Yes' 'Month-to-month' 'Yes' 'Bank transfer (automatic)'\n   90.24851621598897 1131.933374934577\n  \n 'Male' '0' 'No' 'No' 15.0 'Yes' 'Yes' 'Fiber optic' 'No' 'Yes' 'No' 'No'\n  'No' 'Yes' 'Month-to-month' 'Yes' 'Credit card (automatic)' \n  89.23206588556003 1370.882200227259\n \n 'Female' '1' 'No' 'No' 1.0 'Yes' 'Yes' 'Fiber optic' 'No' 'No' 'No' 'No'\n  'No' 'No' 'Month-to-month' 'Yes' 'Electronic check' \n  75.70813933778831 75.53547210781328\n\nSMOTE：\n'Female' '0' 'No' 'No' 6.058020806965098 'Yes' 'No' 'Fiber optic' 'No' 'No' 'No' 'No'\n  'Yes' 'Yes' 'Month-to-month' 'Yes' 'Electronic check' \n  89.30362630043531 581.5998093801566\n  \n 'Female' '0' 'Yes' 'No' 34.16695916300951 'Yes' 'Yes' 'Fiber optic' 'Yes' 'No' 'Yes' 'No'\n  'Yes' 'Yes' 'Month-to-month' 'Yes' 'Electronic check' \n  102.47469287884003 3553.063238271951\n  \n 'Female' '0' 'No' 'No' 10.409424239667828 'Yes' 'Yes' 'DSL' 'No' 'No' 'No' 'No' 'No' 'Yes'\n  'Month-to-month' 'No' 'Electronic check' \n  72.89683257375917 749.7780225143397\n  \n 'Male' '0' 'Yes' 'No' 68.0 'Yes' 'Yes' 'Fiber optic' 'Yes' 'Yes' 'Yes' 'Yes'\n  'Yes' 'Yes' 'Two year' 'Yes' 'Credit card (automatic)' \n  111.84516691088298 7754.865079775263\n  \n 'Male' '0' 'No' 'No' 57.53490684507468 'No' 'No phone service' 'DSL' 'No' 'Yes' 'Yes'\n  'No' 'Yes' 'Yes' 'Month-to-month' 'Yes' 'Electronic check'\n   52.08537000221106 2966.5298068815946\n\nCTABGAN：\n'Female' '1' 'Yes' 'No' 25.813646159053306 'Yes' 'No' 'Fiber optic' 'No' 'Yes' 'No' 'No'\n  'No' 'No' 'Month-to-month' 'Yes' 'Credit card (automatic)'\n   72.4520499161782 107.12076519599646\n  \n 'Male' '0' 'No' 'Yes' 7.578428442708454 'Yes' 'No' 'DSL' 'No' 'No' 'No' 'No' 'No' 'No'\n  'Month-to-month' 'No' 'Mailed check' \n  45.84371280675952 105.69947914250504\n  \n 'Male' '0' 'No' 'No'  1.9809866925261472 'Yes' 'Yes' 'Fiber optic' 'No' 'No' 'No' 'No'\n  'Yes' 'No' 'Month-to-month' 'Yes' 'Bank transfer (automatic)'\n   81.46474915190095 40.94928790189158\n  \n 'Female' '1' 'No' 'Yes' 26.57383830887195 'Yes' 'No phone service' 'DSL' 'Yes' 'Yes'\n  'Yes' 'No' 'Yes' 'Yes' 'Month-to-month' 'No' 'Electronic check'\n   57.69859110911275 781.0754735958174\n  \n 'Male' '0' 'Yes' 'No'  28.8168545923753 'Yes' 'Yes' 'DSL' 'No' 'Yes' 'No' 'Yes' 'Yes'\n  'Yes' 'Month-to-month' 'No' 'Credit card (automatic)' \n  77.30306219710255 756.2990340865898\n\n\n\n\nIn the field of data mining, there are commonly encountered issues of data imbalance and inadequate protection of user privacy data. These issues can have a detrimental impact on the accuracy of model predictions and the applicability of models in privacy-preserving scenarios. Therefore, the generation of new data has emerged as a prominent solution in addressing these challenges.  \nHowever, generating high-quality data poses certain challenges in the field of data mining, which primarily deals with structured data characterized by a high number of dimensions and unrelated features.  \nConsidering the successful application of diffusion models in tasks such as image generation, this study attempts to apply diffusion models to the task of customer churn prediction.  \nThis paper employs Gaussian diffusion models and polynomial diffusion models to generate data for numerical and categorical features in churn data. It also conducts research and analysis on the predictive performance and privacy protection capabilities of these models.  \nWe conducted extensive experiments on customer churn data from multiple domains to explore the potential of merging synthetic data with real data for reconstruction.  \nThe experimental results indicate that the adoption of the diffusion model enables the generation of high-quality data. Furthermore, the generated data exhibits improvements across various customer churn prediction methods, with a particular advantage observed for weak classifiers. This approach also effectively mitigates the issue of data imbalance.  \nMoreover, the data generated by the diffusion model exhibits a distribution that is closer to real data, thereby possessing potential value in preserving customer privacy.\n\n\n\n\n","source":"_posts/Notes/论文/扩散模型论文todo（已过期）.md","raw":"---\ntitle: 扩散模型论文todo（已过期）\ncategories:\n  - Notes\n  - 论文\n---\n- [x] 只考虑真实&生成，修改文字\n\n- [x] 增加大量的生成数据  50倍 30倍 70倍\n\n- [x] 表格：真实数据一条，每个模型的生成数据3条，绘成表格\n\n- [x] 相关工作：把数据增强放前面，客户流失放后面，重在罗列，要写哪篇文章\n- [x] 数据集来源换成网址\n- [x] 隐私部分表格修改\n\n---\n\n- [ ] 审稿意见标粗的 <font color=\"#ff0000\">其他联合损失函数</font>\n- [x] 表格格式问题\n- [x] 弱分类器强分类器表格加粗好结果\n- [x] 4.1生成数据量对效果的影响\n- [ ] 相关工作的文献引用\n- [x] 写修改说明，合并到一起\n\n\n---\n\n\n- [x] 相关工作第二部分\n- [ ] 引言部分的参考文献\n- [x] 加上LR的误分类，另外数据是不是贴反了@程梓航\n- [x] 序号\n- [ ] 方法介绍开始一直检查到\n- [x] 修改说明中 损失函数 数据量增大\n- [ ] 修改说明合完发过去\n- [ ] 4.1绿的复制 表四复制\n- [ ] 引言 和 相关工作【】里加参考文献\n\n\n- [ ] 图标边框\n- [x] 合参考文献 数据集划分 误分类\n- [ ] 公式 摘要\n\n\n有问题的论文序号：2，4，8，10，15，16，18，28，34，35\n## 生成数据量对效果的影响\n\n为了验证大规模的生成数据对效果的影响，我们使用扩散模型生成了数据集训练数据量10倍、50倍和100倍的数据，用来训练分类器Catboost，训练结果如下表所示。在电信数据集中，大量样本并不能显著提升分类器的性能，反而使结果略微下降。在银行数据集和电商数据集中，大规模样本使分类器性能得到提升，尤其是电商数据的表现提升显著，超越了真实数据的效果。三者都在数据规模达到原训练样本100倍时取得最好的效果。这表明通过增大数据集规模来提升模型效果在某些场景下是可行的。\n\n| real   | 0.8072 | 0.7388 | 0.8546 |     |     |        | 0.9701 | 0.9456 | 0.9948 |     |     |        | 0.9401 | 0.8737 | 0.9528 |\n| --------------- | ------ | ------ | ------ | ------ | --- | --- | ------ | ------ | ------ | ------ | --- | --- | ------ | ------ | ------ | ------ |\n| syn 1:5_fakeALL | 0.8051 | 0.7367 | 0.8542 |        |     |     | 0.9589 | 0.9241 | 0.9836 |        |     |     | 0.9049 | 0.8076 | 0.8893 |        |\n| 10x_fakeall     | 0.7277 | 0.7072 | 0.8384 |        |     |     | 0.9589 | 0.9239 | 0.9855 |        |     |     | 0.9331 | 0.8646 | 0.9511 |        |\n| 30x_fakeall     |        |        |        |        |     |     |        |        |        |        |     |     | 0.9322 | 0.8652 | 0.9556 |        |\n| 50x_fakeall     | 0.7227 | 0.702  | 0.844  |        |     |     | 0.9608 | 0.9279 | 0.9872 |        |     |     | 0.9349 | 0.8708 | 0.9543 |        |\n| 70x_fakeall     |        |        |        |        |     |     |        |        |        |        |     |     |        |        |        |        |\n| 100x_fakeall    | 0.7277 | 0.7076 | 0.8442 |        |     |     | 0.9623 | 0.9312 | 0.9882 |        |     |     | 0.934  | 0.8687 | 0.9562 |        |\n\n## 相关工作\n\n#### 数据增强方法\n数据增强是一种基于有限数据生成更多有效数据来扩充训练集，从而使得训练集训练出的模型效果得到提升的方法。目前，许多数据增强方法在图像生成等领域应用广泛。常用的方法有综合采样人工合成数据算法SMOTE[12]，无监督学习方法VAE（Variational Autoencoder）[32]，GAN[34]及其多种变体，以及扩散模型（Denoising Diffusion Probabilistic Model）[48]等。\nXiaojun Wu利用改进的 SMOTE 处理流失数据，结合过采样和欠采样方法解决流失数据的不平衡问题，对电子商务客户流失进行预测。（# E-commerce customer churn prediction based on improved SMOTE and AdaBoost）TVAE[33]在VAE的基础上提出了一个新的集成框架，结合深度度量学习（deep metric learning）来学习 VAE 中的潜在嵌入。MedGAN将一个自编码器与GAN结合，可以在图像层面实现端到端的生成任务，可以生成连续和离散变量，被用于EHR（electronic health record）数据的生成。CrGAN-Cnet将Cramér Distance和Cross-Net architecture整合到算法中，用于航空公司乘客姓名记录生成（Airline Passenger Name Record Generation），此外还能生成数据来填补数据表格中的缺失值。IRGAN首次将在CV领域中广泛应用的GAN引入到信息检索，利用强化学习，创造性地解决了GAN在离散领域的适用问题。TableGAN将分类器和信息损失引入GAN，并在生成器、鉴别器和分类器中应用卷积神经网络（CNN）。另外，在表格数据增强中，隐私保护能力也是一个重要的因素。PATE-GAN提出了一个生成具有差分隐私保证数据的框架。\n上述基于GAN的算法在生成特定类别数据上存在很大不足，而Conditional GAN（CGAN）可以有效控制生成数据，因而被广泛应用。CGAN在生成器和判别器的输入中增加了额外的条件信息，限制了生成数据的生成类型。CW-GAN将Wasserstein距离应用到CGAN中，利用条件向量对少数类进行过采样，以解决表格数据生成不平衡的问题。CTGAN将 PacGAN结构集成到它的鉴别器中，并使用 WGAN 损失加上梯度惩罚来训练一个条件 GAN 框架。CTAB-GAN通过数据编码连续和分类变量的混合数据类型，以及对长尾连续变量有效建模。\n2020年，DDPM（Denoising Diffusion Probabilistic Model）被提出，被称为扩散模型，在图像生成领域广泛应用。扩散模型包括两个过程：前向过程和反向过程，其中前向过程又称为扩散过程。无论是前向过程还是反向过程都是一个参数化的马尔可夫链。后来学者们改进DDPM（引用Improved Denoising Diffusion Probabilistic Models），进一步增强其生成效果。\n\n#### 客户流失预估： \n在过去的研究中，学者们对客户流失预测在多种领域进行了大量的探索，包括电信客户流失、银行理财客户流失、新兴互联网行业客户流失，如电商、直播、旅游产品等。预测方法也逐渐成熟，形成了以机器学习算法为主流的现状。从发展历程上主要分为两个阶段。\n第一阶段是传统统计学预测方法，主要包括决策树（decision tree, DT）、逻辑回归（logistic regression，LR）、贝叶斯分类器（bayesian）、支持向量机（support vector machine，SVM）等算法。早在2007年，Luo Bin就使用决策树来预测手机服务中的客户流失（# Customer Churn Prediction Based on the Decision Tree in Personal Handyphone System Service）。同年，针对实际客户流失数据中正负样本数量不平衡而且数据量大的特点,Ying Weiyun提出带有不同类权重参数的支持向量机算法CW-SVM来预测客户流失,通过调整类权重参数改变分类面位置,提高算法分类准确性[6]。近些年电子商务发展迅速，客户激增，Qiu Yanfang使用逻辑回归来预测电子商务场景下的客户流失[4]。在[3]中，Hemlata Jain将逻辑回归和logit boost结合起来，在美国电信公司Orange的数据集上表现良好。在[5]中，Guangli Nie分别使用决策树和逻辑回归对某银行信用卡用户流失数据做预测。Arno De Caigny在其论文中将决策树和逻辑回归结合提出了一种新的混合算法，logit leaf model (LLM) ，以更好地对数据进行分类。（# A new hybrid classification algorithm for customer churn prediction based on logistic regression and decision trees）。这一阶段的客户流失预测方法主要集中在将这些基础算法和手动特征工程结合对客户流失进行建模[1-3, 6-7]。\n第二阶段是客户流失预测场景中集成学习算法的垄断和深度学习的初步探索。随着集成学习的引入，随机森林（random forest，RF）、梯度提升决策树（gradient boosting decision tree，GBDT）、Adaboost和Stack等方法被大量引入到对客户流失预测中，包括在电信、银行、互联网等场景。特别是GBDT，由于其算法具有很好的性能被客户流失预测广泛应用。\nYaya Xie提出了一种基于随机森林的学习方法，称为改进的平衡随机森林(improved balanced random forests，IBRF)，通过改变类的分布和对少数类的错误分类施加更高的惩罚来迭代学习最佳特征，并将该方法应用于某银行客户流失数据集。（# Customer churn prediction using improved balanced random forests）Liang Jiafu提出了一种基于梯度提升决策树算法(GBDT)和逻辑回归(LR)算法的用户流失预防模型,对参数特征进行调整,对已有移动用户流失数据进行计算,识别速度和准确率均拥有好的效果[8]。Zengyuan Wu提出 PCA-AdaBoost 模型，采用主成分分析来减少数据维度，使用AdaBoost对多个决策树进行级联，以最小化不平衡数据的影响。该模型在kaggle的电子商务数据集上证明了模型的有效性。（# A PCA-AdaBoost model for E-commerce customer churn prediction）\n在深度学习领域，Ebru Pekel Ozmen改进卷积神经网络算法，提出了一种新的混合扩展卷积决策树模型(ECDT)，将模型应用于零售业员工流失预测的数据集[10]。[11]提出了一个利用交易数据预测银行客户流失的框架,将GRU和bi-directional LSTM应用于客户流失预测。这一阶段的客户流失方法开始尝试将一些机器学习方法集成起来，或是使用流行的深度学习方法，用更复杂的模型学习和预测流失数据。\n整体上，客户流失预测以机器学习算法为主，并发展出集成学习等不同模型，深度学习在该领域也有一定应用。预测领域也从电信用户流失逐渐发展到银行信用卡用户流失、电商用户流失等多个领域。\n\n\n\n\n\n\n## 工作\n**1** 多处需要增加引用文献，例如：Theil’s U 统计量，Correlation Ratio，SHAP（SHapley Additive exPlanations）\n解决：Theil’s U 统计量，Correlation Ratio可以直接引用CTABGAN\n\t\t  SHAP： [A Unified Approach to Interpreting Model Predictions]([[1705.07874v2] A Unified Approach to Interpreting Model Predictions (arxiv.org)](https://arxiv.org/abs/1705.07874v2))\n\t\t  \n**2** 论文之中提到的 kaggle 数据集可以给出相应的链接。 @ 正阳 （找链接，试着参考论文里）\n[Telco Customer Churn | Kaggle](https://www.kaggle.com/datasets/blastchar/telco-customer-churn)\n[Credit Card customers | Kaggle](https://www.kaggle.com/datasets/sakshigoyal7/credit-card-customers)\n[直播电商数据集_数据集-阿里云天池 (aliyun.com)](https://tianchi.aliyun.com/dataset/124814)\n\n3 电信数据集，每个模型找五条\n\nREAL：\n\nMale  0 No No  2  Yes  No  DSL  Yes  Yes  No  No  No  No  Month-to-month  Yes  Mailed check  53.85  108.15\n\nFemale  0  No No 2 Yes No Fiber optic No No No No No No Month-to-month Yes Electronic check 70.7 151.65 \n\nFemale 0 No No 8 Yes Yes Fiber optic No No Yes No Yes Yes Month-to-month Yes Electronic check 99.65 820.5\n\nMale 1 No No 1 No No phone service DSL No No Yes No No Yes Month-to-month Yes Electronic check 39.65 39.65\n\nMale 0 No No 49 Yes Yes Fiber optic No Yes Yes No Yes Yes Month-to-month Yes Bank transfer(automatic) 103.7 5036.3\n\nDDPM：\n'Male' '1' 'Yes' 'No'  4.0 'Yes' 'No' 'Fiber optic' 'No' 'No' 'Yes' 'No'\n  'Yes' 'Yes' 'Month-to-month' 'Yes' 'Electronic check'\n  92.81641778046422 347.77240745447966\n  \n 'Male' '0' 'Yes' 'No' 1.0 'Yes' 'Yes' 'Fiber optic' 'No' 'No' 'No' 'No'\n  'Yes' 'Yes' 'Month-to-month' 'Yes' 'Electronic check' \n  95.8100172795924 135.30996333735123\n\n 'Female' '0' 'No' 'No' 12.89970293412554 'Yes' 'No' 'Fiber optic' 'No' 'No' 'No' 'No'\n  'Yes' 'Yes' 'Month-to-month' 'Yes' 'Bank transfer (automatic)'\n   90.24851621598897 1131.933374934577\n  \n 'Male' '0' 'No' 'No' 15.0 'Yes' 'Yes' 'Fiber optic' 'No' 'Yes' 'No' 'No'\n  'No' 'Yes' 'Month-to-month' 'Yes' 'Credit card (automatic)' \n  89.23206588556003 1370.882200227259\n \n 'Female' '1' 'No' 'No' 1.0 'Yes' 'Yes' 'Fiber optic' 'No' 'No' 'No' 'No'\n  'No' 'No' 'Month-to-month' 'Yes' 'Electronic check' \n  75.70813933778831 75.53547210781328\n\nSMOTE：\n'Female' '0' 'No' 'No' 6.058020806965098 'Yes' 'No' 'Fiber optic' 'No' 'No' 'No' 'No'\n  'Yes' 'Yes' 'Month-to-month' 'Yes' 'Electronic check' \n  89.30362630043531 581.5998093801566\n  \n 'Female' '0' 'Yes' 'No' 34.16695916300951 'Yes' 'Yes' 'Fiber optic' 'Yes' 'No' 'Yes' 'No'\n  'Yes' 'Yes' 'Month-to-month' 'Yes' 'Electronic check' \n  102.47469287884003 3553.063238271951\n  \n 'Female' '0' 'No' 'No' 10.409424239667828 'Yes' 'Yes' 'DSL' 'No' 'No' 'No' 'No' 'No' 'Yes'\n  'Month-to-month' 'No' 'Electronic check' \n  72.89683257375917 749.7780225143397\n  \n 'Male' '0' 'Yes' 'No' 68.0 'Yes' 'Yes' 'Fiber optic' 'Yes' 'Yes' 'Yes' 'Yes'\n  'Yes' 'Yes' 'Two year' 'Yes' 'Credit card (automatic)' \n  111.84516691088298 7754.865079775263\n  \n 'Male' '0' 'No' 'No' 57.53490684507468 'No' 'No phone service' 'DSL' 'No' 'Yes' 'Yes'\n  'No' 'Yes' 'Yes' 'Month-to-month' 'Yes' 'Electronic check'\n   52.08537000221106 2966.5298068815946\n\nCTABGAN：\n'Female' '1' 'Yes' 'No' 25.813646159053306 'Yes' 'No' 'Fiber optic' 'No' 'Yes' 'No' 'No'\n  'No' 'No' 'Month-to-month' 'Yes' 'Credit card (automatic)'\n   72.4520499161782 107.12076519599646\n  \n 'Male' '0' 'No' 'Yes' 7.578428442708454 'Yes' 'No' 'DSL' 'No' 'No' 'No' 'No' 'No' 'No'\n  'Month-to-month' 'No' 'Mailed check' \n  45.84371280675952 105.69947914250504\n  \n 'Male' '0' 'No' 'No'  1.9809866925261472 'Yes' 'Yes' 'Fiber optic' 'No' 'No' 'No' 'No'\n  'Yes' 'No' 'Month-to-month' 'Yes' 'Bank transfer (automatic)'\n   81.46474915190095 40.94928790189158\n  \n 'Female' '1' 'No' 'Yes' 26.57383830887195 'Yes' 'No phone service' 'DSL' 'Yes' 'Yes'\n  'Yes' 'No' 'Yes' 'Yes' 'Month-to-month' 'No' 'Electronic check'\n   57.69859110911275 781.0754735958174\n  \n 'Male' '0' 'Yes' 'No'  28.8168545923753 'Yes' 'Yes' 'DSL' 'No' 'Yes' 'No' 'Yes' 'Yes'\n  'Yes' 'Month-to-month' 'No' 'Credit card (automatic)' \n  77.30306219710255 756.2990340865898\n\n\n\n\nIn the field of data mining, there are commonly encountered issues of data imbalance and inadequate protection of user privacy data. These issues can have a detrimental impact on the accuracy of model predictions and the applicability of models in privacy-preserving scenarios. Therefore, the generation of new data has emerged as a prominent solution in addressing these challenges.  \nHowever, generating high-quality data poses certain challenges in the field of data mining, which primarily deals with structured data characterized by a high number of dimensions and unrelated features.  \nConsidering the successful application of diffusion models in tasks such as image generation, this study attempts to apply diffusion models to the task of customer churn prediction.  \nThis paper employs Gaussian diffusion models and polynomial diffusion models to generate data for numerical and categorical features in churn data. It also conducts research and analysis on the predictive performance and privacy protection capabilities of these models.  \nWe conducted extensive experiments on customer churn data from multiple domains to explore the potential of merging synthetic data with real data for reconstruction.  \nThe experimental results indicate that the adoption of the diffusion model enables the generation of high-quality data. Furthermore, the generated data exhibits improvements across various customer churn prediction methods, with a particular advantage observed for weak classifiers. This approach also effectively mitigates the issue of data imbalance.  \nMoreover, the data generated by the diffusion model exhibits a distribution that is closer to real data, thereby possessing potential value in preserving customer privacy.\n\n\n\n\n","slug":"Notes/论文/扩散模型论文todo（已过期）","published":1,"date":"2023-09-19T12:47:32.998Z","updated":"2023-09-19T13:32:30.342Z","_id":"clmqcud5w002mg8u52tue73x8","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n只考虑真实&amp;生成，修改文字</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n增加大量的生成数据  50倍 30倍 70倍</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n表格：真实数据一条，每个模型的生成数据3条，绘成表格</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n相关工作：把数据增强放前面，客户流失放后面，重在罗列，要写哪篇文章</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n数据集来源换成网址</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n隐私部分表格修改</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 审稿意见标粗的 <font color=\"#ff0000\">其他联合损失函数</font></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 表格格式问题</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 弱分类器强分类器表格加粗好结果</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 4.1生成数据量对效果的影响</li>\n<li><input disabled=\"\" type=\"checkbox\"> 相关工作的文献引用</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 写修改说明，合并到一起</li>\n</ul>\n<hr>\n<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n相关工作第二部分</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n引言部分的参考文献</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n加上LR的误分类，另外数据是不是贴反了@程梓航</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n序号</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n方法介绍开始一直检查到</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n修改说明中 损失函数 数据量增大</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n修改说明合完发过去</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n4.1绿的复制 表四复制</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n引言 和 相关工作【】里加参考文献</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n图标边框</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n合参考文献 数据集划分 误分类</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n公式 摘要</p>\n</li>\n</ul>\n<p>有问题的论文序号：2，4，8，10，15，16，18，28，34，35</p>\n<h2 id=\"生成数据量对效果的影响\"><a href=\"#生成数据量对效果的影响\" class=\"headerlink\" title=\"生成数据量对效果的影响\"></a>生成数据量对效果的影响</h2><p>为了验证大规模的生成数据对效果的影响，我们使用扩散模型生成了数据集训练数据量10倍、50倍和100倍的数据，用来训练分类器Catboost，训练结果如下表所示。在电信数据集中，大量样本并不能显著提升分类器的性能，反而使结果略微下降。在银行数据集和电商数据集中，大规模样本使分类器性能得到提升，尤其是电商数据的表现提升显著，超越了真实数据的效果。三者都在数据规模达到原训练样本100倍时取得最好的效果。这表明通过增大数据集规模来提升模型效果在某些场景下是可行的。</p>\n<p>| real   | 0.8072 | 0.7388 | 0.8546 |     |     |        | 0.9701 | 0.9456 | 0.9948 |     |     |        | 0.9401 | 0.8737 | 0.9528 |<br>| ————— | —— | —— | —— | —— | — | — | —— | —— | —— | —— | — | — | —— | —— | —— | —— |<br>| syn 1:5_fakeALL | 0.8051 | 0.7367 | 0.8542 |        |     |     | 0.9589 | 0.9241 | 0.9836 |        |     |     | 0.9049 | 0.8076 | 0.8893 |        |<br>| 10x_fakeall     | 0.7277 | 0.7072 | 0.8384 |        |     |     | 0.9589 | 0.9239 | 0.9855 |        |     |     | 0.9331 | 0.8646 | 0.9511 |        |<br>| 30x_fakeall     |        |        |        |        |     |     |        |        |        |        |     |     | 0.9322 | 0.8652 | 0.9556 |        |<br>| 50x_fakeall     | 0.7227 | 0.702  | 0.844  |        |     |     | 0.9608 | 0.9279 | 0.9872 |        |     |     | 0.9349 | 0.8708 | 0.9543 |        |<br>| 70x_fakeall     |        |        |        |        |     |     |        |        |        |        |     |     |        |        |        |        |<br>| 100x_fakeall    | 0.7277 | 0.7076 | 0.8442 |        |     |     | 0.9623 | 0.9312 | 0.9882 |        |     |     | 0.934  | 0.8687 | 0.9562 |        |</p>\n<h2 id=\"相关工作\"><a href=\"#相关工作\" class=\"headerlink\" title=\"相关工作\"></a>相关工作</h2><h4 id=\"数据增强方法\"><a href=\"#数据增强方法\" class=\"headerlink\" title=\"数据增强方法\"></a>数据增强方法</h4><p>数据增强是一种基于有限数据生成更多有效数据来扩充训练集，从而使得训练集训练出的模型效果得到提升的方法。目前，许多数据增强方法在图像生成等领域应用广泛。常用的方法有综合采样人工合成数据算法SMOTE[12]，无监督学习方法VAE（Variational Autoencoder）[32]，GAN[34]及其多种变体，以及扩散模型（Denoising Diffusion Probabilistic Model）[48]等。<br>Xiaojun Wu利用改进的 SMOTE 处理流失数据，结合过采样和欠采样方法解决流失数据的不平衡问题，对电子商务客户流失进行预测。（# E-commerce customer churn prediction based on improved SMOTE and AdaBoost）TVAE[33]在VAE的基础上提出了一个新的集成框架，结合深度度量学习（deep metric learning）来学习 VAE 中的潜在嵌入。MedGAN将一个自编码器与GAN结合，可以在图像层面实现端到端的生成任务，可以生成连续和离散变量，被用于EHR（electronic health record）数据的生成。CrGAN-Cnet将Cramér Distance和Cross-Net architecture整合到算法中，用于航空公司乘客姓名记录生成（Airline Passenger Name Record Generation），此外还能生成数据来填补数据表格中的缺失值。IRGAN首次将在CV领域中广泛应用的GAN引入到信息检索，利用强化学习，创造性地解决了GAN在离散领域的适用问题。TableGAN将分类器和信息损失引入GAN，并在生成器、鉴别器和分类器中应用卷积神经网络（CNN）。另外，在表格数据增强中，隐私保护能力也是一个重要的因素。PATE-GAN提出了一个生成具有差分隐私保证数据的框架。<br>上述基于GAN的算法在生成特定类别数据上存在很大不足，而Conditional GAN（CGAN）可以有效控制生成数据，因而被广泛应用。CGAN在生成器和判别器的输入中增加了额外的条件信息，限制了生成数据的生成类型。CW-GAN将Wasserstein距离应用到CGAN中，利用条件向量对少数类进行过采样，以解决表格数据生成不平衡的问题。CTGAN将 PacGAN结构集成到它的鉴别器中，并使用 WGAN 损失加上梯度惩罚来训练一个条件 GAN 框架。CTAB-GAN通过数据编码连续和分类变量的混合数据类型，以及对长尾连续变量有效建模。<br>2020年，DDPM（Denoising Diffusion Probabilistic Model）被提出，被称为扩散模型，在图像生成领域广泛应用。扩散模型包括两个过程：前向过程和反向过程，其中前向过程又称为扩散过程。无论是前向过程还是反向过程都是一个参数化的马尔可夫链。后来学者们改进DDPM（引用Improved Denoising Diffusion Probabilistic Models），进一步增强其生成效果。</p>\n<h4 id=\"客户流失预估：\"><a href=\"#客户流失预估：\" class=\"headerlink\" title=\"客户流失预估：\"></a>客户流失预估：</h4><p>在过去的研究中，学者们对客户流失预测在多种领域进行了大量的探索，包括电信客户流失、银行理财客户流失、新兴互联网行业客户流失，如电商、直播、旅游产品等。预测方法也逐渐成熟，形成了以机器学习算法为主流的现状。从发展历程上主要分为两个阶段。<br>第一阶段是传统统计学预测方法，主要包括决策树（decision tree, DT）、逻辑回归（logistic regression，LR）、贝叶斯分类器（bayesian）、支持向量机（support vector machine，SVM）等算法。早在2007年，Luo Bin就使用决策树来预测手机服务中的客户流失（# Customer Churn Prediction Based on the Decision Tree in Personal Handyphone System Service）。同年，针对实际客户流失数据中正负样本数量不平衡而且数据量大的特点,Ying Weiyun提出带有不同类权重参数的支持向量机算法CW-SVM来预测客户流失,通过调整类权重参数改变分类面位置,提高算法分类准确性[6]。近些年电子商务发展迅速，客户激增，Qiu Yanfang使用逻辑回归来预测电子商务场景下的客户流失[4]。在[3]中，Hemlata Jain将逻辑回归和logit boost结合起来，在美国电信公司Orange的数据集上表现良好。在[5]中，Guangli Nie分别使用决策树和逻辑回归对某银行信用卡用户流失数据做预测。Arno De Caigny在其论文中将决策树和逻辑回归结合提出了一种新的混合算法，logit leaf model (LLM) ，以更好地对数据进行分类。（# A new hybrid classification algorithm for customer churn prediction based on logistic regression and decision trees）。这一阶段的客户流失预测方法主要集中在将这些基础算法和手动特征工程结合对客户流失进行建模[1-3, 6-7]。<br>第二阶段是客户流失预测场景中集成学习算法的垄断和深度学习的初步探索。随着集成学习的引入，随机森林（random forest，RF）、梯度提升决策树（gradient boosting decision tree，GBDT）、Adaboost和Stack等方法被大量引入到对客户流失预测中，包括在电信、银行、互联网等场景。特别是GBDT，由于其算法具有很好的性能被客户流失预测广泛应用。<br>Yaya Xie提出了一种基于随机森林的学习方法，称为改进的平衡随机森林(improved balanced random forests，IBRF)，通过改变类的分布和对少数类的错误分类施加更高的惩罚来迭代学习最佳特征，并将该方法应用于某银行客户流失数据集。（# Customer churn prediction using improved balanced random forests）Liang Jiafu提出了一种基于梯度提升决策树算法(GBDT)和逻辑回归(LR)算法的用户流失预防模型,对参数特征进行调整,对已有移动用户流失数据进行计算,识别速度和准确率均拥有好的效果[8]。Zengyuan Wu提出 PCA-AdaBoost 模型，采用主成分分析来减少数据维度，使用AdaBoost对多个决策树进行级联，以最小化不平衡数据的影响。该模型在kaggle的电子商务数据集上证明了模型的有效性。（# A PCA-AdaBoost model for E-commerce customer churn prediction）<br>在深度学习领域，Ebru Pekel Ozmen改进卷积神经网络算法，提出了一种新的混合扩展卷积决策树模型(ECDT)，将模型应用于零售业员工流失预测的数据集[10]。[11]提出了一个利用交易数据预测银行客户流失的框架,将GRU和bi-directional LSTM应用于客户流失预测。这一阶段的客户流失方法开始尝试将一些机器学习方法集成起来，或是使用流行的深度学习方法，用更复杂的模型学习和预测流失数据。<br>整体上，客户流失预测以机器学习算法为主，并发展出集成学习等不同模型，深度学习在该领域也有一定应用。预测领域也从电信用户流失逐渐发展到银行信用卡用户流失、电商用户流失等多个领域。</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p><strong>1</strong> 多处需要增加引用文献，例如：Theil’s U 统计量，Correlation Ratio，SHAP（SHapley Additive exPlanations）<br>解决：Theil’s U 统计量，Correlation Ratio可以直接引用CTABGAN<br>          SHAP： [A Unified Approach to Interpreting Model Predictions](<a href=\"https://arxiv.org/abs/1705.07874v2\">[1705.07874v2] A Unified Approach to Interpreting Model Predictions (arxiv.org)</a>)</p>\n<p><strong>2</strong> 论文之中提到的 kaggle 数据集可以给出相应的链接。 @ 正阳 （找链接，试着参考论文里）<br><a href=\"https://www.kaggle.com/datasets/blastchar/telco-customer-churn\">Telco Customer Churn | Kaggle</a><br><a href=\"https://www.kaggle.com/datasets/sakshigoyal7/credit-card-customers\">Credit Card customers | Kaggle</a><br><a href=\"https://tianchi.aliyun.com/dataset/124814\">直播电商数据集_数据集-阿里云天池 (aliyun.com)</a></p>\n<p>3 电信数据集，每个模型找五条</p>\n<p>REAL：</p>\n<p>Male  0 No No  2  Yes  No  DSL  Yes  Yes  No  No  No  No  Month-to-month  Yes  Mailed check  53.85  108.15</p>\n<p>Female  0  No No 2 Yes No Fiber optic No No No No No No Month-to-month Yes Electronic check 70.7 151.65 </p>\n<p>Female 0 No No 8 Yes Yes Fiber optic No No Yes No Yes Yes Month-to-month Yes Electronic check 99.65 820.5</p>\n<p>Male 1 No No 1 No No phone service DSL No No Yes No No Yes Month-to-month Yes Electronic check 39.65 39.65</p>\n<p>Male 0 No No 49 Yes Yes Fiber optic No Yes Yes No Yes Yes Month-to-month Yes Bank transfer(automatic) 103.7 5036.3</p>\n<p>DDPM：<br>‘Male’ ‘1’ ‘Yes’ ‘No’  4.0 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘No’ ‘Yes’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  92.81641778046422 347.77240745447966</p>\n<p> ‘Male’ ‘0’ ‘Yes’ ‘No’ 1.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  95.8100172795924 135.30996333735123</p>\n<p> ‘Female’ ‘0’ ‘No’ ‘No’ 12.89970293412554 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Bank transfer (automatic)’<br>   90.24851621598897 1131.933374934577</p>\n<p> ‘Male’ ‘0’ ‘No’ ‘No’ 15.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘Yes’ ‘No’ ‘No’<br>  ‘No’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Credit card (automatic)’<br>  89.23206588556003 1370.882200227259</p>\n<p> ‘Female’ ‘1’ ‘No’ ‘No’ 1.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘No’ ‘No’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  75.70813933778831 75.53547210781328</p>\n<p>SMOTE：<br>‘Female’ ‘0’ ‘No’ ‘No’ 6.058020806965098 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  89.30362630043531 581.5998093801566</p>\n<p> ‘Female’ ‘0’ ‘Yes’ ‘No’ 34.16695916300951 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘Yes’ ‘No’ ‘Yes’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  102.47469287884003 3553.063238271951</p>\n<p> ‘Female’ ‘0’ ‘No’ ‘No’ 10.409424239667828 ‘Yes’ ‘Yes’ ‘DSL’ ‘No’ ‘No’ ‘No’ ‘No’ ‘No’ ‘Yes’<br>  ‘Month-to-month’ ‘No’ ‘Electronic check’<br>  72.89683257375917 749.7780225143397</p>\n<p> ‘Male’ ‘0’ ‘Yes’ ‘No’ 68.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘Yes’ ‘Yes’ ‘Yes’ ‘Yes’<br>  ‘Yes’ ‘Yes’ ‘Two year’ ‘Yes’ ‘Credit card (automatic)’<br>  111.84516691088298 7754.865079775263</p>\n<p> ‘Male’ ‘0’ ‘No’ ‘No’ 57.53490684507468 ‘No’ ‘No phone service’ ‘DSL’ ‘No’ ‘Yes’ ‘Yes’<br>  ‘No’ ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>   52.08537000221106 2966.5298068815946</p>\n<p>CTABGAN：<br>‘Female’ ‘1’ ‘Yes’ ‘No’ 25.813646159053306 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘Yes’ ‘No’ ‘No’<br>  ‘No’ ‘No’ ‘Month-to-month’ ‘Yes’ ‘Credit card (automatic)’<br>   72.4520499161782 107.12076519599646</p>\n<p> ‘Male’ ‘0’ ‘No’ ‘Yes’ 7.578428442708454 ‘Yes’ ‘No’ ‘DSL’ ‘No’ ‘No’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Month-to-month’ ‘No’ ‘Mailed check’<br>  45.84371280675952 105.69947914250504</p>\n<p> ‘Male’ ‘0’ ‘No’ ‘No’  1.9809866925261472 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘No’ ‘Month-to-month’ ‘Yes’ ‘Bank transfer (automatic)’<br>   81.46474915190095 40.94928790189158</p>\n<p> ‘Female’ ‘1’ ‘No’ ‘Yes’ 26.57383830887195 ‘Yes’ ‘No phone service’ ‘DSL’ ‘Yes’ ‘Yes’<br>  ‘Yes’ ‘No’ ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘No’ ‘Electronic check’<br>   57.69859110911275 781.0754735958174</p>\n<p> ‘Male’ ‘0’ ‘Yes’ ‘No’  28.8168545923753 ‘Yes’ ‘Yes’ ‘DSL’ ‘No’ ‘Yes’ ‘No’ ‘Yes’ ‘Yes’<br>  ‘Yes’ ‘Month-to-month’ ‘No’ ‘Credit card (automatic)’<br>  77.30306219710255 756.2990340865898</p>\n<p>In the field of data mining, there are commonly encountered issues of data imbalance and inadequate protection of user privacy data. These issues can have a detrimental impact on the accuracy of model predictions and the applicability of models in privacy-preserving scenarios. Therefore, the generation of new data has emerged as a prominent solution in addressing these challenges.<br>However, generating high-quality data poses certain challenges in the field of data mining, which primarily deals with structured data characterized by a high number of dimensions and unrelated features.<br>Considering the successful application of diffusion models in tasks such as image generation, this study attempts to apply diffusion models to the task of customer churn prediction.<br>This paper employs Gaussian diffusion models and polynomial diffusion models to generate data for numerical and categorical features in churn data. It also conducts research and analysis on the predictive performance and privacy protection capabilities of these models.<br>We conducted extensive experiments on customer churn data from multiple domains to explore the potential of merging synthetic data with real data for reconstruction.<br>The experimental results indicate that the adoption of the diffusion model enables the generation of high-quality data. Furthermore, the generated data exhibits improvements across various customer churn prediction methods, with a particular advantage observed for weak classifiers. This approach also effectively mitigates the issue of data imbalance.<br>Moreover, the data generated by the diffusion model exhibits a distribution that is closer to real data, thereby possessing potential value in preserving customer privacy.</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n只考虑真实&amp;生成，修改文字</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n增加大量的生成数据  50倍 30倍 70倍</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n表格：真实数据一条，每个模型的生成数据3条，绘成表格</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n相关工作：把数据增强放前面，客户流失放后面，重在罗列，要写哪篇文章</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n数据集来源换成网址</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n隐私部分表格修改</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 审稿意见标粗的 <font color=\"#ff0000\">其他联合损失函数</font></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 表格格式问题</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 弱分类器强分类器表格加粗好结果</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 4.1生成数据量对效果的影响</li>\n<li><input disabled=\"\" type=\"checkbox\"> 相关工作的文献引用</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 写修改说明，合并到一起</li>\n</ul>\n<hr>\n<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n相关工作第二部分</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n引言部分的参考文献</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n加上LR的误分类，另外数据是不是贴反了@程梓航</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n序号</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n方法介绍开始一直检查到</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n修改说明中 损失函数 数据量增大</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n修改说明合完发过去</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n4.1绿的复制 表四复制</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n引言 和 相关工作【】里加参考文献</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n图标边框</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n合参考文献 数据集划分 误分类</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n公式 摘要</p>\n</li>\n</ul>\n<p>有问题的论文序号：2，4，8，10，15，16，18，28，34，35</p>\n<h2 id=\"生成数据量对效果的影响\"><a href=\"#生成数据量对效果的影响\" class=\"headerlink\" title=\"生成数据量对效果的影响\"></a>生成数据量对效果的影响</h2><p>为了验证大规模的生成数据对效果的影响，我们使用扩散模型生成了数据集训练数据量10倍、50倍和100倍的数据，用来训练分类器Catboost，训练结果如下表所示。在电信数据集中，大量样本并不能显著提升分类器的性能，反而使结果略微下降。在银行数据集和电商数据集中，大规模样本使分类器性能得到提升，尤其是电商数据的表现提升显著，超越了真实数据的效果。三者都在数据规模达到原训练样本100倍时取得最好的效果。这表明通过增大数据集规模来提升模型效果在某些场景下是可行的。</p>\n<p>| real   | 0.8072 | 0.7388 | 0.8546 |     |     |        | 0.9701 | 0.9456 | 0.9948 |     |     |        | 0.9401 | 0.8737 | 0.9528 |<br>| ————— | —— | —— | —— | —— | — | — | —— | —— | —— | —— | — | — | —— | —— | —— | —— |<br>| syn 1:5_fakeALL | 0.8051 | 0.7367 | 0.8542 |        |     |     | 0.9589 | 0.9241 | 0.9836 |        |     |     | 0.9049 | 0.8076 | 0.8893 |        |<br>| 10x_fakeall     | 0.7277 | 0.7072 | 0.8384 |        |     |     | 0.9589 | 0.9239 | 0.9855 |        |     |     | 0.9331 | 0.8646 | 0.9511 |        |<br>| 30x_fakeall     |        |        |        |        |     |     |        |        |        |        |     |     | 0.9322 | 0.8652 | 0.9556 |        |<br>| 50x_fakeall     | 0.7227 | 0.702  | 0.844  |        |     |     | 0.9608 | 0.9279 | 0.9872 |        |     |     | 0.9349 | 0.8708 | 0.9543 |        |<br>| 70x_fakeall     |        |        |        |        |     |     |        |        |        |        |     |     |        |        |        |        |<br>| 100x_fakeall    | 0.7277 | 0.7076 | 0.8442 |        |     |     | 0.9623 | 0.9312 | 0.9882 |        |     |     | 0.934  | 0.8687 | 0.9562 |        |</p>\n<h2 id=\"相关工作\"><a href=\"#相关工作\" class=\"headerlink\" title=\"相关工作\"></a>相关工作</h2><h4 id=\"数据增强方法\"><a href=\"#数据增强方法\" class=\"headerlink\" title=\"数据增强方法\"></a>数据增强方法</h4><p>数据增强是一种基于有限数据生成更多有效数据来扩充训练集，从而使得训练集训练出的模型效果得到提升的方法。目前，许多数据增强方法在图像生成等领域应用广泛。常用的方法有综合采样人工合成数据算法SMOTE[12]，无监督学习方法VAE（Variational Autoencoder）[32]，GAN[34]及其多种变体，以及扩散模型（Denoising Diffusion Probabilistic Model）[48]等。<br>Xiaojun Wu利用改进的 SMOTE 处理流失数据，结合过采样和欠采样方法解决流失数据的不平衡问题，对电子商务客户流失进行预测。（# E-commerce customer churn prediction based on improved SMOTE and AdaBoost）TVAE[33]在VAE的基础上提出了一个新的集成框架，结合深度度量学习（deep metric learning）来学习 VAE 中的潜在嵌入。MedGAN将一个自编码器与GAN结合，可以在图像层面实现端到端的生成任务，可以生成连续和离散变量，被用于EHR（electronic health record）数据的生成。CrGAN-Cnet将Cramér Distance和Cross-Net architecture整合到算法中，用于航空公司乘客姓名记录生成（Airline Passenger Name Record Generation），此外还能生成数据来填补数据表格中的缺失值。IRGAN首次将在CV领域中广泛应用的GAN引入到信息检索，利用强化学习，创造性地解决了GAN在离散领域的适用问题。TableGAN将分类器和信息损失引入GAN，并在生成器、鉴别器和分类器中应用卷积神经网络（CNN）。另外，在表格数据增强中，隐私保护能力也是一个重要的因素。PATE-GAN提出了一个生成具有差分隐私保证数据的框架。<br>上述基于GAN的算法在生成特定类别数据上存在很大不足，而Conditional GAN（CGAN）可以有效控制生成数据，因而被广泛应用。CGAN在生成器和判别器的输入中增加了额外的条件信息，限制了生成数据的生成类型。CW-GAN将Wasserstein距离应用到CGAN中，利用条件向量对少数类进行过采样，以解决表格数据生成不平衡的问题。CTGAN将 PacGAN结构集成到它的鉴别器中，并使用 WGAN 损失加上梯度惩罚来训练一个条件 GAN 框架。CTAB-GAN通过数据编码连续和分类变量的混合数据类型，以及对长尾连续变量有效建模。<br>2020年，DDPM（Denoising Diffusion Probabilistic Model）被提出，被称为扩散模型，在图像生成领域广泛应用。扩散模型包括两个过程：前向过程和反向过程，其中前向过程又称为扩散过程。无论是前向过程还是反向过程都是一个参数化的马尔可夫链。后来学者们改进DDPM（引用Improved Denoising Diffusion Probabilistic Models），进一步增强其生成效果。</p>\n<h4 id=\"客户流失预估：\"><a href=\"#客户流失预估：\" class=\"headerlink\" title=\"客户流失预估：\"></a>客户流失预估：</h4><p>在过去的研究中，学者们对客户流失预测在多种领域进行了大量的探索，包括电信客户流失、银行理财客户流失、新兴互联网行业客户流失，如电商、直播、旅游产品等。预测方法也逐渐成熟，形成了以机器学习算法为主流的现状。从发展历程上主要分为两个阶段。<br>第一阶段是传统统计学预测方法，主要包括决策树（decision tree, DT）、逻辑回归（logistic regression，LR）、贝叶斯分类器（bayesian）、支持向量机（support vector machine，SVM）等算法。早在2007年，Luo Bin就使用决策树来预测手机服务中的客户流失（# Customer Churn Prediction Based on the Decision Tree in Personal Handyphone System Service）。同年，针对实际客户流失数据中正负样本数量不平衡而且数据量大的特点,Ying Weiyun提出带有不同类权重参数的支持向量机算法CW-SVM来预测客户流失,通过调整类权重参数改变分类面位置,提高算法分类准确性[6]。近些年电子商务发展迅速，客户激增，Qiu Yanfang使用逻辑回归来预测电子商务场景下的客户流失[4]。在[3]中，Hemlata Jain将逻辑回归和logit boost结合起来，在美国电信公司Orange的数据集上表现良好。在[5]中，Guangli Nie分别使用决策树和逻辑回归对某银行信用卡用户流失数据做预测。Arno De Caigny在其论文中将决策树和逻辑回归结合提出了一种新的混合算法，logit leaf model (LLM) ，以更好地对数据进行分类。（# A new hybrid classification algorithm for customer churn prediction based on logistic regression and decision trees）。这一阶段的客户流失预测方法主要集中在将这些基础算法和手动特征工程结合对客户流失进行建模[1-3, 6-7]。<br>第二阶段是客户流失预测场景中集成学习算法的垄断和深度学习的初步探索。随着集成学习的引入，随机森林（random forest，RF）、梯度提升决策树（gradient boosting decision tree，GBDT）、Adaboost和Stack等方法被大量引入到对客户流失预测中，包括在电信、银行、互联网等场景。特别是GBDT，由于其算法具有很好的性能被客户流失预测广泛应用。<br>Yaya Xie提出了一种基于随机森林的学习方法，称为改进的平衡随机森林(improved balanced random forests，IBRF)，通过改变类的分布和对少数类的错误分类施加更高的惩罚来迭代学习最佳特征，并将该方法应用于某银行客户流失数据集。（# Customer churn prediction using improved balanced random forests）Liang Jiafu提出了一种基于梯度提升决策树算法(GBDT)和逻辑回归(LR)算法的用户流失预防模型,对参数特征进行调整,对已有移动用户流失数据进行计算,识别速度和准确率均拥有好的效果[8]。Zengyuan Wu提出 PCA-AdaBoost 模型，采用主成分分析来减少数据维度，使用AdaBoost对多个决策树进行级联，以最小化不平衡数据的影响。该模型在kaggle的电子商务数据集上证明了模型的有效性。（# A PCA-AdaBoost model for E-commerce customer churn prediction）<br>在深度学习领域，Ebru Pekel Ozmen改进卷积神经网络算法，提出了一种新的混合扩展卷积决策树模型(ECDT)，将模型应用于零售业员工流失预测的数据集[10]。[11]提出了一个利用交易数据预测银行客户流失的框架,将GRU和bi-directional LSTM应用于客户流失预测。这一阶段的客户流失方法开始尝试将一些机器学习方法集成起来，或是使用流行的深度学习方法，用更复杂的模型学习和预测流失数据。<br>整体上，客户流失预测以机器学习算法为主，并发展出集成学习等不同模型，深度学习在该领域也有一定应用。预测领域也从电信用户流失逐渐发展到银行信用卡用户流失、电商用户流失等多个领域。</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p><strong>1</strong> 多处需要增加引用文献，例如：Theil’s U 统计量，Correlation Ratio，SHAP（SHapley Additive exPlanations）<br>解决：Theil’s U 统计量，Correlation Ratio可以直接引用CTABGAN<br>          SHAP： [A Unified Approach to Interpreting Model Predictions](<a href=\"https://arxiv.org/abs/1705.07874v2\">[1705.07874v2] A Unified Approach to Interpreting Model Predictions (arxiv.org)</a>)</p>\n<p><strong>2</strong> 论文之中提到的 kaggle 数据集可以给出相应的链接。 @ 正阳 （找链接，试着参考论文里）<br><a href=\"https://www.kaggle.com/datasets/blastchar/telco-customer-churn\">Telco Customer Churn | Kaggle</a><br><a href=\"https://www.kaggle.com/datasets/sakshigoyal7/credit-card-customers\">Credit Card customers | Kaggle</a><br><a href=\"https://tianchi.aliyun.com/dataset/124814\">直播电商数据集_数据集-阿里云天池 (aliyun.com)</a></p>\n<p>3 电信数据集，每个模型找五条</p>\n<p>REAL：</p>\n<p>Male  0 No No  2  Yes  No  DSL  Yes  Yes  No  No  No  No  Month-to-month  Yes  Mailed check  53.85  108.15</p>\n<p>Female  0  No No 2 Yes No Fiber optic No No No No No No Month-to-month Yes Electronic check 70.7 151.65 </p>\n<p>Female 0 No No 8 Yes Yes Fiber optic No No Yes No Yes Yes Month-to-month Yes Electronic check 99.65 820.5</p>\n<p>Male 1 No No 1 No No phone service DSL No No Yes No No Yes Month-to-month Yes Electronic check 39.65 39.65</p>\n<p>Male 0 No No 49 Yes Yes Fiber optic No Yes Yes No Yes Yes Month-to-month Yes Bank transfer(automatic) 103.7 5036.3</p>\n<p>DDPM：<br>‘Male’ ‘1’ ‘Yes’ ‘No’  4.0 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘No’ ‘Yes’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  92.81641778046422 347.77240745447966</p>\n<p> ‘Male’ ‘0’ ‘Yes’ ‘No’ 1.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  95.8100172795924 135.30996333735123</p>\n<p> ‘Female’ ‘0’ ‘No’ ‘No’ 12.89970293412554 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Bank transfer (automatic)’<br>   90.24851621598897 1131.933374934577</p>\n<p> ‘Male’ ‘0’ ‘No’ ‘No’ 15.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘Yes’ ‘No’ ‘No’<br>  ‘No’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Credit card (automatic)’<br>  89.23206588556003 1370.882200227259</p>\n<p> ‘Female’ ‘1’ ‘No’ ‘No’ 1.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘No’ ‘No’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  75.70813933778831 75.53547210781328</p>\n<p>SMOTE：<br>‘Female’ ‘0’ ‘No’ ‘No’ 6.058020806965098 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  89.30362630043531 581.5998093801566</p>\n<p> ‘Female’ ‘0’ ‘Yes’ ‘No’ 34.16695916300951 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘Yes’ ‘No’ ‘Yes’ ‘No’<br>  ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>  102.47469287884003 3553.063238271951</p>\n<p> ‘Female’ ‘0’ ‘No’ ‘No’ 10.409424239667828 ‘Yes’ ‘Yes’ ‘DSL’ ‘No’ ‘No’ ‘No’ ‘No’ ‘No’ ‘Yes’<br>  ‘Month-to-month’ ‘No’ ‘Electronic check’<br>  72.89683257375917 749.7780225143397</p>\n<p> ‘Male’ ‘0’ ‘Yes’ ‘No’ 68.0 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘Yes’ ‘Yes’ ‘Yes’ ‘Yes’<br>  ‘Yes’ ‘Yes’ ‘Two year’ ‘Yes’ ‘Credit card (automatic)’<br>  111.84516691088298 7754.865079775263</p>\n<p> ‘Male’ ‘0’ ‘No’ ‘No’ 57.53490684507468 ‘No’ ‘No phone service’ ‘DSL’ ‘No’ ‘Yes’ ‘Yes’<br>  ‘No’ ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘Yes’ ‘Electronic check’<br>   52.08537000221106 2966.5298068815946</p>\n<p>CTABGAN：<br>‘Female’ ‘1’ ‘Yes’ ‘No’ 25.813646159053306 ‘Yes’ ‘No’ ‘Fiber optic’ ‘No’ ‘Yes’ ‘No’ ‘No’<br>  ‘No’ ‘No’ ‘Month-to-month’ ‘Yes’ ‘Credit card (automatic)’<br>   72.4520499161782 107.12076519599646</p>\n<p> ‘Male’ ‘0’ ‘No’ ‘Yes’ 7.578428442708454 ‘Yes’ ‘No’ ‘DSL’ ‘No’ ‘No’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Month-to-month’ ‘No’ ‘Mailed check’<br>  45.84371280675952 105.69947914250504</p>\n<p> ‘Male’ ‘0’ ‘No’ ‘No’  1.9809866925261472 ‘Yes’ ‘Yes’ ‘Fiber optic’ ‘No’ ‘No’ ‘No’ ‘No’<br>  ‘Yes’ ‘No’ ‘Month-to-month’ ‘Yes’ ‘Bank transfer (automatic)’<br>   81.46474915190095 40.94928790189158</p>\n<p> ‘Female’ ‘1’ ‘No’ ‘Yes’ 26.57383830887195 ‘Yes’ ‘No phone service’ ‘DSL’ ‘Yes’ ‘Yes’<br>  ‘Yes’ ‘No’ ‘Yes’ ‘Yes’ ‘Month-to-month’ ‘No’ ‘Electronic check’<br>   57.69859110911275 781.0754735958174</p>\n<p> ‘Male’ ‘0’ ‘Yes’ ‘No’  28.8168545923753 ‘Yes’ ‘Yes’ ‘DSL’ ‘No’ ‘Yes’ ‘No’ ‘Yes’ ‘Yes’<br>  ‘Yes’ ‘Month-to-month’ ‘No’ ‘Credit card (automatic)’<br>  77.30306219710255 756.2990340865898</p>\n<p>In the field of data mining, there are commonly encountered issues of data imbalance and inadequate protection of user privacy data. These issues can have a detrimental impact on the accuracy of model predictions and the applicability of models in privacy-preserving scenarios. Therefore, the generation of new data has emerged as a prominent solution in addressing these challenges.<br>However, generating high-quality data poses certain challenges in the field of data mining, which primarily deals with structured data characterized by a high number of dimensions and unrelated features.<br>Considering the successful application of diffusion models in tasks such as image generation, this study attempts to apply diffusion models to the task of customer churn prediction.<br>This paper employs Gaussian diffusion models and polynomial diffusion models to generate data for numerical and categorical features in churn data. It also conducts research and analysis on the predictive performance and privacy protection capabilities of these models.<br>We conducted extensive experiments on customer churn data from multiple domains to explore the potential of merging synthetic data with real data for reconstruction.<br>The experimental results indicate that the adoption of the diffusion model enables the generation of high-quality data. Furthermore, the generated data exhibits improvements across various customer churn prediction methods, with a particular advantage observed for weak classifiers. This approach also effectively mitigates the issue of data imbalance.<br>Moreover, the data generated by the diffusion model exhibits a distribution that is closer to real data, thereby possessing potential value in preserving customer privacy.</p>\n"},{"title":"景点","_content":"远：\n>兵马俑 华清池 骊山 秦始皇陵\n\n晚上:\n>大唐不夜城 大唐芙蓉园 钟楼&鼓楼 \n\n城墙\n大雁塔 小雁塔\n~~陕西历史博物馆（只能越20号了 8.14 10点、11点、18点）~~\n碑林博物馆\n\n","source":"_posts/Notes/旅游/景点.md","raw":"---\ntitle: 景点\ncategories:\n  - Notes\n  - 旅游\n---\n远：\n>兵马俑 华清池 骊山 秦始皇陵\n\n晚上:\n>大唐不夜城 大唐芙蓉园 钟楼&鼓楼 \n\n城墙\n大雁塔 小雁塔\n~~陕西历史博物馆（只能越20号了 8.14 10点、11点、18点）~~\n碑林博物馆\n\n","slug":"Notes/旅游/景点","published":1,"date":"2023-09-19T12:47:33.000Z","updated":"2023-09-19T13:32:30.342Z","_id":"clmqcud5y002og8u5ah5th9yl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>远：</p>\n<blockquote>\n<p>兵马俑 华清池 骊山 秦始皇陵</p>\n</blockquote>\n<p>晚上:</p>\n<blockquote>\n<p>大唐不夜城 大唐芙蓉园 钟楼&amp;鼓楼 </p>\n</blockquote>\n<p>城墙<br>大雁塔 小雁塔<br><del>陕西历史博物馆（只能越20号了 8.14 10点、11点、18点）</del><br>碑林博物馆</p>\n","site":{"data":{}},"excerpt":"","more":"<p>远：</p>\n<blockquote>\n<p>兵马俑 华清池 骊山 秦始皇陵</p>\n</blockquote>\n<p>晚上:</p>\n<blockquote>\n<p>大唐不夜城 大唐芙蓉园 钟楼&amp;鼓楼 </p>\n</blockquote>\n<p>城墙<br>大雁塔 小雁塔<br><del>陕西历史博物馆（只能越20号了 8.14 10点、11点、18点）</del><br>碑林博物馆</p>\n"},{"title":"美食","_content":"**1** 回民街、洒金桥（网红景点）可以去逛逛\n\n**2** 早餐：小南门早市\n\n**3** 泡馍和面馆 路边摊就行 赵记羊杂\n\n**4** 夜市：\n未央区六号大街 \n凤城六路和未央路交叉口\n碑林区卧龙巷机关小区\n","source":"_posts/Notes/旅游/美食.md","raw":"---\ntitle: 美食\ncategories:\n  - Notes\n  - 旅游\n---\n**1** 回民街、洒金桥（网红景点）可以去逛逛\n\n**2** 早餐：小南门早市\n\n**3** 泡馍和面馆 路边摊就行 赵记羊杂\n\n**4** 夜市：\n未央区六号大街 \n凤城六路和未央路交叉口\n碑林区卧龙巷机关小区\n","slug":"Notes/旅游/美食","published":1,"date":"2023-09-19T12:47:33.001Z","updated":"2023-09-19T13:32:30.342Z","_id":"clmqcud5y002pg8u53p5afnw0","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>1</strong> 回民街、洒金桥（网红景点）可以去逛逛</p>\n<p><strong>2</strong> 早餐：小南门早市</p>\n<p><strong>3</strong> 泡馍和面馆 路边摊就行 赵记羊杂</p>\n<p><strong>4</strong> 夜市：<br>未央区六号大街<br>凤城六路和未央路交叉口<br>碑林区卧龙巷机关小区</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>1</strong> 回民街、洒金桥（网红景点）可以去逛逛</p>\n<p><strong>2</strong> 早餐：小南门早市</p>\n<p><strong>3</strong> 泡馍和面馆 路边摊就行 赵记羊杂</p>\n<p><strong>4</strong> 夜市：<br>未央区六号大街<br>凤城六路和未央路交叉口<br>碑林区卧龙巷机关小区</p>\n"},{"title":"西安8.16-8.20","_content":"## 17号\n\n早餐 小南门早市\n\n大雁塔 \n>音乐喷泉 12:00-12:10\n\n大唐不夜城 晚上去\n\n晚上 附近夜市 [[美食]]\n\n大唐芙蓉园 20:00\n## 18号\n\n兵马俑 华清池 骊山 ~~秦始皇陵~~\n\n午晚饭 [[美食]]\n\n## 19号\n\n碑林博物馆\n\n钟楼&鼓楼 **晚上**\n\n晚上 附近夜市\n\n大唐芙蓉园 20:00\n## 20号\n\n小雁塔 西安博物馆\n \n野球帝 livehouse\n\n~~陕西历史博物馆~~\n\n[[景点]]","source":"_posts/Notes/旅游/西安8.16-20.md","raw":"---\ntitle: 西安8.16-8.20\ncategories:\n  - Notes\n  - 旅游\n---\n## 17号\n\n早餐 小南门早市\n\n大雁塔 \n>音乐喷泉 12:00-12:10\n\n大唐不夜城 晚上去\n\n晚上 附近夜市 [[美食]]\n\n大唐芙蓉园 20:00\n## 18号\n\n兵马俑 华清池 骊山 ~~秦始皇陵~~\n\n午晚饭 [[美食]]\n\n## 19号\n\n碑林博物馆\n\n钟楼&鼓楼 **晚上**\n\n晚上 附近夜市\n\n大唐芙蓉园 20:00\n## 20号\n\n小雁塔 西安博物馆\n \n野球帝 livehouse\n\n~~陕西历史博物馆~~\n\n[[景点]]","slug":"Notes/旅游/西安8.16-20","published":1,"date":"2023-09-19T12:47:33.002Z","updated":"2023-09-19T13:32:30.342Z","_id":"clmqcud5z002sg8u56qgs31pn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"17号\"><a href=\"#17号\" class=\"headerlink\" title=\"17号\"></a>17号</h2><p>早餐 小南门早市</p>\n<p>大雁塔 </p>\n<blockquote>\n<p>音乐喷泉 12:00-12:10</p>\n</blockquote>\n<p>大唐不夜城 晚上去</p>\n<p>晚上 附近夜市 [[美食]]</p>\n<p>大唐芙蓉园 20:00</p>\n<h2 id=\"18号\"><a href=\"#18号\" class=\"headerlink\" title=\"18号\"></a>18号</h2><p>兵马俑 华清池 骊山 <del>秦始皇陵</del></p>\n<p>午晚饭 [[美食]]</p>\n<h2 id=\"19号\"><a href=\"#19号\" class=\"headerlink\" title=\"19号\"></a>19号</h2><p>碑林博物馆</p>\n<p>钟楼&amp;鼓楼 <strong>晚上</strong></p>\n<p>晚上 附近夜市</p>\n<p>大唐芙蓉园 20:00</p>\n<h2 id=\"20号\"><a href=\"#20号\" class=\"headerlink\" title=\"20号\"></a>20号</h2><p>小雁塔 西安博物馆</p>\n<p>野球帝 livehouse</p>\n<p><del>陕西历史博物馆</del></p>\n<p>[[景点]]</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"17号\"><a href=\"#17号\" class=\"headerlink\" title=\"17号\"></a>17号</h2><p>早餐 小南门早市</p>\n<p>大雁塔 </p>\n<blockquote>\n<p>音乐喷泉 12:00-12:10</p>\n</blockquote>\n<p>大唐不夜城 晚上去</p>\n<p>晚上 附近夜市 [[美食]]</p>\n<p>大唐芙蓉园 20:00</p>\n<h2 id=\"18号\"><a href=\"#18号\" class=\"headerlink\" title=\"18号\"></a>18号</h2><p>兵马俑 华清池 骊山 <del>秦始皇陵</del></p>\n<p>午晚饭 [[美食]]</p>\n<h2 id=\"19号\"><a href=\"#19号\" class=\"headerlink\" title=\"19号\"></a>19号</h2><p>碑林博物馆</p>\n<p>钟楼&amp;鼓楼 <strong>晚上</strong></p>\n<p>晚上 附近夜市</p>\n<p>大唐芙蓉园 20:00</p>\n<h2 id=\"20号\"><a href=\"#20号\" class=\"headerlink\" title=\"20号\"></a>20号</h2><p>小雁塔 西安博物馆</p>\n<p>野球帝 livehouse</p>\n<p><del>陕西历史博物馆</del></p>\n<p>[[景点]]</p>\n"},{"title":"TODO","_content":"- [x] 大创定级检查 16日\n- [x] OS作业 17日\n- [ ] 软件工程开会 21日\n- [x] 数据库 17日\n- [ ] 六级报名等待候补\n- [x] powershell下7版本，设置主题\n- [ ] 课堂讨论25号\n- [ ] github主页美化\n- [x] 博客翻新\n- [ ] 博客图片问题","source":"_posts/Notes/TODO.md","raw":"---\ntitle: TODO\ncategories:\n  - Notes\n---\n- [x] 大创定级检查 16日\n- [x] OS作业 17日\n- [ ] 软件工程开会 21日\n- [x] 数据库 17日\n- [ ] 六级报名等待候补\n- [x] powershell下7版本，设置主题\n- [ ] 课堂讨论25号\n- [ ] github主页美化\n- [x] 博客翻新\n- [ ] 博客图片问题","slug":"Notes/TODO","published":1,"date":"2023-09-19T12:47:33.006Z","updated":"2023-09-21T01:15:28.185Z","_id":"clmqcudd3002vg8u515n1doob","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 大创定级检查 16日</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> OS作业 17日</li>\n<li><input disabled=\"\" type=\"checkbox\"> 软件工程开会 21日</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据库 17日</li>\n<li><input disabled=\"\" type=\"checkbox\"> 六级报名等待候补</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> powershell下7版本，设置主题</li>\n<li><input disabled=\"\" type=\"checkbox\"> 课堂讨论25号</li>\n<li><input disabled=\"\" type=\"checkbox\"> github主页美化</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 博客翻新</li>\n<li><input disabled=\"\" type=\"checkbox\"> 博客图片问题</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 大创定级检查 16日</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> OS作业 17日</li>\n<li><input disabled=\"\" type=\"checkbox\"> 软件工程开会 21日</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据库 17日</li>\n<li><input disabled=\"\" type=\"checkbox\"> 六级报名等待候补</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> powershell下7版本，设置主题</li>\n<li><input disabled=\"\" type=\"checkbox\"> 课堂讨论25号</li>\n<li><input disabled=\"\" type=\"checkbox\"> github主页美化</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 博客翻新</li>\n<li><input disabled=\"\" type=\"checkbox\"> 博客图片问题</li>\n</ul>\n"},{"title":"PowellShell美化","_content":"下载最新的PowerShell7.x.x\n\n根据oh my posh官网安装，结合网上的博客配置\n[Windows | Oh My Posh](https://ohmyposh.dev/docs/installation/windows)\n[oh-my-posh - 终端个性化工具 - 美化PowerShell / cmd - 好物分享，真香\\~\\_小码农场-小码农的博客-CSDN博客](https://blog.csdn.net/qq_21689457/article/details/129345662)\n\n安装字体\n先是按官方的指令下载不了，后来又成功了，然后根据给的config配置文件更改setting\n![[Pasted image 20230917203623.png]]\n\n根据官网安装主题,修改profile中的代码\n[Themes | Oh My Posh](https://ohmyposh.dev/docs/themes)这里有所有主题，更换时把profile的id改一下就行","source":"_posts/Notes/PowerShell美化.md","raw":"---\ntitle: PowellShell美化\ncategories:\n  - Notes\n---\n下载最新的PowerShell7.x.x\n\n根据oh my posh官网安装，结合网上的博客配置\n[Windows | Oh My Posh](https://ohmyposh.dev/docs/installation/windows)\n[oh-my-posh - 终端个性化工具 - 美化PowerShell / cmd - 好物分享，真香\\~\\_小码农场-小码农的博客-CSDN博客](https://blog.csdn.net/qq_21689457/article/details/129345662)\n\n安装字体\n先是按官方的指令下载不了，后来又成功了，然后根据给的config配置文件更改setting\n![[Pasted image 20230917203623.png]]\n\n根据官网安装主题,修改profile中的代码\n[Themes | Oh My Posh](https://ohmyposh.dev/docs/themes)这里有所有主题，更换时把profile的id改一下就行","slug":"Notes/PowerShell美化","published":1,"date":"2023-09-19T12:47:33.004Z","updated":"2023-09-19T13:32:30.601Z","_id":"clmqcudd4002xg8u5clc2ah85","comments":1,"layout":"post","photos":[],"link":"","content":"<p>下载最新的PowerShell7.x.x</p>\n<p>根据oh my posh官网安装，结合网上的博客配置<br><a href=\"https://ohmyposh.dev/docs/installation/windows\">Windows | Oh My Posh</a><br><a href=\"https://blog.csdn.net/qq_21689457/article/details/129345662\">oh-my-posh - 终端个性化工具 - 美化PowerShell &#x2F; cmd - 好物分享，真香~_小码农场-小码农的博客-CSDN博客</a></p>\n<p>安装字体<br>先是按官方的指令下载不了，后来又成功了，然后根据给的config配置文件更改setting<br>![[Pasted image 20230917203623.png]]</p>\n<p>根据官网安装主题,修改profile中的代码<br><a href=\"https://ohmyposh.dev/docs/themes\">Themes | Oh My Posh</a>这里有所有主题，更换时把profile的id改一下就行</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下载最新的PowerShell7.x.x</p>\n<p>根据oh my posh官网安装，结合网上的博客配置<br><a href=\"https://ohmyposh.dev/docs/installation/windows\">Windows | Oh My Posh</a><br><a href=\"https://blog.csdn.net/qq_21689457/article/details/129345662\">oh-my-posh - 终端个性化工具 - 美化PowerShell &#x2F; cmd - 好物分享，真香~_小码农场-小码农的博客-CSDN博客</a></p>\n<p>安装字体<br>先是按官方的指令下载不了，后来又成功了，然后根据给的config配置文件更改setting<br>![[Pasted image 20230917203623.png]]</p>\n<p>根据官网安装主题,修改profile中的代码<br><a href=\"https://ohmyposh.dev/docs/themes\">Themes | Oh My Posh</a>这里有所有主题，更换时把profile的id改一下就行</p>\n"},{"title":"数据库","_content":"成绩：20期中+60期末+10笔记+10作业\n\n笔记本：一周交一次\n\n\n---\n\n## 9.11\n**concept:**\n- database(DB):数据库，是一个文件，有关联的数据的集合\n- database management system(DBMS):数据库管理系统，包含程序处理DB中的数据\n- database system(DBS):=DB+DBMS+User\n- database application system(DBAS):DB+DBMS+Application programs+User","source":"_posts/Notes/课程/数据库.md","raw":"---\ntitle: 数据库\ncategories:\n  - Notes\n  - 课程\n---\n成绩：20期中+60期末+10笔记+10作业\n\n笔记本：一周交一次\n\n\n---\n\n## 9.11\n**concept:**\n- database(DB):数据库，是一个文件，有关联的数据的集合\n- database management system(DBMS):数据库管理系统，包含程序处理DB中的数据\n- database system(DBS):=DB+DBMS+User\n- database application system(DBAS):DB+DBMS+Application programs+User","slug":"Notes/课程/数据库","published":1,"date":"2023-09-19T12:47:32.983Z","updated":"2023-09-19T13:55:15.528Z","_id":"clmqdnm5j0001fgu57dneextf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>成绩：20期中+60期末+10笔记+10作业</p>\n<p>笔记本：一周交一次</p>\n<hr>\n<h2 id=\"9-11\"><a href=\"#9-11\" class=\"headerlink\" title=\"9.11\"></a>9.11</h2><p><strong>concept:</strong></p>\n<ul>\n<li>database(DB):数据库，是一个文件，有关联的数据的集合</li>\n<li>database management system(DBMS):数据库管理系统，包含程序处理DB中的数据</li>\n<li>database system(DBS):&#x3D;DB+DBMS+User</li>\n<li>database application system(DBAS):DB+DBMS+Application programs+User</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>成绩：20期中+60期末+10笔记+10作业</p>\n<p>笔记本：一周交一次</p>\n<hr>\n<h2 id=\"9-11\"><a href=\"#9-11\" class=\"headerlink\" title=\"9.11\"></a>9.11</h2><p><strong>concept:</strong></p>\n<ul>\n<li>database(DB):数据库，是一个文件，有关联的数据的集合</li>\n<li>database management system(DBMS):数据库管理系统，包含程序处理DB中的数据</li>\n<li>database system(DBS):&#x3D;DB+DBMS+User</li>\n<li>database application system(DBAS):DB+DBMS+Application programs+User</li>\n</ul>\n"},{"title":"智能计算系统","_content":"50期末+30课程编程作业+10大作业+10平时\n\n---\n\n智能计算系统：智能的物质载体\n- 集成CPU和智能芯片的**异构系统**\n- 面向开发者的智能计算**编程环境**\n","source":"_posts/Notes/课程/智能计算系统.md","raw":"---\ntitle: 智能计算系统\ncategories:\n  - Notes\n  - 课程\n---\n50期末+30课程编程作业+10大作业+10平时\n\n---\n\n智能计算系统：智能的物质载体\n- 集成CPU和智能芯片的**异构系统**\n- 面向开发者的智能计算**编程环境**\n","slug":"Notes/课程/智能计算系统","published":1,"date":"2023-09-19T12:47:32.985Z","updated":"2023-09-21T00:40:07.847Z","_id":"clmqdnm5k0002fgu5cmgo29rq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>50期末+30课程编程作业+10大作业+10平时</p>\n<hr>\n<p>智能计算系统：智能的物质载体</p>\n<ul>\n<li>集成CPU和智能芯片的<strong>异构系统</strong></li>\n<li>面向开发者的智能计算<strong>编程环境</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>50期末+30课程编程作业+10大作业+10平时</p>\n<hr>\n<p>智能计算系统：智能的物质载体</p>\n<ul>\n<li>集成CPU和智能芯片的<strong>异构系统</strong></li>\n<li>面向开发者的智能计算<strong>编程环境</strong></li>\n</ul>\n"},{"title":"作业1 课后阅读","_content":"问题1：时至今日的软件开发过程中是否还存在软件危机中存在的现象？如果存在，软件工程的方法能否解决？未来的AI能否解决？\n\n存在。软件危机中主要存在以下现象：\n1. 对软件开发成本和进度的估计常常很不准确\n2. 用户对“已完成的”软件系统不满意\n3. 软件常常是不可维护的\n4. 软件通常没有适当的文档资料\n随着人们使用软件工程的方法进行软件开发，这些问题逐渐减少，但不会完全消灭。\n利用软件工程的方法可以有效解决这些问题，软件工程采用工程的概念、原理、技术和方法来开发和维护软件，进行详细需求分析和规划，使用合适的设计模式和架构，使用版本控制系统等特点可以有效解决上述问题。随着AI的发展，未来AI很有可能具备自主设计程序的能力，如果AI能实现正确理解客户需求，合理开发软件功能，自动维护软件运行，则可以开发出优质软件。\n\n\n---\n\n\n问题2：软件工程的知识体系中，你认为哪几个环节与软件质量相关？\n\n需求分析：只有正确理解客户的需求，才能做出好的软件\n软件稳定性和可维护性：当软件在使用中经常出现问题，或需要频繁投入人力进行维护时，意味着软件质量不高。\n软件代码的可读性：高可读性的代码可以使软件在维护和升级时更方便。\n经过测试：软件需要经过大量的测试才能保证质量。","source":"_posts/Notes/课程/软件工程/作业1 课后阅读.md","raw":"---\ntitle: 作业1 课后阅读\ncategories:\n  - Notes\n  - 课程\n  - 软件工程\n---\n问题1：时至今日的软件开发过程中是否还存在软件危机中存在的现象？如果存在，软件工程的方法能否解决？未来的AI能否解决？\n\n存在。软件危机中主要存在以下现象：\n1. 对软件开发成本和进度的估计常常很不准确\n2. 用户对“已完成的”软件系统不满意\n3. 软件常常是不可维护的\n4. 软件通常没有适当的文档资料\n随着人们使用软件工程的方法进行软件开发，这些问题逐渐减少，但不会完全消灭。\n利用软件工程的方法可以有效解决这些问题，软件工程采用工程的概念、原理、技术和方法来开发和维护软件，进行详细需求分析和规划，使用合适的设计模式和架构，使用版本控制系统等特点可以有效解决上述问题。随着AI的发展，未来AI很有可能具备自主设计程序的能力，如果AI能实现正确理解客户需求，合理开发软件功能，自动维护软件运行，则可以开发出优质软件。\n\n\n---\n\n\n问题2：软件工程的知识体系中，你认为哪几个环节与软件质量相关？\n\n需求分析：只有正确理解客户的需求，才能做出好的软件\n软件稳定性和可维护性：当软件在使用中经常出现问题，或需要频繁投入人力进行维护时，意味着软件质量不高。\n软件代码的可读性：高可读性的代码可以使软件在维护和升级时更方便。\n经过测试：软件需要经过大量的测试才能保证质量。","slug":"Notes/课程/软件工程/作业1 课后阅读","published":1,"date":"2023-09-19T12:47:32.993Z","updated":"2023-09-19T13:55:15.528Z","_id":"clmqdnm5k0003fgu5ah7j0und","comments":1,"layout":"post","photos":[],"link":"","content":"<p>问题1：时至今日的软件开发过程中是否还存在软件危机中存在的现象？如果存在，软件工程的方法能否解决？未来的AI能否解决？</p>\n<p>存在。软件危机中主要存在以下现象：</p>\n<ol>\n<li>对软件开发成本和进度的估计常常很不准确</li>\n<li>用户对“已完成的”软件系统不满意</li>\n<li>软件常常是不可维护的</li>\n<li>软件通常没有适当的文档资料<br>随着人们使用软件工程的方法进行软件开发，这些问题逐渐减少，但不会完全消灭。<br>利用软件工程的方法可以有效解决这些问题，软件工程采用工程的概念、原理、技术和方法来开发和维护软件，进行详细需求分析和规划，使用合适的设计模式和架构，使用版本控制系统等特点可以有效解决上述问题。随着AI的发展，未来AI很有可能具备自主设计程序的能力，如果AI能实现正确理解客户需求，合理开发软件功能，自动维护软件运行，则可以开发出优质软件。</li>\n</ol>\n<hr>\n<p>问题2：软件工程的知识体系中，你认为哪几个环节与软件质量相关？</p>\n<p>需求分析：只有正确理解客户的需求，才能做出好的软件<br>软件稳定性和可维护性：当软件在使用中经常出现问题，或需要频繁投入人力进行维护时，意味着软件质量不高。<br>软件代码的可读性：高可读性的代码可以使软件在维护和升级时更方便。<br>经过测试：软件需要经过大量的测试才能保证质量。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题1：时至今日的软件开发过程中是否还存在软件危机中存在的现象？如果存在，软件工程的方法能否解决？未来的AI能否解决？</p>\n<p>存在。软件危机中主要存在以下现象：</p>\n<ol>\n<li>对软件开发成本和进度的估计常常很不准确</li>\n<li>用户对“已完成的”软件系统不满意</li>\n<li>软件常常是不可维护的</li>\n<li>软件通常没有适当的文档资料<br>随着人们使用软件工程的方法进行软件开发，这些问题逐渐减少，但不会完全消灭。<br>利用软件工程的方法可以有效解决这些问题，软件工程采用工程的概念、原理、技术和方法来开发和维护软件，进行详细需求分析和规划，使用合适的设计模式和架构，使用版本控制系统等特点可以有效解决上述问题。随着AI的发展，未来AI很有可能具备自主设计程序的能力，如果AI能实现正确理解客户需求，合理开发软件功能，自动维护软件运行，则可以开发出优质软件。</li>\n</ol>\n<hr>\n<p>问题2：软件工程的知识体系中，你认为哪几个环节与软件质量相关？</p>\n<p>需求分析：只有正确理解客户的需求，才能做出好的软件<br>软件稳定性和可维护性：当软件在使用中经常出现问题，或需要频繁投入人力进行维护时，意味着软件质量不高。<br>软件代码的可读性：高可读性的代码可以使软件在维护和升级时更方便。<br>经过测试：软件需要经过大量的测试才能保证质量。</p>\n"},{"title":"操作系统","_content":"老师声音小，需要坐前排\n\n40分平时作业（gitee），60分期末\n\nTODO：\n- [x] 加入gitee仓库\n\n\n\n---\n","source":"_posts/Notes/课程/操作系统/操作系统.md","raw":"---\ntitle: 操作系统\ncategories:\n  - Notes\n  - 课程\n  - 操作系统\n---\n老师声音小，需要坐前排\n\n40分平时作业（gitee），60分期末\n\nTODO：\n- [x] 加入gitee仓库\n\n\n\n---\n","slug":"Notes/课程/操作系统/操作系统","published":1,"date":"2023-09-19T12:47:32.989Z","updated":"2023-09-19T13:55:15.528Z","_id":"clmqdnm5k0004fgu5aftsh4ig","comments":1,"layout":"post","photos":[],"link":"","content":"<p>老师声音小，需要坐前排</p>\n<p>40分平时作业（gitee），60分期末</p>\n<p>TODO：</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 加入gitee仓库</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>老师声音小，需要坐前排</p>\n<p>40分平时作业（gitee），60分期末</p>\n<p>TODO：</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 加入gitee仓库</li>\n</ul>\n<hr>\n"},{"title":"Blitz软件","_content":"Blitz是一个软件包，内含一个虚拟机，给操作者提供一个建立操作系统内核的功能\n\n学生将在主机上编辑、编译和链接他们的操作系统内核项目。然后，他们将使用仿真器在虚拟机上执行这些项目。当学生的代码出现错误时，仿真器会显示各种错误信息，学生可以使用仿真器工具进行调试\n\n#### 架构\nCPU 采用 RISC 设计，大致仿照 Sun 的 Sparc 架构。 BLITZ 处理器包含 32 个通用整数寄存器，每个寄存器为 32 位。\n\n处理器有两种执行模式，即 \"系统模式 \"和 \"用户模式\"。内核代码在系统模式下运行，而应用程序则在用户模式下运行。\n\nBLITZ 机器包括两个输入输出设备。第一个是磁盘。仿真器通过主机上的文件来模拟磁盘。第二个 I/O 设备是终端，仿真器通常将终端输入/输出直接传递到主机的用户界面，这样学生就可以直接与运行中的 BLITZ 代码交互。\n\n该架构还包括一个 \"trap \"指令，用户程序可以执行该指令。陷阱指令允许用户进程进入内核。\n\n调试器内置于模拟器中，并且是模拟器的组成部分。该模拟器可以在命令行模式下运行，学生可以一次键入一个命令。这些命令可用于调试其 BLITZ 内核代码。\n\nCPU 都在系统模式或用户模式下执行。内核代码在系统模式下执行，而用户级程序在用户模式下执行。任何指令都可以在系统模式下执行，但某些指令是有特权的，因为它们只能在系统模式下执行。特权指令的示例包括更改页表和更改模式本身的指令。\n\n在 BLITZ 架构中，寄存器“r15”指向执行堆栈，该堆栈从较高的内存地址向较低的地址向下增长。\n#### 工具\n- **blitz：** The BLITZ virtual machine emulator and debugger虚拟机模拟器和调试器\n- **asm：** The BLITZ assembler汇编器。\n> 汇编器（Assembler）是将汇编语言翻译为机器语言的程序。一般而言，汇编生成的是目标代码，需要经链接器（Linker）生成可执行代码才可以执行。\n- **lddd：** The BLITZ linker链接器\n- **dumpObj：** A tool to examine BLITZ object and executable files检查blitz对象和可执行文件\n- **diskUtil：** A tool to manipulate the initial file system on the emulated BLITZ disk用于操作模拟 BLITZ 磁盘上的初始文件系统的工具\n- **kpl：** The KPL compiler编译器\n\n#### 模拟器Emulator\n在 Unix 下运行时，您可以通过在 Unix 提示符下键入“blitz”来启动模拟器。模拟器首先读入 BLITZ 程序并将其加载到内存中。通常，BLITZ 可执行文件称为“a.out”，但也可以指定其他名称。模拟器首先从“a.out”读取数据并将其加载到其内部存储器中。实际上，模拟器首先使用“a.out”文件中的字节初始化 BLITZ 机器的主内存\n\nasm 程序是 BLITZ 汇编程序。它以汇编语言程序为输入，生成一个对象文件\n第二个程序（称为 \"ldd\"）是 BLITZ 连接器。它输入一个或多个对象文件，生成一个名为 \"a.out \"的可执行文件。\n\nquit 命令（可缩写为 \"q\"）将终止 BLITZ 模拟器。\n\ngo 指令（可缩写为 \"g\"）用于启动仿真器的执行。一旦开始执行，BLITZ 机器将执行指令，直到检测到错误或 BLITZ 机器执行 \"等待 \"或 \"调试 \"指令为止。\n\n在KPL中，以“.h”结尾的文件称为“头文件”，以“.c”结尾的文件称为“代码文件”。每个包（如HelloWorld）都会有头文件和代码文件。HelloWorld包使用系统包。每当HelloWorld使用的包的头文件发生变化时，HelloWorld必须重新编译。但是，如果系统的代码文件发生变化，则不需要重新编译HelloWorld。\n\n","source":"_posts/Notes/课程/操作系统/Blitz软件.md","raw":"---\ntitle: Blitz软件\ncategories:\n  - Notes\n  - 课程\n  - 操作系统\n---\nBlitz是一个软件包，内含一个虚拟机，给操作者提供一个建立操作系统内核的功能\n\n学生将在主机上编辑、编译和链接他们的操作系统内核项目。然后，他们将使用仿真器在虚拟机上执行这些项目。当学生的代码出现错误时，仿真器会显示各种错误信息，学生可以使用仿真器工具进行调试\n\n#### 架构\nCPU 采用 RISC 设计，大致仿照 Sun 的 Sparc 架构。 BLITZ 处理器包含 32 个通用整数寄存器，每个寄存器为 32 位。\n\n处理器有两种执行模式，即 \"系统模式 \"和 \"用户模式\"。内核代码在系统模式下运行，而应用程序则在用户模式下运行。\n\nBLITZ 机器包括两个输入输出设备。第一个是磁盘。仿真器通过主机上的文件来模拟磁盘。第二个 I/O 设备是终端，仿真器通常将终端输入/输出直接传递到主机的用户界面，这样学生就可以直接与运行中的 BLITZ 代码交互。\n\n该架构还包括一个 \"trap \"指令，用户程序可以执行该指令。陷阱指令允许用户进程进入内核。\n\n调试器内置于模拟器中，并且是模拟器的组成部分。该模拟器可以在命令行模式下运行，学生可以一次键入一个命令。这些命令可用于调试其 BLITZ 内核代码。\n\nCPU 都在系统模式或用户模式下执行。内核代码在系统模式下执行，而用户级程序在用户模式下执行。任何指令都可以在系统模式下执行，但某些指令是有特权的，因为它们只能在系统模式下执行。特权指令的示例包括更改页表和更改模式本身的指令。\n\n在 BLITZ 架构中，寄存器“r15”指向执行堆栈，该堆栈从较高的内存地址向较低的地址向下增长。\n#### 工具\n- **blitz：** The BLITZ virtual machine emulator and debugger虚拟机模拟器和调试器\n- **asm：** The BLITZ assembler汇编器。\n> 汇编器（Assembler）是将汇编语言翻译为机器语言的程序。一般而言，汇编生成的是目标代码，需要经链接器（Linker）生成可执行代码才可以执行。\n- **lddd：** The BLITZ linker链接器\n- **dumpObj：** A tool to examine BLITZ object and executable files检查blitz对象和可执行文件\n- **diskUtil：** A tool to manipulate the initial file system on the emulated BLITZ disk用于操作模拟 BLITZ 磁盘上的初始文件系统的工具\n- **kpl：** The KPL compiler编译器\n\n#### 模拟器Emulator\n在 Unix 下运行时，您可以通过在 Unix 提示符下键入“blitz”来启动模拟器。模拟器首先读入 BLITZ 程序并将其加载到内存中。通常，BLITZ 可执行文件称为“a.out”，但也可以指定其他名称。模拟器首先从“a.out”读取数据并将其加载到其内部存储器中。实际上，模拟器首先使用“a.out”文件中的字节初始化 BLITZ 机器的主内存\n\nasm 程序是 BLITZ 汇编程序。它以汇编语言程序为输入，生成一个对象文件\n第二个程序（称为 \"ldd\"）是 BLITZ 连接器。它输入一个或多个对象文件，生成一个名为 \"a.out \"的可执行文件。\n\nquit 命令（可缩写为 \"q\"）将终止 BLITZ 模拟器。\n\ngo 指令（可缩写为 \"g\"）用于启动仿真器的执行。一旦开始执行，BLITZ 机器将执行指令，直到检测到错误或 BLITZ 机器执行 \"等待 \"或 \"调试 \"指令为止。\n\n在KPL中，以“.h”结尾的文件称为“头文件”，以“.c”结尾的文件称为“代码文件”。每个包（如HelloWorld）都会有头文件和代码文件。HelloWorld包使用系统包。每当HelloWorld使用的包的头文件发生变化时，HelloWorld必须重新编译。但是，如果系统的代码文件发生变化，则不需要重新编译HelloWorld。\n\n","slug":"Notes/课程/操作系统/Blitz软件","published":1,"date":"2023-09-19T12:47:32.988Z","updated":"2023-09-19T13:55:15.528Z","_id":"clmqdnm5m000bfgu5ag8r5zty","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Blitz是一个软件包，内含一个虚拟机，给操作者提供一个建立操作系统内核的功能</p>\n<p>学生将在主机上编辑、编译和链接他们的操作系统内核项目。然后，他们将使用仿真器在虚拟机上执行这些项目。当学生的代码出现错误时，仿真器会显示各种错误信息，学生可以使用仿真器工具进行调试</p>\n<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><p>CPU 采用 RISC 设计，大致仿照 Sun 的 Sparc 架构。 BLITZ 处理器包含 32 个通用整数寄存器，每个寄存器为 32 位。</p>\n<p>处理器有两种执行模式，即 “系统模式 “和 “用户模式”。内核代码在系统模式下运行，而应用程序则在用户模式下运行。</p>\n<p>BLITZ 机器包括两个输入输出设备。第一个是磁盘。仿真器通过主机上的文件来模拟磁盘。第二个 I&#x2F;O 设备是终端，仿真器通常将终端输入&#x2F;输出直接传递到主机的用户界面，这样学生就可以直接与运行中的 BLITZ 代码交互。</p>\n<p>该架构还包括一个 “trap “指令，用户程序可以执行该指令。陷阱指令允许用户进程进入内核。</p>\n<p>调试器内置于模拟器中，并且是模拟器的组成部分。该模拟器可以在命令行模式下运行，学生可以一次键入一个命令。这些命令可用于调试其 BLITZ 内核代码。</p>\n<p>CPU 都在系统模式或用户模式下执行。内核代码在系统模式下执行，而用户级程序在用户模式下执行。任何指令都可以在系统模式下执行，但某些指令是有特权的，因为它们只能在系统模式下执行。特权指令的示例包括更改页表和更改模式本身的指令。</p>\n<p>在 BLITZ 架构中，寄存器“r15”指向执行堆栈，该堆栈从较高的内存地址向较低的地址向下增长。</p>\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li><strong>blitz：</strong> The BLITZ virtual machine emulator and debugger虚拟机模拟器和调试器</li>\n<li><strong>asm：</strong> The BLITZ assembler汇编器。<blockquote>\n<p>汇编器（Assembler）是将汇编语言翻译为机器语言的程序。一般而言，汇编生成的是目标代码，需要经链接器（Linker）生成可执行代码才可以执行。</p>\n</blockquote>\n</li>\n<li><strong>lddd：</strong> The BLITZ linker链接器</li>\n<li><strong>dumpObj：</strong> A tool to examine BLITZ object and executable files检查blitz对象和可执行文件</li>\n<li><strong>diskUtil：</strong> A tool to manipulate the initial file system on the emulated BLITZ disk用于操作模拟 BLITZ 磁盘上的初始文件系统的工具</li>\n<li><strong>kpl：</strong> The KPL compiler编译器</li>\n</ul>\n<h4 id=\"模拟器Emulator\"><a href=\"#模拟器Emulator\" class=\"headerlink\" title=\"模拟器Emulator\"></a>模拟器Emulator</h4><p>在 Unix 下运行时，您可以通过在 Unix 提示符下键入“blitz”来启动模拟器。模拟器首先读入 BLITZ 程序并将其加载到内存中。通常，BLITZ 可执行文件称为“a.out”，但也可以指定其他名称。模拟器首先从“a.out”读取数据并将其加载到其内部存储器中。实际上，模拟器首先使用“a.out”文件中的字节初始化 BLITZ 机器的主内存</p>\n<p>asm 程序是 BLITZ 汇编程序。它以汇编语言程序为输入，生成一个对象文件<br>第二个程序（称为 “ldd”）是 BLITZ 连接器。它输入一个或多个对象文件，生成一个名为 “a.out “的可执行文件。</p>\n<p>quit 命令（可缩写为 “q”）将终止 BLITZ 模拟器。</p>\n<p>go 指令（可缩写为 “g”）用于启动仿真器的执行。一旦开始执行，BLITZ 机器将执行指令，直到检测到错误或 BLITZ 机器执行 “等待 “或 “调试 “指令为止。</p>\n<p>在KPL中，以“.h”结尾的文件称为“头文件”，以“.c”结尾的文件称为“代码文件”。每个包（如HelloWorld）都会有头文件和代码文件。HelloWorld包使用系统包。每当HelloWorld使用的包的头文件发生变化时，HelloWorld必须重新编译。但是，如果系统的代码文件发生变化，则不需要重新编译HelloWorld。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Blitz是一个软件包，内含一个虚拟机，给操作者提供一个建立操作系统内核的功能</p>\n<p>学生将在主机上编辑、编译和链接他们的操作系统内核项目。然后，他们将使用仿真器在虚拟机上执行这些项目。当学生的代码出现错误时，仿真器会显示各种错误信息，学生可以使用仿真器工具进行调试</p>\n<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><p>CPU 采用 RISC 设计，大致仿照 Sun 的 Sparc 架构。 BLITZ 处理器包含 32 个通用整数寄存器，每个寄存器为 32 位。</p>\n<p>处理器有两种执行模式，即 “系统模式 “和 “用户模式”。内核代码在系统模式下运行，而应用程序则在用户模式下运行。</p>\n<p>BLITZ 机器包括两个输入输出设备。第一个是磁盘。仿真器通过主机上的文件来模拟磁盘。第二个 I&#x2F;O 设备是终端，仿真器通常将终端输入&#x2F;输出直接传递到主机的用户界面，这样学生就可以直接与运行中的 BLITZ 代码交互。</p>\n<p>该架构还包括一个 “trap “指令，用户程序可以执行该指令。陷阱指令允许用户进程进入内核。</p>\n<p>调试器内置于模拟器中，并且是模拟器的组成部分。该模拟器可以在命令行模式下运行，学生可以一次键入一个命令。这些命令可用于调试其 BLITZ 内核代码。</p>\n<p>CPU 都在系统模式或用户模式下执行。内核代码在系统模式下执行，而用户级程序在用户模式下执行。任何指令都可以在系统模式下执行，但某些指令是有特权的，因为它们只能在系统模式下执行。特权指令的示例包括更改页表和更改模式本身的指令。</p>\n<p>在 BLITZ 架构中，寄存器“r15”指向执行堆栈，该堆栈从较高的内存地址向较低的地址向下增长。</p>\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li><strong>blitz：</strong> The BLITZ virtual machine emulator and debugger虚拟机模拟器和调试器</li>\n<li><strong>asm：</strong> The BLITZ assembler汇编器。<blockquote>\n<p>汇编器（Assembler）是将汇编语言翻译为机器语言的程序。一般而言，汇编生成的是目标代码，需要经链接器（Linker）生成可执行代码才可以执行。</p>\n</blockquote>\n</li>\n<li><strong>lddd：</strong> The BLITZ linker链接器</li>\n<li><strong>dumpObj：</strong> A tool to examine BLITZ object and executable files检查blitz对象和可执行文件</li>\n<li><strong>diskUtil：</strong> A tool to manipulate the initial file system on the emulated BLITZ disk用于操作模拟 BLITZ 磁盘上的初始文件系统的工具</li>\n<li><strong>kpl：</strong> The KPL compiler编译器</li>\n</ul>\n<h4 id=\"模拟器Emulator\"><a href=\"#模拟器Emulator\" class=\"headerlink\" title=\"模拟器Emulator\"></a>模拟器Emulator</h4><p>在 Unix 下运行时，您可以通过在 Unix 提示符下键入“blitz”来启动模拟器。模拟器首先读入 BLITZ 程序并将其加载到内存中。通常，BLITZ 可执行文件称为“a.out”，但也可以指定其他名称。模拟器首先从“a.out”读取数据并将其加载到其内部存储器中。实际上，模拟器首先使用“a.out”文件中的字节初始化 BLITZ 机器的主内存</p>\n<p>asm 程序是 BLITZ 汇编程序。它以汇编语言程序为输入，生成一个对象文件<br>第二个程序（称为 “ldd”）是 BLITZ 连接器。它输入一个或多个对象文件，生成一个名为 “a.out “的可执行文件。</p>\n<p>quit 命令（可缩写为 “q”）将终止 BLITZ 模拟器。</p>\n<p>go 指令（可缩写为 “g”）用于启动仿真器的执行。一旦开始执行，BLITZ 机器将执行指令，直到检测到错误或 BLITZ 机器执行 “等待 “或 “调试 “指令为止。</p>\n<p>在KPL中，以“.h”结尾的文件称为“头文件”，以“.c”结尾的文件称为“代码文件”。每个包（如HelloWorld）都会有头文件和代码文件。HelloWorld包使用系统包。每当HelloWorld使用的包的头文件发生变化时，HelloWorld必须重新编译。但是，如果系统的代码文件发生变化，则不需要重新编译HelloWorld。</p>\n"},{"title":"大作业 酒店控温计费系统 规划","_content":"- [ ] 需求阶段\n- [ ] 设计阶段\n- [ ] 开发阶段\n- [ ] 测试阶段\n\n#### 需求分析：\n**功能**\n客户：设定空调温度和风速\n房间内控制面板：显示使用空调消费的金额\n打印空调使用的详单（什么时间打开，什么时间关闭）\n空调管理员：监控各房间空调的使用状态\n酒店管理员：生成酒店及房间的空调使用统计报表\n![[Pasted image 20230917104741.png]]\n\n\n#### 实现框架：\n\n**Djiago**\n**MVC模型**：\nMVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。\n![[Pasted image 20230918212851.png]]\n\n![[Pasted image 20230918212903.png]]\n\nDjango 的 MTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同，Django 的 MTV 分别是指：\n\n- M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。\n- T 表示模板 (Template)：负责如何把页面(html)展示给用户。\n- V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。\n![[Pasted image 20230918213533.png]]\n\nDjango + vue\n\n\n\n","source":"_posts/Notes/课程/软件工程/大作业 酒店温控计费系统 规划.md","raw":"---\ntitle: 大作业 酒店控温计费系统 规划\ncategories:\n  - Notes\n  - 课程\n  - 软件工程\n---\n- [ ] 需求阶段\n- [ ] 设计阶段\n- [ ] 开发阶段\n- [ ] 测试阶段\n\n#### 需求分析：\n**功能**\n客户：设定空调温度和风速\n房间内控制面板：显示使用空调消费的金额\n打印空调使用的详单（什么时间打开，什么时间关闭）\n空调管理员：监控各房间空调的使用状态\n酒店管理员：生成酒店及房间的空调使用统计报表\n![[Pasted image 20230917104741.png]]\n\n\n#### 实现框架：\n\n**Djiago**\n**MVC模型**：\nMVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。\n![[Pasted image 20230918212851.png]]\n\n![[Pasted image 20230918212903.png]]\n\nDjango 的 MTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同，Django 的 MTV 分别是指：\n\n- M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。\n- T 表示模板 (Template)：负责如何把页面(html)展示给用户。\n- V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。\n![[Pasted image 20230918213533.png]]\n\nDjango + vue\n\n\n\n","slug":"Notes/课程/软件工程/大作业 酒店温控计费系统 规划","published":1,"date":"2023-09-19T12:47:32.994Z","updated":"2023-09-19T13:55:15.528Z","_id":"clmqdnm5n000cfgu548bv2njh","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 需求阶段</li>\n<li><input disabled=\"\" type=\"checkbox\"> 设计阶段</li>\n<li><input disabled=\"\" type=\"checkbox\"> 开发阶段</li>\n<li><input disabled=\"\" type=\"checkbox\"> 测试阶段</li>\n</ul>\n<h4 id=\"需求分析：\"><a href=\"#需求分析：\" class=\"headerlink\" title=\"需求分析：\"></a>需求分析：</h4><p><strong>功能</strong><br>客户：设定空调温度和风速<br>房间内控制面板：显示使用空调消费的金额<br>打印空调使用的详单（什么时间打开，什么时间关闭）<br>空调管理员：监控各房间空调的使用状态<br>酒店管理员：生成酒店及房间的空调使用统计报表<br>![[Pasted image 20230917104741.png]]</p>\n<h4 id=\"实现框架：\"><a href=\"#实现框架：\" class=\"headerlink\" title=\"实现框架：\"></a>实现框架：</h4><p><strong>Djiago</strong><br><strong>MVC模型</strong>：<br>MVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。<br>![[Pasted image 20230918212851.png]]</p>\n<p>![[Pasted image 20230918212903.png]]</p>\n<p>Django 的 MTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同，Django 的 MTV 分别是指：</p>\n<ul>\n<li>M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。</li>\n<li>T 表示模板 (Template)：负责如何把页面(html)展示给用户。</li>\n<li>V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。<br>![[Pasted image 20230918213533.png]]</li>\n</ul>\n<p>Django + vue</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 需求阶段</li>\n<li><input disabled=\"\" type=\"checkbox\"> 设计阶段</li>\n<li><input disabled=\"\" type=\"checkbox\"> 开发阶段</li>\n<li><input disabled=\"\" type=\"checkbox\"> 测试阶段</li>\n</ul>\n<h4 id=\"需求分析：\"><a href=\"#需求分析：\" class=\"headerlink\" title=\"需求分析：\"></a>需求分析：</h4><p><strong>功能</strong><br>客户：设定空调温度和风速<br>房间内控制面板：显示使用空调消费的金额<br>打印空调使用的详单（什么时间打开，什么时间关闭）<br>空调管理员：监控各房间空调的使用状态<br>酒店管理员：生成酒店及房间的空调使用统计报表<br>![[Pasted image 20230917104741.png]]</p>\n<h4 id=\"实现框架：\"><a href=\"#实现框架：\" class=\"headerlink\" title=\"实现框架：\"></a>实现框架：</h4><p><strong>Djiago</strong><br><strong>MVC模型</strong>：<br>MVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。<br>![[Pasted image 20230918212851.png]]</p>\n<p>![[Pasted image 20230918212903.png]]</p>\n<p>Django 的 MTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同，Django 的 MTV 分别是指：</p>\n<ul>\n<li>M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。</li>\n<li>T 表示模板 (Template)：负责如何把页面(html)展示给用户。</li>\n<li>V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。<br>![[Pasted image 20230918213533.png]]</li>\n</ul>\n<p>Django + vue</p>\n"},{"title":"软件工程","_content":"考核：期中10+平时和作业40+期末50\n\n### 大作业\n\nTODO：\n- [ ] 项目了解与初步计划\n\n\n---\n\n","source":"_posts/Notes/课程/软件工程/软件工程.md","raw":"---\ntitle: 软件工程\ncategories:\n  - Notes\n  - 课程\n  - 软件工程\n---\n考核：期中10+平时和作业40+期末50\n\n### 大作业\n\nTODO：\n- [ ] 项目了解与初步计划\n\n\n---\n\n","slug":"Notes/课程/软件工程/软件工程","published":1,"date":"2023-09-19T12:47:32.995Z","updated":"2023-09-19T13:55:15.528Z","_id":"clmqdnm5n000dfgu51hj4ceun","comments":1,"layout":"post","photos":[],"link":"","content":"<p>考核：期中10+平时和作业40+期末50</p>\n<h3 id=\"大作业\"><a href=\"#大作业\" class=\"headerlink\" title=\"大作业\"></a>大作业</h3><p>TODO：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 项目了解与初步计划</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>考核：期中10+平时和作业40+期末50</p>\n<h3 id=\"大作业\"><a href=\"#大作业\" class=\"headerlink\" title=\"大作业\"></a>大作业</h3><p>TODO：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 项目了解与初步计划</li>\n</ul>\n<hr>\n"},{"title":"神经网络与深度学习","_content":"<u></u>教材：\n- 神经网络与深度学习，邱锡鹏 [神经网络与深度学习](https://nndl.github.io/)\n- 动手学深度学习 阿斯顿·张、李沐\n- **深度学习，Ian Goddfellow**\n\n公开课：\n- 李宏毅：机器学习\n- CS224n\n- CS231n\n\n考核：平时作业80（选够100分的题量）+其他20（随堂考试、问答）\n","source":"_posts/Notes/课程/神经网络与深度学习.md","raw":"---\ntitle: 神经网络与深度学习\ncategories:\n  - Notes\n  - 课程\n---\n<u></u>教材：\n- 神经网络与深度学习，邱锡鹏 [神经网络与深度学习](https://nndl.github.io/)\n- 动手学深度学习 阿斯顿·张、李沐\n- **深度学习，Ian Goddfellow**\n\n公开课：\n- 李宏毅：机器学习\n- CS224n\n- CS231n\n\n考核：平时作业80（选够100分的题量）+其他20（随堂考试、问答）\n","slug":"Notes/课程/神经网络与深度学习","published":1,"date":"2023-09-19T12:47:32.986Z","updated":"2023-09-19T14:03:41.601Z","_id":"clmqdnm5o000kfgu5g5feby1k","comments":1,"layout":"post","photos":[],"link":"","content":"<p><u></u>教材：</p>\n<ul>\n<li>神经网络与深度学习，邱锡鹏 <a href=\"https://nndl.github.io/\">神经网络与深度学习</a></li>\n<li>动手学深度学习 阿斯顿·张、李沐</li>\n<li><strong>深度学习，Ian Goddfellow</strong></li>\n</ul>\n<p>公开课：</p>\n<ul>\n<li>李宏毅：机器学习</li>\n<li>CS224n</li>\n<li>CS231n</li>\n</ul>\n<p>考核：平时作业80（选够100分的题量）+其他20（随堂考试、问答）</p>\n","site":{"data":{}},"excerpt":"","more":"<p><u></u>教材：</p>\n<ul>\n<li>神经网络与深度学习，邱锡鹏 <a href=\"https://nndl.github.io/\">神经网络与深度学习</a></li>\n<li>动手学深度学习 阿斯顿·张、李沐</li>\n<li><strong>深度学习，Ian Goddfellow</strong></li>\n</ul>\n<p>公开课：</p>\n<ul>\n<li>李宏毅：机器学习</li>\n<li>CS224n</li>\n<li>CS231n</li>\n</ul>\n<p>考核：平时作业80（选够100分的题量）+其他20（随堂考试、问答）</p>\n"},{"title":"hexo+Obsidian+github笔记博客","date":"2023-09-19T14:56:29.594Z","_content":"之前的Obsidian笔记都存在本地仓库，github page业已荒废，遂着手将ob笔记同步到blog上并实现自动更新\n\n[使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎](https://zhuanlan.zhihu.com/p/60578464)\n[Obsidian+Git完美维护Hexo博客 - 知乎](https://zhuanlan.zhihu.com/p/554333805)\n### 安装hexo并建立博客\n\n之前的网页源代码已经丢失，于是重新搭建网页\n\n#### 本地建站\n首先新建一个本地文件夹（D:\\\\myweb），在文件夹内打开git bash，安装hexo\n```\nnpm install -g hexo-cli\n```\n然后便可以新建一个网页了\n```text\nhexo init      # 初始化\nnpm install    # 安装组件\nhexo g   # 生成页面\nhexo s   # 启动预览，在本地\n```\n#### 部署到Github Page\n**安装 hexo-deployer-git**\n```text\nnpm install hexo-deployer-git --save\n```\n然后**修改  _ config.yml**  文件末尾的 Deployment 部分\n```text\ndeploy:\n  type: git\n  repository: git@github.com:用户名/用户名.github.io.git\n  branch: main\n```\n完成后运行 `hexo d` 将网站上传部署到 GitHub Pages\n\n### Obsidian实现笔记与博客同步\n[javascript - hexo配合github action 自动构建（多种形式） - 前端与算法 - SegmentFault 思否](https://segmentfault.com/a/1190000040767893)\n[github action 部署 hexo踩坑记录 - 知乎](https://zhuanlan.zhihu.com/p/626270948)\n[GitHub自动部署HEXO个人博客 - 知乎](https://zhuanlan.zhihu.com/p/441558922)\n参考了很多文章，解决了无数bug\n\n#### 前置工作\n首先需要两个GitHub仓库，一个(Obsidian-Notes)用来和Obsidian Git远程连接，同步文章内容，然后在push时使用Github Action执行hexo deploy来将部署好的网页传输到另一个仓库。另一个(zhengyangWang1)用来接受第一个仓库部署好的内容，作为Github Page的仓库。\n\n首先先把本地存放博客框架的文件夹（D:\\\\myweb\\\\web）用git连接到第一个仓库,将内容同步。\n\n#### 给两个仓库配置密钥\n```\nssh-keygen -f github-deploy-key # 在git Bash中执行，生成秘钥\n```\n会在当前目录中生成两个文件：\n- 私钥文件 `github-deploy-key`\n- 公钥文件 `github-deploy-key.pub`\n\n复制私钥文件中**所有内容**，在第一个项目仓库， Settings -> Secrets and variables -> Actions页面上点击New repository secret 添加。\n在 Name 输入框填写 HEXO_DEPLOY_PRI。\n在 Value 输入框填写 github-deploy-key文件**所有内容**\n**注**：所有内容包括第一行和最后一行不太像私钥内容的东西，曾在此踩坑\n\n在第二个仓库Setting-> deploy key中配置公钥。在 Title 输入框填写 HEXO_DEPLOY_PUB，在 Key 输入框填写 github-deploy-key.pub 文件内容，勾选 Allow write access 选项。\n\n#### 配置第一个仓库的Github Actions\n在第一个仓库的本地文件夹找到.github文件，在文件夹下创建workflows/deploy.yml，文件夹名称必须是workflows，这个是github action的文件夹，下面的yml名称可以任意，为执行文件。\n\nyml中的内容如下（改了无数bug）：\n```\nname: deploy  # name任意\n\non:  # 当执行push操作时，触发该action\n  push:\n    branches:\n    - main\n\nenv:\n  GIT_USER: zhengyangWang1  # git的用户名\n  GIT_EMAIL: wangzhengyang@bupt.edu.cn  # git的邮箱\n  THEME_REPO: fluid-dev/hexo-theme-fluid  # 主题\n  THEME_BRANCH: main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest  # 环境，使用Ubuntu\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: main\n\n      - name: 安装 Node  # 这个格式是正确的，使用build那个会报错\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"20.x\"\n\n      - name: 配置 环境变量\n        env:\n          HEXO_DEPLOY_PRI: ${{secrets.HEXO_DEPLOY_PRI}}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$HEXO_DEPLOY_PRI\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.name $GIT_USER\n          git config --global user.email $GIT_EMAIL\n      - name: 安装 Hexo\n        run: |\n          npm install hexo-cli -g\n          npm install\n      \n      - name: 生成静态文件\n        run: |\n          rm -rf .deploy_git  # .deploy_git报错遂添加此行和下一行\n          npm install hexo-deployer-git --save\n          hexo clean\n          hexo generate\n      - name: 部署到Github page\n        run: |\n          hexo deploy\n```\n\n本来还有部署主题文件的代码，但因为deploy时报错所以暂时删去，以后搞清楚作用在处理\n\n配置好后push一下，看到deploy成功方可。\n\n### 配置\n[Hexo + Obsidian + Git 完美的博客部署与编辑方案 - 掘金](https://juejin.cn/post/7120189614660255781)\n[Obsidian+Git完美维护Hexo博客 - 知乎](https://zhuanlan.zhihu.com/p/554333805)\n#### 插件Folder foucs mode\n在ob中打开hexo博客的文件夹，发现文件太多，都是些平时不会浏览的配置文件，所以下载ob插件Folder foucs mode，可以将左侧文件列表聚焦到想要的地方（\\_posts文件夹下）\n\n#### 适配hexo格式\n使用hexo new创建笔记会在文件头加入一段模板，这样才会在部署时部署到网页。在ob中，打开核心插件中的模板功能，并将模板文件夹位置设为Template。新建一个Template文件夹，存放一个hexo文件头模板文件。当创建文件时，点击左侧功能栏中的插入模板即可插入文件头。\n\n#### 自动生成分类\nHexo写日志，通常我们都需要维护一个front-matter信息，包括`title`、`date`。博客多了，为了方便日志分类，一般还需要设置`categories`。\n[GitHub - xu-song/hexo-auto-category: Generate categories automatically for each post in Hexo](https://github.com/xu-song/hexo-auto-category)自动生成categories\n安装：\n```\nnpm install hexo-auto-category --save\n```\n在站点根目录下的`_config.yml`添加:\n```\nauto_category:  \n enable: true  \n depth:\n```\n\n**利用Git钩子函数触发更新:**\n这个插件只有执行`hexo generate`时才会去读取文件夹并更新所有文章的Front-matter分类信息，所以我们可以利用[Git的钩子函数](https://link.zhihu.com/?target=https%3A//git-scm.com/book/zh/v2/%25E8%2587%25AA%25E5%25AE%259A%25E4%25B9%2589-Git-Git-%25E9%2592%25A9%25E5%25AD%2590%23_git_hooks)，在commit的时候先执行下`hexo generate`，这样就能实现自动更新了。\n在`.git/hooks`目录下新建一个`pre-commit`文件，也可以执行`touch pre-commit`命令新建该文件,将如下命令写到文件里\n```bash\n#!/bin/sh\nhexo generate && git add .\n```\n\n#### PicGo+Github图床\n[使用Github+picGo搭建图床，保姆级教程来了 - 知乎](https://zhuanlan.zhihu.com/p/489236769)\n","source":"_posts/Notes/hexo+Obsidian+github博客.md","raw":"---\ntitle: hexo+Obsidian+github笔记博客\ncategories:\n  - Notes\ndate:\ntags:\n---\n之前的Obsidian笔记都存在本地仓库，github page业已荒废，遂着手将ob笔记同步到blog上并实现自动更新\n\n[使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎](https://zhuanlan.zhihu.com/p/60578464)\n[Obsidian+Git完美维护Hexo博客 - 知乎](https://zhuanlan.zhihu.com/p/554333805)\n### 安装hexo并建立博客\n\n之前的网页源代码已经丢失，于是重新搭建网页\n\n#### 本地建站\n首先新建一个本地文件夹（D:\\\\myweb），在文件夹内打开git bash，安装hexo\n```\nnpm install -g hexo-cli\n```\n然后便可以新建一个网页了\n```text\nhexo init      # 初始化\nnpm install    # 安装组件\nhexo g   # 生成页面\nhexo s   # 启动预览，在本地\n```\n#### 部署到Github Page\n**安装 hexo-deployer-git**\n```text\nnpm install hexo-deployer-git --save\n```\n然后**修改  _ config.yml**  文件末尾的 Deployment 部分\n```text\ndeploy:\n  type: git\n  repository: git@github.com:用户名/用户名.github.io.git\n  branch: main\n```\n完成后运行 `hexo d` 将网站上传部署到 GitHub Pages\n\n### Obsidian实现笔记与博客同步\n[javascript - hexo配合github action 自动构建（多种形式） - 前端与算法 - SegmentFault 思否](https://segmentfault.com/a/1190000040767893)\n[github action 部署 hexo踩坑记录 - 知乎](https://zhuanlan.zhihu.com/p/626270948)\n[GitHub自动部署HEXO个人博客 - 知乎](https://zhuanlan.zhihu.com/p/441558922)\n参考了很多文章，解决了无数bug\n\n#### 前置工作\n首先需要两个GitHub仓库，一个(Obsidian-Notes)用来和Obsidian Git远程连接，同步文章内容，然后在push时使用Github Action执行hexo deploy来将部署好的网页传输到另一个仓库。另一个(zhengyangWang1)用来接受第一个仓库部署好的内容，作为Github Page的仓库。\n\n首先先把本地存放博客框架的文件夹（D:\\\\myweb\\\\web）用git连接到第一个仓库,将内容同步。\n\n#### 给两个仓库配置密钥\n```\nssh-keygen -f github-deploy-key # 在git Bash中执行，生成秘钥\n```\n会在当前目录中生成两个文件：\n- 私钥文件 `github-deploy-key`\n- 公钥文件 `github-deploy-key.pub`\n\n复制私钥文件中**所有内容**，在第一个项目仓库， Settings -> Secrets and variables -> Actions页面上点击New repository secret 添加。\n在 Name 输入框填写 HEXO_DEPLOY_PRI。\n在 Value 输入框填写 github-deploy-key文件**所有内容**\n**注**：所有内容包括第一行和最后一行不太像私钥内容的东西，曾在此踩坑\n\n在第二个仓库Setting-> deploy key中配置公钥。在 Title 输入框填写 HEXO_DEPLOY_PUB，在 Key 输入框填写 github-deploy-key.pub 文件内容，勾选 Allow write access 选项。\n\n#### 配置第一个仓库的Github Actions\n在第一个仓库的本地文件夹找到.github文件，在文件夹下创建workflows/deploy.yml，文件夹名称必须是workflows，这个是github action的文件夹，下面的yml名称可以任意，为执行文件。\n\nyml中的内容如下（改了无数bug）：\n```\nname: deploy  # name任意\n\non:  # 当执行push操作时，触发该action\n  push:\n    branches:\n    - main\n\nenv:\n  GIT_USER: zhengyangWang1  # git的用户名\n  GIT_EMAIL: wangzhengyang@bupt.edu.cn  # git的邮箱\n  THEME_REPO: fluid-dev/hexo-theme-fluid  # 主题\n  THEME_BRANCH: main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest  # 环境，使用Ubuntu\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: main\n\n      - name: 安装 Node  # 这个格式是正确的，使用build那个会报错\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"20.x\"\n\n      - name: 配置 环境变量\n        env:\n          HEXO_DEPLOY_PRI: ${{secrets.HEXO_DEPLOY_PRI}}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$HEXO_DEPLOY_PRI\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.name $GIT_USER\n          git config --global user.email $GIT_EMAIL\n      - name: 安装 Hexo\n        run: |\n          npm install hexo-cli -g\n          npm install\n      \n      - name: 生成静态文件\n        run: |\n          rm -rf .deploy_git  # .deploy_git报错遂添加此行和下一行\n          npm install hexo-deployer-git --save\n          hexo clean\n          hexo generate\n      - name: 部署到Github page\n        run: |\n          hexo deploy\n```\n\n本来还有部署主题文件的代码，但因为deploy时报错所以暂时删去，以后搞清楚作用在处理\n\n配置好后push一下，看到deploy成功方可。\n\n### 配置\n[Hexo + Obsidian + Git 完美的博客部署与编辑方案 - 掘金](https://juejin.cn/post/7120189614660255781)\n[Obsidian+Git完美维护Hexo博客 - 知乎](https://zhuanlan.zhihu.com/p/554333805)\n#### 插件Folder foucs mode\n在ob中打开hexo博客的文件夹，发现文件太多，都是些平时不会浏览的配置文件，所以下载ob插件Folder foucs mode，可以将左侧文件列表聚焦到想要的地方（\\_posts文件夹下）\n\n#### 适配hexo格式\n使用hexo new创建笔记会在文件头加入一段模板，这样才会在部署时部署到网页。在ob中，打开核心插件中的模板功能，并将模板文件夹位置设为Template。新建一个Template文件夹，存放一个hexo文件头模板文件。当创建文件时，点击左侧功能栏中的插入模板即可插入文件头。\n\n#### 自动生成分类\nHexo写日志，通常我们都需要维护一个front-matter信息，包括`title`、`date`。博客多了，为了方便日志分类，一般还需要设置`categories`。\n[GitHub - xu-song/hexo-auto-category: Generate categories automatically for each post in Hexo](https://github.com/xu-song/hexo-auto-category)自动生成categories\n安装：\n```\nnpm install hexo-auto-category --save\n```\n在站点根目录下的`_config.yml`添加:\n```\nauto_category:  \n enable: true  \n depth:\n```\n\n**利用Git钩子函数触发更新:**\n这个插件只有执行`hexo generate`时才会去读取文件夹并更新所有文章的Front-matter分类信息，所以我们可以利用[Git的钩子函数](https://link.zhihu.com/?target=https%3A//git-scm.com/book/zh/v2/%25E8%2587%25AA%25E5%25AE%259A%25E4%25B9%2589-Git-Git-%25E9%2592%25A9%25E5%25AD%2590%23_git_hooks)，在commit的时候先执行下`hexo generate`，这样就能实现自动更新了。\n在`.git/hooks`目录下新建一个`pre-commit`文件，也可以执行`touch pre-commit`命令新建该文件,将如下命令写到文件里\n```bash\n#!/bin/sh\nhexo generate && git add .\n```\n\n#### PicGo+Github图床\n[使用Github+picGo搭建图床，保姆级教程来了 - 知乎](https://zhuanlan.zhihu.com/p/489236769)\n","slug":"Notes/hexo+Obsidian+github博客","published":1,"updated":"2023-09-20T15:43:05.076Z","_id":"clmqfyl7x0000usu5em8n6qku","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前的Obsidian笔记都存在本地仓库，github page业已荒废，遂着手将ob笔记同步到blog上并实现自动更新</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎</a><br><a href=\"https://zhuanlan.zhihu.com/p/554333805\">Obsidian+Git完美维护Hexo博客 - 知乎</a></p>\n<h3 id=\"安装hexo并建立博客\"><a href=\"#安装hexo并建立博客\" class=\"headerlink\" title=\"安装hexo并建立博客\"></a>安装hexo并建立博客</h3><p>之前的网页源代码已经丢失，于是重新搭建网页</p>\n<h4 id=\"本地建站\"><a href=\"#本地建站\" class=\"headerlink\" title=\"本地建站\"></a>本地建站</h4><p>首先新建一个本地文件夹（D:\\myweb），在文件夹内打开git bash，安装hexo</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">npm install -g hexo-<span class=\"hljs-keyword\">cli</span><br></code></pre></td></tr></table></figure>\n<p>然后便可以新建一个网页了</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">hexo init      # 初始化<br>npm install    # 安装组件<br>hexo g   # 生成页面<br>hexo s   # 启动预览，在本地<br></code></pre></td></tr></table></figure>\n<h4 id=\"部署到Github-Page\"><a href=\"#部署到Github-Page\" class=\"headerlink\" title=\"部署到Github Page\"></a>部署到Github Page</h4><p><strong>安装 hexo-deployer-git</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>\n<p>然后<strong>修改  _ config.yml</strong>  文件末尾的 Deployment 部分</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">deploy:<br>  type: git<br>  repository: git@github.com:用户名/用户名.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure>\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages</p>\n<h3 id=\"Obsidian实现笔记与博客同步\"><a href=\"#Obsidian实现笔记与博客同步\" class=\"headerlink\" title=\"Obsidian实现笔记与博客同步\"></a>Obsidian实现笔记与博客同步</h3><p><a href=\"https://segmentfault.com/a/1190000040767893\">javascript - hexo配合github action 自动构建（多种形式） - 前端与算法 - SegmentFault 思否</a><br><a href=\"https://zhuanlan.zhihu.com/p/626270948\">github action 部署 hexo踩坑记录 - 知乎</a><br><a href=\"https://zhuanlan.zhihu.com/p/441558922\">GitHub自动部署HEXO个人博客 - 知乎</a><br>参考了很多文章，解决了无数bug</p>\n<h4 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h4><p>首先需要两个GitHub仓库，一个(Obsidian-Notes)用来和Obsidian Git远程连接，同步文章内容，然后在push时使用Github Action执行hexo deploy来将部署好的网页传输到另一个仓库。另一个(zhengyangWang1)用来接受第一个仓库部署好的内容，作为Github Page的仓库。</p>\n<p>首先先把本地存放博客框架的文件夹（D:\\myweb\\web）用git连接到第一个仓库,将内容同步。</p>\n<h4 id=\"给两个仓库配置密钥\"><a href=\"#给两个仓库配置密钥\" class=\"headerlink\" title=\"给两个仓库配置密钥\"></a>给两个仓库配置密钥</h4><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\">ssh-keygen -f github-deploy-<span class=\"hljs-built_in\">key</span> <span class=\"hljs-meta\"># 在git Bash中执行，生成秘钥</span><br></code></pre></td></tr></table></figure>\n<p>会在当前目录中生成两个文件：</p>\n<ul>\n<li>私钥文件 <code>github-deploy-key</code></li>\n<li>公钥文件 <code>github-deploy-key.pub</code></li>\n</ul>\n<p>复制私钥文件中<strong>所有内容</strong>，在第一个项目仓库， Settings -&gt; Secrets and variables -&gt; Actions页面上点击New repository secret 添加。<br>在 Name 输入框填写 HEXO_DEPLOY_PRI。<br>在 Value 输入框填写 github-deploy-key文件<strong>所有内容</strong><br><strong>注</strong>：所有内容包括第一行和最后一行不太像私钥内容的东西，曾在此踩坑</p>\n<p>在第二个仓库Setting-&gt; deploy key中配置公钥。在 Title 输入框填写 HEXO_DEPLOY_PUB，在 Key 输入框填写 github-deploy-key.pub 文件内容，勾选 Allow write access 选项。</p>\n<h4 id=\"配置第一个仓库的Github-Actions\"><a href=\"#配置第一个仓库的Github-Actions\" class=\"headerlink\" title=\"配置第一个仓库的Github Actions\"></a>配置第一个仓库的Github Actions</h4><p>在第一个仓库的本地文件夹找到.github文件，在文件夹下创建workflows&#x2F;deploy.yml，文件夹名称必须是workflows，这个是github action的文件夹，下面的yml名称可以任意，为执行文件。</p>\n<p>yml中的内容如下（改了无数bug）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">deploy</span>  <span class=\"hljs-comment\"># name任意</span><br><br><span class=\"hljs-attr\">on:</span>  <span class=\"hljs-comment\"># 当执行push操作时，触发该action</span><br>  <span class=\"hljs-attr\">push:</span><br>    <span class=\"hljs-attr\">branches:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span><br><br><span class=\"hljs-attr\">env:</span><br>  <span class=\"hljs-attr\">GIT_USER:</span> <span class=\"hljs-string\">zhengyangWang1</span>  <span class=\"hljs-comment\"># git的用户名</span><br>  <span class=\"hljs-attr\">GIT_EMAIL:</span> <span class=\"hljs-string\">wangzhengyang@bupt.edu.cn</span>  <span class=\"hljs-comment\"># git的邮箱</span><br>  <span class=\"hljs-attr\">THEME_REPO:</span> <span class=\"hljs-string\">fluid-dev/hexo-theme-fluid</span>  <span class=\"hljs-comment\"># 主题</span><br>  <span class=\"hljs-attr\">THEME_BRANCH:</span> <span class=\"hljs-string\">main</span><br><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">deploy:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>  <span class=\"hljs-comment\"># 环境，使用Ubuntu</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">ref:</span> <span class=\"hljs-string\">main</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">安装</span> <span class=\"hljs-string\">Node</span>  <span class=\"hljs-comment\"># 这个格式是正确的，使用build那个会报错</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v3</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-string\">&quot;20.x&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">配置</span> <span class=\"hljs-string\">环境变量</span><br>        <span class=\"hljs-attr\">env:</span><br>          <span class=\"hljs-attr\">HEXO_DEPLOY_PRI:</span> <span class=\"hljs-string\">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          mkdir -p ~/.ssh/</span><br><span class=\"hljs-string\">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class=\"hljs-string\">          chmod 600 ~/.ssh/id_rsa</span><br><span class=\"hljs-string\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class=\"hljs-string\">          git config --global user.name $GIT_USER</span><br><span class=\"hljs-string\">          git config --global user.email $GIT_EMAIL</span><br><span class=\"hljs-string\"></span>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">安装</span> <span class=\"hljs-string\">Hexo</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          npm install hexo-cli -g</span><br><span class=\"hljs-string\">          npm install</span><br><span class=\"hljs-string\"></span>      <br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">生成静态文件</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          rm -rf .deploy_git  # .deploy_git报错遂添加此行和下一行</span><br><span class=\"hljs-string\">          npm install hexo-deployer-git --save</span><br><span class=\"hljs-string\">          hexo clean</span><br><span class=\"hljs-string\">          hexo generate</span><br><span class=\"hljs-string\"></span>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">部署到Github</span> <span class=\"hljs-string\">page</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br>          <span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">deploy</span><br></code></pre></td></tr></table></figure>\n\n<p>本来还有部署主题文件的代码，但因为deploy时报错所以暂时删去，以后搞清楚作用在处理</p>\n<p>配置好后push一下，看到deploy成功方可。</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p><a href=\"https://juejin.cn/post/7120189614660255781\">Hexo + Obsidian + Git 完美的博客部署与编辑方案 - 掘金</a><br><a href=\"https://zhuanlan.zhihu.com/p/554333805\">Obsidian+Git完美维护Hexo博客 - 知乎</a></p>\n<h4 id=\"插件Folder-foucs-mode\"><a href=\"#插件Folder-foucs-mode\" class=\"headerlink\" title=\"插件Folder foucs mode\"></a>插件Folder foucs mode</h4><p>在ob中打开hexo博客的文件夹，发现文件太多，都是些平时不会浏览的配置文件，所以下载ob插件Folder foucs mode，可以将左侧文件列表聚焦到想要的地方（_posts文件夹下）</p>\n<h4 id=\"适配hexo格式\"><a href=\"#适配hexo格式\" class=\"headerlink\" title=\"适配hexo格式\"></a>适配hexo格式</h4><p>使用hexo new创建笔记会在文件头加入一段模板，这样才会在部署时部署到网页。在ob中，打开核心插件中的模板功能，并将模板文件夹位置设为Template。新建一个Template文件夹，存放一个hexo文件头模板文件。当创建文件时，点击左侧功能栏中的插入模板即可插入文件头。</p>\n<h4 id=\"自动生成分类\"><a href=\"#自动生成分类\" class=\"headerlink\" title=\"自动生成分类\"></a>自动生成分类</h4><p>Hexo写日志，通常我们都需要维护一个front-matter信息，包括<code>title</code>、<code>date</code>。博客多了，为了方便日志分类，一般还需要设置<code>categories</code>。<br><a href=\"https://github.com/xu-song/hexo-auto-category\">GitHub - xu-song&#x2F;hexo-auto-category: Generate categories automatically for each post in Hexo</a>自动生成categories<br>安装：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">npm install hexo-auto-category <span class=\"hljs-attr\">--save</span><br></code></pre></td></tr></table></figure>\n<p>在站点根目录下的<code>_config.yml</code>添加:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">auto_category:</span>  <br> <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>  <br> <span class=\"hljs-attr\">depth:</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>利用Git钩子函数触发更新:</strong><br>这个插件只有执行<code>hexo generate</code>时才会去读取文件夹并更新所有文章的Front-matter分类信息，所以我们可以利用<a href=\"https://link.zhihu.com/?target=https://git-scm.com/book/zh/v2/%25E8%2587%25AA%25E5%25AE%259A%25E4%25B9%2589-Git-Git-%25E9%2592%25A9%25E5%25AD%2590%23_git_hooks\">Git的钩子函数</a>，在commit的时候先执行下<code>hexo generate</code>，这样就能实现自动更新了。<br>在<code>.git/hooks</code>目录下新建一个<code>pre-commit</code>文件，也可以执行<code>touch pre-commit</code>命令新建该文件,将如下命令写到文件里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br>hexo generate &amp;&amp; git add .<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"PicGo-Github图床\"><a href=\"#PicGo-Github图床\" class=\"headerlink\" title=\"PicGo+Github图床\"></a>PicGo+Github图床</h4><p><a href=\"https://zhuanlan.zhihu.com/p/489236769\">使用Github+picGo搭建图床，保姆级教程来了 - 知乎</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前的Obsidian笔记都存在本地仓库，github page业已荒废，遂着手将ob笔记同步到blog上并实现自动更新</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎</a><br><a href=\"https://zhuanlan.zhihu.com/p/554333805\">Obsidian+Git完美维护Hexo博客 - 知乎</a></p>\n<h3 id=\"安装hexo并建立博客\"><a href=\"#安装hexo并建立博客\" class=\"headerlink\" title=\"安装hexo并建立博客\"></a>安装hexo并建立博客</h3><p>之前的网页源代码已经丢失，于是重新搭建网页</p>\n<h4 id=\"本地建站\"><a href=\"#本地建站\" class=\"headerlink\" title=\"本地建站\"></a>本地建站</h4><p>首先新建一个本地文件夹（D:\\myweb），在文件夹内打开git bash，安装hexo</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">npm install -g hexo-<span class=\"hljs-keyword\">cli</span><br></code></pre></td></tr></table></figure>\n<p>然后便可以新建一个网页了</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">hexo init      # 初始化<br>npm install    # 安装组件<br>hexo g   # 生成页面<br>hexo s   # 启动预览，在本地<br></code></pre></td></tr></table></figure>\n<h4 id=\"部署到Github-Page\"><a href=\"#部署到Github-Page\" class=\"headerlink\" title=\"部署到Github Page\"></a>部署到Github Page</h4><p><strong>安装 hexo-deployer-git</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>\n<p>然后<strong>修改  _ config.yml</strong>  文件末尾的 Deployment 部分</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">deploy:<br>  type: git<br>  repository: git@github.com:用户名/用户名.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure>\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages</p>\n<h3 id=\"Obsidian实现笔记与博客同步\"><a href=\"#Obsidian实现笔记与博客同步\" class=\"headerlink\" title=\"Obsidian实现笔记与博客同步\"></a>Obsidian实现笔记与博客同步</h3><p><a href=\"https://segmentfault.com/a/1190000040767893\">javascript - hexo配合github action 自动构建（多种形式） - 前端与算法 - SegmentFault 思否</a><br><a href=\"https://zhuanlan.zhihu.com/p/626270948\">github action 部署 hexo踩坑记录 - 知乎</a><br><a href=\"https://zhuanlan.zhihu.com/p/441558922\">GitHub自动部署HEXO个人博客 - 知乎</a><br>参考了很多文章，解决了无数bug</p>\n<h4 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h4><p>首先需要两个GitHub仓库，一个(Obsidian-Notes)用来和Obsidian Git远程连接，同步文章内容，然后在push时使用Github Action执行hexo deploy来将部署好的网页传输到另一个仓库。另一个(zhengyangWang1)用来接受第一个仓库部署好的内容，作为Github Page的仓库。</p>\n<p>首先先把本地存放博客框架的文件夹（D:\\myweb\\web）用git连接到第一个仓库,将内容同步。</p>\n<h4 id=\"给两个仓库配置密钥\"><a href=\"#给两个仓库配置密钥\" class=\"headerlink\" title=\"给两个仓库配置密钥\"></a>给两个仓库配置密钥</h4><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\">ssh-keygen -f github-deploy-<span class=\"hljs-built_in\">key</span> <span class=\"hljs-meta\"># 在git Bash中执行，生成秘钥</span><br></code></pre></td></tr></table></figure>\n<p>会在当前目录中生成两个文件：</p>\n<ul>\n<li>私钥文件 <code>github-deploy-key</code></li>\n<li>公钥文件 <code>github-deploy-key.pub</code></li>\n</ul>\n<p>复制私钥文件中<strong>所有内容</strong>，在第一个项目仓库， Settings -&gt; Secrets and variables -&gt; Actions页面上点击New repository secret 添加。<br>在 Name 输入框填写 HEXO_DEPLOY_PRI。<br>在 Value 输入框填写 github-deploy-key文件<strong>所有内容</strong><br><strong>注</strong>：所有内容包括第一行和最后一行不太像私钥内容的东西，曾在此踩坑</p>\n<p>在第二个仓库Setting-&gt; deploy key中配置公钥。在 Title 输入框填写 HEXO_DEPLOY_PUB，在 Key 输入框填写 github-deploy-key.pub 文件内容，勾选 Allow write access 选项。</p>\n<h4 id=\"配置第一个仓库的Github-Actions\"><a href=\"#配置第一个仓库的Github-Actions\" class=\"headerlink\" title=\"配置第一个仓库的Github Actions\"></a>配置第一个仓库的Github Actions</h4><p>在第一个仓库的本地文件夹找到.github文件，在文件夹下创建workflows&#x2F;deploy.yml，文件夹名称必须是workflows，这个是github action的文件夹，下面的yml名称可以任意，为执行文件。</p>\n<p>yml中的内容如下（改了无数bug）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">deploy</span>  <span class=\"hljs-comment\"># name任意</span><br><br><span class=\"hljs-attr\">on:</span>  <span class=\"hljs-comment\"># 当执行push操作时，触发该action</span><br>  <span class=\"hljs-attr\">push:</span><br>    <span class=\"hljs-attr\">branches:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span><br><br><span class=\"hljs-attr\">env:</span><br>  <span class=\"hljs-attr\">GIT_USER:</span> <span class=\"hljs-string\">zhengyangWang1</span>  <span class=\"hljs-comment\"># git的用户名</span><br>  <span class=\"hljs-attr\">GIT_EMAIL:</span> <span class=\"hljs-string\">wangzhengyang@bupt.edu.cn</span>  <span class=\"hljs-comment\"># git的邮箱</span><br>  <span class=\"hljs-attr\">THEME_REPO:</span> <span class=\"hljs-string\">fluid-dev/hexo-theme-fluid</span>  <span class=\"hljs-comment\"># 主题</span><br>  <span class=\"hljs-attr\">THEME_BRANCH:</span> <span class=\"hljs-string\">main</span><br><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">deploy:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>  <span class=\"hljs-comment\"># 环境，使用Ubuntu</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">ref:</span> <span class=\"hljs-string\">main</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">安装</span> <span class=\"hljs-string\">Node</span>  <span class=\"hljs-comment\"># 这个格式是正确的，使用build那个会报错</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v3</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-string\">&quot;20.x&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">配置</span> <span class=\"hljs-string\">环境变量</span><br>        <span class=\"hljs-attr\">env:</span><br>          <span class=\"hljs-attr\">HEXO_DEPLOY_PRI:</span> <span class=\"hljs-string\">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          mkdir -p ~/.ssh/</span><br><span class=\"hljs-string\">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class=\"hljs-string\">          chmod 600 ~/.ssh/id_rsa</span><br><span class=\"hljs-string\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class=\"hljs-string\">          git config --global user.name $GIT_USER</span><br><span class=\"hljs-string\">          git config --global user.email $GIT_EMAIL</span><br><span class=\"hljs-string\"></span>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">安装</span> <span class=\"hljs-string\">Hexo</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          npm install hexo-cli -g</span><br><span class=\"hljs-string\">          npm install</span><br><span class=\"hljs-string\"></span>      <br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">生成静态文件</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          rm -rf .deploy_git  # .deploy_git报错遂添加此行和下一行</span><br><span class=\"hljs-string\">          npm install hexo-deployer-git --save</span><br><span class=\"hljs-string\">          hexo clean</span><br><span class=\"hljs-string\">          hexo generate</span><br><span class=\"hljs-string\"></span>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">部署到Github</span> <span class=\"hljs-string\">page</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br>          <span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">deploy</span><br></code></pre></td></tr></table></figure>\n\n<p>本来还有部署主题文件的代码，但因为deploy时报错所以暂时删去，以后搞清楚作用在处理</p>\n<p>配置好后push一下，看到deploy成功方可。</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p><a href=\"https://juejin.cn/post/7120189614660255781\">Hexo + Obsidian + Git 完美的博客部署与编辑方案 - 掘金</a><br><a href=\"https://zhuanlan.zhihu.com/p/554333805\">Obsidian+Git完美维护Hexo博客 - 知乎</a></p>\n<h4 id=\"插件Folder-foucs-mode\"><a href=\"#插件Folder-foucs-mode\" class=\"headerlink\" title=\"插件Folder foucs mode\"></a>插件Folder foucs mode</h4><p>在ob中打开hexo博客的文件夹，发现文件太多，都是些平时不会浏览的配置文件，所以下载ob插件Folder foucs mode，可以将左侧文件列表聚焦到想要的地方（_posts文件夹下）</p>\n<h4 id=\"适配hexo格式\"><a href=\"#适配hexo格式\" class=\"headerlink\" title=\"适配hexo格式\"></a>适配hexo格式</h4><p>使用hexo new创建笔记会在文件头加入一段模板，这样才会在部署时部署到网页。在ob中，打开核心插件中的模板功能，并将模板文件夹位置设为Template。新建一个Template文件夹，存放一个hexo文件头模板文件。当创建文件时，点击左侧功能栏中的插入模板即可插入文件头。</p>\n<h4 id=\"自动生成分类\"><a href=\"#自动生成分类\" class=\"headerlink\" title=\"自动生成分类\"></a>自动生成分类</h4><p>Hexo写日志，通常我们都需要维护一个front-matter信息，包括<code>title</code>、<code>date</code>。博客多了，为了方便日志分类，一般还需要设置<code>categories</code>。<br><a href=\"https://github.com/xu-song/hexo-auto-category\">GitHub - xu-song&#x2F;hexo-auto-category: Generate categories automatically for each post in Hexo</a>自动生成categories<br>安装：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">npm install hexo-auto-category <span class=\"hljs-attr\">--save</span><br></code></pre></td></tr></table></figure>\n<p>在站点根目录下的<code>_config.yml</code>添加:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">auto_category:</span>  <br> <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>  <br> <span class=\"hljs-attr\">depth:</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>利用Git钩子函数触发更新:</strong><br>这个插件只有执行<code>hexo generate</code>时才会去读取文件夹并更新所有文章的Front-matter分类信息，所以我们可以利用<a href=\"https://link.zhihu.com/?target=https://git-scm.com/book/zh/v2/%25E8%2587%25AA%25E5%25AE%259A%25E4%25B9%2589-Git-Git-%25E9%2592%25A9%25E5%25AD%2590%23_git_hooks\">Git的钩子函数</a>，在commit的时候先执行下<code>hexo generate</code>，这样就能实现自动更新了。<br>在<code>.git/hooks</code>目录下新建一个<code>pre-commit</code>文件，也可以执行<code>touch pre-commit</code>命令新建该文件,将如下命令写到文件里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br>hexo generate &amp;&amp; git add .<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"PicGo-Github图床\"><a href=\"#PicGo-Github图床\" class=\"headerlink\" title=\"PicGo+Github图床\"></a>PicGo+Github图床</h4><p><a href=\"https://zhuanlan.zhihu.com/p/489236769\">使用Github+picGo搭建图床，保姆级教程来了 - 知乎</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clmqcu9pa001dg8u597l512ye","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad0001sg8u55kctftd6"},{"post_id":"clmqcu9pa001dg8u597l512ye","category_id":"clmqcuacz001qg8u5h8g55bqk","_id":"clmqcuad1001ug8u50hbs6aso"},{"post_id":"clmqcu9p10015g8u52l7ncuf9","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad1001wg8u56zx729ad"},{"post_id":"clmqcu9p10015g8u52l7ncuf9","category_id":"clmqcuad0001rg8u59vex0vsr","_id":"clmqcuad2001xg8u5818p28na"},{"post_id":"clmqcu9pd001jg8u54rxzbmx9","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad2001zg8u50jc9ca93"},{"post_id":"clmqcu9pd001jg8u54rxzbmx9","category_id":"clmqcuacz001qg8u5h8g55bqk","_id":"clmqcuad30021g8u59x2v0dpf"},{"post_id":"clmqcu9pb001fg8u53x2h2lso","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad30023g8u5htpd0o07"},{"post_id":"clmqcu9pb001fg8u53x2h2lso","category_id":"clmqcuacz001qg8u5h8g55bqk","_id":"clmqcuad40024g8u5fu1738xe"},{"post_id":"clmqcu9p50017g8u5e7vz0kf3","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad40026g8u5g8dz2fcq"},{"post_id":"clmqcu9p50017g8u5e7vz0kf3","category_id":"clmqcuad0001rg8u59vex0vsr","_id":"clmqcuad40027g8u5hl5tc9b5"},{"post_id":"clmqcu9pe001lg8u531j88nqd","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad50029g8u56s1xaqxn"},{"post_id":"clmqcu9pe001lg8u531j88nqd","category_id":"clmqcuacz001qg8u5h8g55bqk","_id":"clmqcuad6002ag8u54ae3911y"},{"post_id":"clmqcu9p9001bg8u55stdbf8h","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad6002bg8u51o413819"},{"post_id":"clmqcu9p9001bg8u55stdbf8h","category_id":"clmqcuacz001qg8u5h8g55bqk","_id":"clmqcuad6002cg8u50me5fg5u"},{"post_id":"clmqcu9p80019g8u59o9yebjy","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad7002dg8u5988h3fvt"},{"post_id":"clmqcu9p80019g8u59o9yebjy","category_id":"clmqcuad40025g8u59wlpdw3c","_id":"clmqcuad7002eg8u58li20k7f"},{"post_id":"clmqcu9pb001eg8u5gjdsc926","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcuad8002fg8u5ez792798"},{"post_id":"clmqcu9pb001eg8u5gjdsc926","category_id":"clmqcuacz001qg8u5h8g55bqk","_id":"clmqcuad8002gg8u5f55rd3st"},{"post_id":"clmqcuccd002hg8u5he7m5hne","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcucx4002kg8u5aco5as45"},{"post_id":"clmqcuccd002hg8u5he7m5hne","category_id":"clmqcucx2002jg8u5douedg07","_id":"clmqcucx4002lg8u51m8o16g1"},{"post_id":"clmqcud5y002og8u5ah5th9yl","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcudd5002yg8u56qph7izg"},{"post_id":"clmqcud5y002og8u5ah5th9yl","category_id":"clmqcudd2002ug8u5h42r7f96","_id":"clmqcudd50030g8u56jzl8gx8"},{"post_id":"clmqcud5z002sg8u56qgs31pn","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcudd50031g8u55rra3llv"},{"post_id":"clmqcud5z002sg8u56qgs31pn","category_id":"clmqcudd2002ug8u5h42r7f96","_id":"clmqcudd50032g8u53ym908iw"},{"post_id":"clmqcud5w002mg8u52tue73x8","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcudd60033g8u5fmccemoq"},{"post_id":"clmqcud5w002mg8u52tue73x8","category_id":"clmqcudd4002wg8u570xhh132","_id":"clmqcudd60034g8u51z2s0eam"},{"post_id":"clmqcud5y002pg8u53p5afnw0","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcudd60035g8u5362kh5r9"},{"post_id":"clmqcud5y002pg8u53p5afnw0","category_id":"clmqcudd2002ug8u5h42r7f96","_id":"clmqcudd60036g8u57ve8hng6"},{"post_id":"clmqcudd3002vg8u515n1doob","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcudpj0037g8u57npagpjt"},{"post_id":"clmqcudd4002xg8u5clc2ah85","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqcudpk0038g8u5c1c52rs0"},{"post_id":"clmqdnm5o000kfgu5g5feby1k","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqdo2yh0004u0u5calz48jp"},{"post_id":"clmqdnm5o000kfgu5g5feby1k","category_id":"clmqdo2yb0000u0u52dvthq3i","_id":"clmqdo2yi0005u0u51mq9f7ru"},{"post_id":"clmqdnm5k0002fgu5cmgo29rq","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqdo2yj0006u0u5birnduq2"},{"post_id":"clmqdnm5k0002fgu5cmgo29rq","category_id":"clmqdo2yb0000u0u52dvthq3i","_id":"clmqdo2yj0008u0u5aaf5d62k"},{"post_id":"clmqdnm5j0001fgu57dneextf","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqdo2yk0009u0u5glq9cj7g"},{"post_id":"clmqdnm5j0001fgu57dneextf","category_id":"clmqdo2yb0000u0u52dvthq3i","_id":"clmqdo2yk000bu0u5cdsogq51"},{"post_id":"clmqdnm5k0004fgu5aftsh4ig","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqdo2yk000du0u5dhpm4knm"},{"post_id":"clmqdnm5k0004fgu5aftsh4ig","category_id":"clmqdo2yb0000u0u52dvthq3i","_id":"clmqdo2yk000eu0u5csipbe06"},{"post_id":"clmqdnm5k0004fgu5aftsh4ig","category_id":"clmqdo2yh0003u0u5gqnkd5qz","_id":"clmqdo2yk000fu0u59oyccpcv"},{"post_id":"clmqdnm5m000bfgu5ag8r5zty","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqdo2yk000gu0u52hhocqy6"},{"post_id":"clmqdnm5m000bfgu5ag8r5zty","category_id":"clmqdo2yb0000u0u52dvthq3i","_id":"clmqdo2yk000hu0u57rlb3c46"},{"post_id":"clmqdnm5m000bfgu5ag8r5zty","category_id":"clmqdo2yh0003u0u5gqnkd5qz","_id":"clmqdo2yk000iu0u51me23q79"},{"post_id":"clmqdnm5k0003fgu5ah7j0und","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqdo2yl000ju0u50brt4rpa"},{"post_id":"clmqdnm5k0003fgu5ah7j0und","category_id":"clmqdo2yb0000u0u52dvthq3i","_id":"clmqdo2yl000ku0u59k6rgdx4"},{"post_id":"clmqdnm5k0003fgu5ah7j0und","category_id":"clmqdo2yj0007u0u5fkij7h8c","_id":"clmqdo2yl000lu0u5fcuad6mi"},{"post_id":"clmqdnm5n000dfgu51hj4ceun","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqdo2yl000mu0u59jyl0wrc"},{"post_id":"clmqdnm5n000dfgu51hj4ceun","category_id":"clmqdo2yb0000u0u52dvthq3i","_id":"clmqdo2yl000nu0u53wwhcnnc"},{"post_id":"clmqdnm5n000dfgu51hj4ceun","category_id":"clmqdo2yj0007u0u5fkij7h8c","_id":"clmqdo2yl000ou0u5hisxa4a2"},{"post_id":"clmqdnm5n000cfgu548bv2njh","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqdo2yl000pu0u509u34xs0"},{"post_id":"clmqdnm5n000cfgu548bv2njh","category_id":"clmqdo2yb0000u0u52dvthq3i","_id":"clmqdo2yl000qu0u5b7dl8z4w"},{"post_id":"clmqdnm5n000cfgu548bv2njh","category_id":"clmqdo2yj0007u0u5fkij7h8c","_id":"clmqdo2yl000ru0u571am61wq"},{"post_id":"clmqfyl7x0000usu5em8n6qku","category_id":"clmqcuact001ng8u5br7td6nd","_id":"clmqg4atr0000lku5hlua35f0"}],"PostTag":[],"Tag":[]}}